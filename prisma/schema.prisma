// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  steamId           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String      @id @default(cuid())
  name            String?
  email           String?     @unique
  emailVerified   DateTime?
  image           String?
  steamId         String?     @unique
  username        String?
  avatar          String?
  licenseType     String      @default("trial") // trial, monthly, yearly, lifetime
  licenseExpires  DateTime?
  stripeCustomerId String?    @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  accounts        Account[]
  sessions        Session[]
  inventory       Inventory[]
  alerts          PriceAlert[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id            String         @id @default(cuid())
  name          String         @unique
  marketHashName String        @unique
  rarity        String
  category      String         // weapon, knife, gloves, etc.
  iconUrl       String?
  inspectLink   String?        // Steam inspect link
  floatRange    String?        // "0.00-1.00"
  
  // CS2 Specific Fields
  weapon        String?        // AK-47, M4A4, etc.
  skin          String?        // Redline, Asiimov, etc.
  collection    String?        // The 2018 Inferno Collection, etc.
  source        String?        // Case, Operation, etc.
  
  // Wear and Pattern
  float         Float?         // Float value (0.00000000000000 to 1.00000000000000)
  wear          String?        // FN, MW, FT, WW, BS
  pattern       Int?           // Paint seed/pattern number
  
  // Special Properties
  isStatTrak    Boolean        @default(false)
  isSouvenir    Boolean        @default(false)
  isNormal      Boolean        @default(true)
  
  // Age and Market Data
  age           String?        // Recent, Vintage, Classic, Legacy
  marketHash    String?        // Steam market hash
  
  // Pricing
  steamPrice    Float?
  buffPrice     Float?
  csMoneyPrice  Float?
  bitskinsPrice Float?
  lastUpdated   DateTime       @default(now())
  createdAt     DateTime       @default(now())
  
  // Relations
  inventory     Inventory[]
  priceHistory  PriceHistory[]
  alerts        PriceAlert[]
  stickers      Sticker[]
  charms        Charm[]

  @@index([category])
  @@index([rarity])
  @@index([name])
  @@index([weapon])
  @@index([collection])
  @@index([source])
  @@index([wear])
  @@index([isStatTrak])
  @@index([isSouvenir])
  @@index([float])
  @@index([pattern])
}

model Inventory {
  id         String    @id @default(cuid())
  userId     String
  itemId     String
  float      Float?
  stickers   Json?     // Array of sticker objects
  pricePaid  Float?
  condition  String?   // Factory New, Minimal Wear, etc.
  acquiredAt DateTime  @default(now())
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  item       Item      @relation(fields: [itemId], references: [id])

  @@index([userId])
  @@index([itemId])
}

model PriceHistory {
  id        String   @id @default(cuid())
  itemId    String
  platform  String   // steam, buff, cs_money, bitskins
  price     Float
  volume    Int?     // sales volume
  timestamp DateTime @default(now())
  item      Item     @relation(fields: [itemId], references: [id])

  @@index([itemId, platform, timestamp])
  @@index([timestamp])
}

model PriceAlert {
  id        String   @id @default(cuid())
  userId    String
  itemId    String
  platform  String
  condition String   // above, below
  targetPrice Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      Item     @relation(fields: [itemId], references: [id])

  @@index([userId])
  @@index([isActive])
}

model Sticker {
  id        String   @id @default(cuid())
  name      String
  slot      Int      // 1-4 for sticker slots
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([itemId])
  @@index([name])
}

model Charm {
  id        String   @id @default(cuid())
  name      String
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([itemId])
  @@index([name])
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  stripeSubscriptionId String @unique
  status           String
  priceId          String
  currentPeriodEnd DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}