/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/steamcommunity";
exports.ids = ["vendor-chunks/steamcommunity"];
exports.modules = {

/***/ "(rsc)/./node_modules/steamcommunity/classes/CConfirmation.js":
/*!**************************************************************!*\
  !*** ./node_modules/steamcommunity/classes/CConfirmation.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\n\nmodule.exports = CConfirmation;\n\nfunction CConfirmation(community, data) {\n\tObject.defineProperty(this, '_community', {value: community});\n\n\tthis.id = data.id.toString();\n\tthis.type = data.type;\n\tthis.creator = data.creator.toString();\n\tthis.key = data.key;\n\tthis.title = data.title;\n\tthis.receiving = data.receiving;\n\tthis.sending = data.sending;\n\tthis.time = data.time;\n\tthis.timestamp = data.timestamp;\n\tthis.icon = data.icon;\n\tthis.offerID = this.type == SteamCommunity.ConfirmationType.Trade ? this.creator : null;\n}\n\nCConfirmation.prototype.getOfferID = function(time, key, callback) {\n\tif (this.type && this.creator) {\n\t\tif (this.type != SteamCommunity.ConfirmationType.Trade) {\n\t\t\tcallback(new Error('Not a trade confirmation'));\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(null, this.creator);\n\t\treturn;\n\t}\n\n\tthis._community.getConfirmationOfferID(this.id, time, key, callback);\n};\n\nCConfirmation.prototype.respond = function(time, key, accept, callback) {\n\tthis._community.respondToConfirmation(this.id, this.key, time, key, accept, callback);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvY2xhc3Nlcy9DQ29uZmlybWF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQixtQkFBTyxDQUFDLGlFQUFhOztBQUUxQzs7QUFFQTtBQUNBLDRDQUE0QyxpQkFBaUI7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3MyLXNraW4tdHJhY2tlci8uL25vZGVfbW9kdWxlcy9zdGVhbWNvbW11bml0eS9jbGFzc2VzL0NDb25maXJtYXRpb24uanM/ZDc0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RlYW1Db21tdW5pdHkgPSByZXF1aXJlKCcuLi9pbmRleC5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENDb25maXJtYXRpb247XG5cbmZ1bmN0aW9uIENDb25maXJtYXRpb24oY29tbXVuaXR5LCBkYXRhKSB7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX2NvbW11bml0eScsIHt2YWx1ZTogY29tbXVuaXR5fSk7XG5cblx0dGhpcy5pZCA9IGRhdGEuaWQudG9TdHJpbmcoKTtcblx0dGhpcy50eXBlID0gZGF0YS50eXBlO1xuXHR0aGlzLmNyZWF0b3IgPSBkYXRhLmNyZWF0b3IudG9TdHJpbmcoKTtcblx0dGhpcy5rZXkgPSBkYXRhLmtleTtcblx0dGhpcy50aXRsZSA9IGRhdGEudGl0bGU7XG5cdHRoaXMucmVjZWl2aW5nID0gZGF0YS5yZWNlaXZpbmc7XG5cdHRoaXMuc2VuZGluZyA9IGRhdGEuc2VuZGluZztcblx0dGhpcy50aW1lID0gZGF0YS50aW1lO1xuXHR0aGlzLnRpbWVzdGFtcCA9IGRhdGEudGltZXN0YW1wO1xuXHR0aGlzLmljb24gPSBkYXRhLmljb247XG5cdHRoaXMub2ZmZXJJRCA9IHRoaXMudHlwZSA9PSBTdGVhbUNvbW11bml0eS5Db25maXJtYXRpb25UeXBlLlRyYWRlID8gdGhpcy5jcmVhdG9yIDogbnVsbDtcbn1cblxuQ0NvbmZpcm1hdGlvbi5wcm90b3R5cGUuZ2V0T2ZmZXJJRCA9IGZ1bmN0aW9uKHRpbWUsIGtleSwgY2FsbGJhY2spIHtcblx0aWYgKHRoaXMudHlwZSAmJiB0aGlzLmNyZWF0b3IpIHtcblx0XHRpZiAodGhpcy50eXBlICE9IFN0ZWFtQ29tbXVuaXR5LkNvbmZpcm1hdGlvblR5cGUuVHJhZGUpIHtcblx0XHRcdGNhbGxiYWNrKG5ldyBFcnJvcignTm90IGEgdHJhZGUgY29uZmlybWF0aW9uJykpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNhbGxiYWNrKG51bGwsIHRoaXMuY3JlYXRvcik7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dGhpcy5fY29tbXVuaXR5LmdldENvbmZpcm1hdGlvbk9mZmVySUQodGhpcy5pZCwgdGltZSwga2V5LCBjYWxsYmFjayk7XG59O1xuXG5DQ29uZmlybWF0aW9uLnByb3RvdHlwZS5yZXNwb25kID0gZnVuY3Rpb24odGltZSwga2V5LCBhY2NlcHQsIGNhbGxiYWNrKSB7XG5cdHRoaXMuX2NvbW11bml0eS5yZXNwb25kVG9Db25maXJtYXRpb24odGhpcy5pZCwgdGhpcy5rZXksIHRpbWUsIGtleSwgYWNjZXB0LCBjYWxsYmFjayk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/classes/CConfirmation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/classes/CEconItem.js":
/*!**********************************************************!*\
  !*** ./node_modules/steamcommunity/classes/CEconItem.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("module.exports = CEconItem;\r\n\r\nfunction CEconItem(item, description, contextID) {\r\n\tvar thing;\r\n\tfor (thing in item) {\r\n\t\tif (item.hasOwnProperty(thing)) {\r\n\t\t\tthis[thing] = item[thing];\r\n\t\t}\r\n\t}\r\n\r\n\tvar isCurrency = !!(this.is_currency || this.currency) || typeof this.currencyid !== 'undefined'; // I don't want to put this on the object yet; it's nice to have the ids at the top of printed output\r\n\r\n\tif (isCurrency) {\r\n\t\tthis.currencyid = this.id = (this.id || this.currencyid);\r\n\t} else {\r\n\t\tthis.assetid = this.id = (this.id || this.assetid);\r\n\t}\r\n\r\n\tthis.instanceid = this.instanceid || '0';\r\n\tthis.amount = parseInt(this.amount, 10);\r\n\tthis.contextid = this.contextid || contextID.toString();\r\n\r\n\t// Merge the description\r\n\tif (description) {\r\n\t\t// Is this a listing of descriptions?\r\n\t\tif (description[this.classid + '_' + this.instanceid]) {\r\n\t\t\tdescription = description[this.classid + '_' + this.instanceid];\r\n\t\t}\r\n\r\n\t\tfor (thing in description) {\r\n\t\t\tif (description.hasOwnProperty(thing) && !this.hasOwnProperty(thing)) {\r\n\t\t\t\tthis[thing] = description[thing];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tthis.is_currency = isCurrency;\r\n\tthis.tradable = !!this.tradable;\r\n\tthis.marketable = !!this.marketable;\r\n\tthis.commodity = !!this.commodity;\r\n\tthis.market_tradable_restriction = (this.market_tradable_restriction ? parseInt(this.market_tradable_restriction, 10) : 0);\r\n\tthis.market_marketable_restriction = (this.market_marketable_restriction ? parseInt(this.market_marketable_restriction, 10) : 0);\r\n\tthis.fraudwarnings = this.fraudwarnings || [];\r\n\tthis.descriptions = this.descriptions || [];\r\n\r\n\tif (this.owner && JSON.stringify(this.owner) == '{}') {\r\n\t\tthis.owner = null;\r\n\t}\r\n\r\n\t// Restore old property names of tags\r\n\tif (this.tags) {\r\n\t\tthis.tags = this.tags.map(function(tag) {\r\n\t\t\treturn {\r\n\t\t\t\t\"internal_name\": tag.internal_name,\r\n\t\t\t\t\"name\": tag.localized_tag_name || tag.name,\r\n\t\t\t\t\"category\": tag.category,\r\n\t\t\t\t\"color\": tag.color || \"\",\r\n\t\t\t\t\"category_name\": tag.localized_category_name || tag.category_name\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\t// Restore market_fee_app, if applicable\r\n\tvar match;\r\n\tif (this.appid == 753 && this.contextid == 6 && this.market_hash_name && (match = this.market_hash_name.match(/^(\\d+)\\-/))) {\r\n\t\tthis.market_fee_app = parseInt(match[1], 10);\r\n\t}\r\n\r\n\t// Restore cache_expiration, if we can (for CS:GO items)\r\n\tif (this.appid == 730 && this.contextid == 2 && this.owner_descriptions) {\r\n\t\tlet description = this.owner_descriptions.find(d => d.value && d.value.indexOf('Tradable/Marketable After ') == 0);\r\n\t\tif (description) {\r\n\t\t\tlet date = new Date(description.value.substring(26).replace(/[,()]/g, ''));\r\n\t\t\tif (date) {\r\n\t\t\t\tthis.cache_expiration = date.toISOString();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If we have item_expiration, also set cache_expiration to the same value\r\n\tif (this.item_expiration) {\r\n\t\tthis.cache_expiration = this.item_expiration;\r\n\t}\r\n\r\n\tif (this.actions === \"\") {\r\n\t\tthis.actions = [];\r\n\t}\r\n\r\n\t// One wouldn't think that we need this if statement, but apparently v8 has a weird bug/quirk where deleting a\r\n\t// property results in greatly increased memory usage. Because that makes sense.\r\n\tif (this.currency) {\r\n\t\tdelete this.currency;\r\n\t}\r\n}\r\n\r\nCEconItem.prototype.getImageURL = function() {\r\n\treturn \"https://steamcommunity-a.akamaihd.net/economy/image/\" + this.icon_url + \"/\";\r\n};\r\n\r\nCEconItem.prototype.getLargeImageURL = function() {\r\n\tif(!this.icon_url_large) {\r\n\t\treturn this.getImageURL();\r\n\t}\r\n\r\n\treturn \"https://steamcommunity-a.akamaihd.net/economy/image/\" + this.icon_url_large + \"/\";\r\n};\r\n\r\nCEconItem.prototype.getTag = function(category) {\r\n\tif (!this.tags) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfor (var i = 0; i < this.tags.length; i++) {\r\n\t\tif (this.tags[i].category == category) {\r\n\t\t\treturn this.tags[i];\r\n\t\t}\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvY2xhc3Nlcy9DRWNvbkl0ZW0uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtR0FBbUcsK0NBQStDO0FBQ2xKO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsc0JBQXNCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3MyLXNraW4tdHJhY2tlci8uL25vZGVfbW9kdWxlcy9zdGVhbWNvbW11bml0eS9jbGFzc2VzL0NFY29uSXRlbS5qcz8wM2U0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gQ0Vjb25JdGVtO1xyXG5cclxuZnVuY3Rpb24gQ0Vjb25JdGVtKGl0ZW0sIGRlc2NyaXB0aW9uLCBjb250ZXh0SUQpIHtcclxuXHR2YXIgdGhpbmc7XHJcblx0Zm9yICh0aGluZyBpbiBpdGVtKSB7XHJcblx0XHRpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSh0aGluZykpIHtcclxuXHRcdFx0dGhpc1t0aGluZ10gPSBpdGVtW3RoaW5nXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHZhciBpc0N1cnJlbmN5ID0gISEodGhpcy5pc19jdXJyZW5jeSB8fCB0aGlzLmN1cnJlbmN5KSB8fCB0eXBlb2YgdGhpcy5jdXJyZW5jeWlkICE9PSAndW5kZWZpbmVkJzsgLy8gSSBkb24ndCB3YW50IHRvIHB1dCB0aGlzIG9uIHRoZSBvYmplY3QgeWV0OyBpdCdzIG5pY2UgdG8gaGF2ZSB0aGUgaWRzIGF0IHRoZSB0b3Agb2YgcHJpbnRlZCBvdXRwdXRcclxuXHJcblx0aWYgKGlzQ3VycmVuY3kpIHtcclxuXHRcdHRoaXMuY3VycmVuY3lpZCA9IHRoaXMuaWQgPSAodGhpcy5pZCB8fCB0aGlzLmN1cnJlbmN5aWQpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR0aGlzLmFzc2V0aWQgPSB0aGlzLmlkID0gKHRoaXMuaWQgfHwgdGhpcy5hc3NldGlkKTtcclxuXHR9XHJcblxyXG5cdHRoaXMuaW5zdGFuY2VpZCA9IHRoaXMuaW5zdGFuY2VpZCB8fCAnMCc7XHJcblx0dGhpcy5hbW91bnQgPSBwYXJzZUludCh0aGlzLmFtb3VudCwgMTApO1xyXG5cdHRoaXMuY29udGV4dGlkID0gdGhpcy5jb250ZXh0aWQgfHwgY29udGV4dElELnRvU3RyaW5nKCk7XHJcblxyXG5cdC8vIE1lcmdlIHRoZSBkZXNjcmlwdGlvblxyXG5cdGlmIChkZXNjcmlwdGlvbikge1xyXG5cdFx0Ly8gSXMgdGhpcyBhIGxpc3Rpbmcgb2YgZGVzY3JpcHRpb25zP1xyXG5cdFx0aWYgKGRlc2NyaXB0aW9uW3RoaXMuY2xhc3NpZCArICdfJyArIHRoaXMuaW5zdGFuY2VpZF0pIHtcclxuXHRcdFx0ZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvblt0aGlzLmNsYXNzaWQgKyAnXycgKyB0aGlzLmluc3RhbmNlaWRdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAodGhpbmcgaW4gZGVzY3JpcHRpb24pIHtcclxuXHRcdFx0aWYgKGRlc2NyaXB0aW9uLmhhc093blByb3BlcnR5KHRoaW5nKSAmJiAhdGhpcy5oYXNPd25Qcm9wZXJ0eSh0aGluZykpIHtcclxuXHRcdFx0XHR0aGlzW3RoaW5nXSA9IGRlc2NyaXB0aW9uW3RoaW5nXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dGhpcy5pc19jdXJyZW5jeSA9IGlzQ3VycmVuY3k7XHJcblx0dGhpcy50cmFkYWJsZSA9ICEhdGhpcy50cmFkYWJsZTtcclxuXHR0aGlzLm1hcmtldGFibGUgPSAhIXRoaXMubWFya2V0YWJsZTtcclxuXHR0aGlzLmNvbW1vZGl0eSA9ICEhdGhpcy5jb21tb2RpdHk7XHJcblx0dGhpcy5tYXJrZXRfdHJhZGFibGVfcmVzdHJpY3Rpb24gPSAodGhpcy5tYXJrZXRfdHJhZGFibGVfcmVzdHJpY3Rpb24gPyBwYXJzZUludCh0aGlzLm1hcmtldF90cmFkYWJsZV9yZXN0cmljdGlvbiwgMTApIDogMCk7XHJcblx0dGhpcy5tYXJrZXRfbWFya2V0YWJsZV9yZXN0cmljdGlvbiA9ICh0aGlzLm1hcmtldF9tYXJrZXRhYmxlX3Jlc3RyaWN0aW9uID8gcGFyc2VJbnQodGhpcy5tYXJrZXRfbWFya2V0YWJsZV9yZXN0cmljdGlvbiwgMTApIDogMCk7XHJcblx0dGhpcy5mcmF1ZHdhcm5pbmdzID0gdGhpcy5mcmF1ZHdhcm5pbmdzIHx8IFtdO1xyXG5cdHRoaXMuZGVzY3JpcHRpb25zID0gdGhpcy5kZXNjcmlwdGlvbnMgfHwgW107XHJcblxyXG5cdGlmICh0aGlzLm93bmVyICYmIEpTT04uc3RyaW5naWZ5KHRoaXMub3duZXIpID09ICd7fScpIHtcclxuXHRcdHRoaXMub3duZXIgPSBudWxsO1xyXG5cdH1cclxuXHJcblx0Ly8gUmVzdG9yZSBvbGQgcHJvcGVydHkgbmFtZXMgb2YgdGFnc1xyXG5cdGlmICh0aGlzLnRhZ3MpIHtcclxuXHRcdHRoaXMudGFncyA9IHRoaXMudGFncy5tYXAoZnVuY3Rpb24odGFnKSB7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0XCJpbnRlcm5hbF9uYW1lXCI6IHRhZy5pbnRlcm5hbF9uYW1lLFxyXG5cdFx0XHRcdFwibmFtZVwiOiB0YWcubG9jYWxpemVkX3RhZ19uYW1lIHx8IHRhZy5uYW1lLFxyXG5cdFx0XHRcdFwiY2F0ZWdvcnlcIjogdGFnLmNhdGVnb3J5LFxyXG5cdFx0XHRcdFwiY29sb3JcIjogdGFnLmNvbG9yIHx8IFwiXCIsXHJcblx0XHRcdFx0XCJjYXRlZ29yeV9uYW1lXCI6IHRhZy5sb2NhbGl6ZWRfY2F0ZWdvcnlfbmFtZSB8fCB0YWcuY2F0ZWdvcnlfbmFtZVxyXG5cdFx0XHR9O1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvLyBSZXN0b3JlIG1hcmtldF9mZWVfYXBwLCBpZiBhcHBsaWNhYmxlXHJcblx0dmFyIG1hdGNoO1xyXG5cdGlmICh0aGlzLmFwcGlkID09IDc1MyAmJiB0aGlzLmNvbnRleHRpZCA9PSA2ICYmIHRoaXMubWFya2V0X2hhc2hfbmFtZSAmJiAobWF0Y2ggPSB0aGlzLm1hcmtldF9oYXNoX25hbWUubWF0Y2goL14oXFxkKylcXC0vKSkpIHtcclxuXHRcdHRoaXMubWFya2V0X2ZlZV9hcHAgPSBwYXJzZUludChtYXRjaFsxXSwgMTApO1xyXG5cdH1cclxuXHJcblx0Ly8gUmVzdG9yZSBjYWNoZV9leHBpcmF0aW9uLCBpZiB3ZSBjYW4gKGZvciBDUzpHTyBpdGVtcylcclxuXHRpZiAodGhpcy5hcHBpZCA9PSA3MzAgJiYgdGhpcy5jb250ZXh0aWQgPT0gMiAmJiB0aGlzLm93bmVyX2Rlc2NyaXB0aW9ucykge1xyXG5cdFx0bGV0IGRlc2NyaXB0aW9uID0gdGhpcy5vd25lcl9kZXNjcmlwdGlvbnMuZmluZChkID0+IGQudmFsdWUgJiYgZC52YWx1ZS5pbmRleE9mKCdUcmFkYWJsZS9NYXJrZXRhYmxlIEFmdGVyICcpID09IDApO1xyXG5cdFx0aWYgKGRlc2NyaXB0aW9uKSB7XHJcblx0XHRcdGxldCBkYXRlID0gbmV3IERhdGUoZGVzY3JpcHRpb24udmFsdWUuc3Vic3RyaW5nKDI2KS5yZXBsYWNlKC9bLCgpXS9nLCAnJykpO1xyXG5cdFx0XHRpZiAoZGF0ZSkge1xyXG5cdFx0XHRcdHRoaXMuY2FjaGVfZXhwaXJhdGlvbiA9IGRhdGUudG9JU09TdHJpbmcoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gSWYgd2UgaGF2ZSBpdGVtX2V4cGlyYXRpb24sIGFsc28gc2V0IGNhY2hlX2V4cGlyYXRpb24gdG8gdGhlIHNhbWUgdmFsdWVcclxuXHRpZiAodGhpcy5pdGVtX2V4cGlyYXRpb24pIHtcclxuXHRcdHRoaXMuY2FjaGVfZXhwaXJhdGlvbiA9IHRoaXMuaXRlbV9leHBpcmF0aW9uO1xyXG5cdH1cclxuXHJcblx0aWYgKHRoaXMuYWN0aW9ucyA9PT0gXCJcIikge1xyXG5cdFx0dGhpcy5hY3Rpb25zID0gW107XHJcblx0fVxyXG5cclxuXHQvLyBPbmUgd291bGRuJ3QgdGhpbmsgdGhhdCB3ZSBuZWVkIHRoaXMgaWYgc3RhdGVtZW50LCBidXQgYXBwYXJlbnRseSB2OCBoYXMgYSB3ZWlyZCBidWcvcXVpcmsgd2hlcmUgZGVsZXRpbmcgYVxyXG5cdC8vIHByb3BlcnR5IHJlc3VsdHMgaW4gZ3JlYXRseSBpbmNyZWFzZWQgbWVtb3J5IHVzYWdlLiBCZWNhdXNlIHRoYXQgbWFrZXMgc2Vuc2UuXHJcblx0aWYgKHRoaXMuY3VycmVuY3kpIHtcclxuXHRcdGRlbGV0ZSB0aGlzLmN1cnJlbmN5O1xyXG5cdH1cclxufVxyXG5cclxuQ0Vjb25JdGVtLnByb3RvdHlwZS5nZXRJbWFnZVVSTCA9IGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiBcImh0dHBzOi8vc3RlYW1jb21tdW5pdHktYS5ha2FtYWloZC5uZXQvZWNvbm9teS9pbWFnZS9cIiArIHRoaXMuaWNvbl91cmwgKyBcIi9cIjtcclxufTtcclxuXHJcbkNFY29uSXRlbS5wcm90b3R5cGUuZ2V0TGFyZ2VJbWFnZVVSTCA9IGZ1bmN0aW9uKCkge1xyXG5cdGlmKCF0aGlzLmljb25fdXJsX2xhcmdlKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5nZXRJbWFnZVVSTCgpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIFwiaHR0cHM6Ly9zdGVhbWNvbW11bml0eS1hLmFrYW1haWhkLm5ldC9lY29ub215L2ltYWdlL1wiICsgdGhpcy5pY29uX3VybF9sYXJnZSArIFwiL1wiO1xyXG59O1xyXG5cclxuQ0Vjb25JdGVtLnByb3RvdHlwZS5nZXRUYWcgPSBmdW5jdGlvbihjYXRlZ29yeSkge1xyXG5cdGlmICghdGhpcy50YWdzKSB7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblxyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50YWdzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRpZiAodGhpcy50YWdzW2ldLmNhdGVnb3J5ID09IGNhdGVnb3J5KSB7XHJcblx0XHRcdHJldHVybiB0aGlzLnRhZ3NbaV07XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gbnVsbDtcclxufTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/classes/CEconItem.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/classes/CMarketItem.js":
/*!************************************************************!*\
  !*** ./node_modules/steamcommunity/classes/CMarketItem.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\nvar Cheerio = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/index.js\");\n\nSteamCommunity.prototype.getMarketItem = function(appid, hashName, currency, callback) {\n\tif (typeof currency == \"function\") {\n\t\tcallback = currency;\n\t\tcurrency = 1;\n\t}\n\tvar self = this;\n\tthis.httpRequest(\"https://steamcommunity.com/market/listings/\" + appid + \"/\" + encodeURIComponent(hashName), function(err, response, body) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tvar $ = Cheerio.load(body);\n\t\tif($('.market_listing_table_message') && $('.market_listing_table_message').text().trim() == 'There are no listings for this item.') {\n\t\t\tcallback(new Error(\"There are no listings for this item.\"));\n\t\t\treturn;\n\t\t}\n\n\t\tvar item = new CMarketItem(appid, hashName, self, body, $);\n\t\titem.updatePrice(currency, function(err) {\n\t\t\tif(err) {\n\t\t\t\tcallback(err);\n\t\t\t} else {\n\t\t\t\tcallback(null, item);\n\t\t\t}\n\t\t});\n\t}, \"steamcommunity\");\n};\n\nfunction CMarketItem(appid, hashName, community, body, $) {\n\tthis._appid = appid;\n\tthis._hashName = hashName;\n\tthis._community = community;\n\tthis._$ = $;\n\n\tthis._country = \"US\";\n\tvar match = body.match(/var g_strCountryCode = \"([^\"]+)\";/);\n\tif(match) {\n\t\tthis._country = match[1];\n\t}\n\n\tthis._language = \"english\";\n\tmatch = body.match(/var g_strLanguage = \"([^\"]+)\";/);\n\tif(match) {\n\t\tthis._language = match[1];\n\t}\n\n\tthis.commodity = false;\n\tmatch = body.match(/Market_LoadOrderSpread\\(\\s*(\\d+)\\s*\\);/);\n\tif(match) {\n\t\tthis.commodity = true;\n\t\tthis.commodityID = parseInt(match[1], 10);\n\t}\n\n\tthis.medianSalePrices = null;\n\tmatch = body.match(/var line1=([^;]+);/);\n\tif(match) {\n\t\ttry {\n\t\t\tthis.medianSalePrices = JSON.parse(match[1]);\n\t\t\tthis.medianSalePrices = this.medianSalePrices.map(function(item) {\n\t\t\t\treturn {\n\t\t\t\t\t\"hour\": new Date(item[0]),\n\t\t\t\t\t\"price\": item[1],\n\t\t\t\t\t\"quantity\": parseInt(item[2], 10)\n\t\t\t\t};\n\t\t\t});\n\t\t} catch(e) {\n\t\t\t// ignore\n\t\t}\n\t}\n\n\tthis.firstAsset = null;\n\tthis.assets = null;\n\tmatch = body.match(/var g_rgAssets = (.*);/);\n\tif (match) {\n\t\ttry {\n\t\t\tthis.assets = JSON.parse(match[1]);\n\t\t\tthis.assets = this.assets[appid];\n\t\t\tthis.assets = this.assets[Object.keys(this.assets)[0]];\n\t\t\tthis.firstAsset = this.assets[Object.keys(this.assets)[0]];\n\t\t} catch (e) {\n\t\t\t// ignore\n\t\t}\n\t}\n\n\tthis.quantity = 0;\n\tthis.lowestPrice = 0;\n\t// TODO: Buying listings and placing buy orders\n}\n\nCMarketItem.prototype.updatePrice = function (currency, callback) {\n\tif (this.commodity) {\n\t\tthis.updatePriceForCommodity(currency, callback);\n\t} else {\n\t\tthis.updatePriceForNonCommodity(currency, callback);\n\t}\n};\n\nCMarketItem.prototype.updatePriceForCommodity = function(currency, callback) {\n\tif(!this.commodity) {\n\t\tthrow new Error(\"Cannot update price for non-commodity item\");\n\t}\n\n\tvar self = this;\n\tthis._community.httpRequest({\n\t\t\"uri\": \"https://steamcommunity.com/market/itemordershistogram?country=US&language=english&currency=\" + currency + \"&item_nameid=\" + this.commodityID,\n\t\t\"json\": true\n\t}, function(err, response, body) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif(body.success != 1) {\n\t\t\tif(callback) {\n\t\t\t\tcallback(new Error(\"Error \" + body.success));\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvar match = (body.sell_order_summary || '').match(/<span class=\"market_commodity_orders_header_promote\">(\\d+)<\\/span>/);\n\t\tif(match) {\n\t\t\tself.quantity = parseInt(match[1], 10);\n\t\t}\n\n\t\tself.buyQuantity = 0;\n\t\tmatch = (body.buy_order_summary || '').match(/<span class=\"market_commodity_orders_header_promote\">(\\d+)<\\/span>/);\n\t\tif(match) {\n\t\t\tself.buyQuantity = parseInt(match[1], 10);\n\t\t}\n\n\t\tself.lowestPrice = parseInt(body.lowest_sell_order, 10);\n\t\tself.highestBuyOrder = parseInt(body.highest_buy_order, 10);\n\n\t\t// TODO: The tables?\n\t\tif(callback) {\n\t\t\tcallback(null);\n\t\t}\n\t}, \"steamcommunity\");\n};\n\nCMarketItem.prototype.updatePriceForNonCommodity = function (currency, callback) {\n\tif(this.commodity) {\n\t\tthrow new Error(\"Cannot update price for commodity item\");\n\t}\n\n\tvar self = this;\n\tthis._community.httpRequest({\n\t\t\"uri\": \"https://steamcommunity.com/market/listings/\" +\n\t\t\tthis._appid + \"/\" +\n\t\t\tencodeURIComponent(this._hashName) +\n\t\t\t\"/render/?query=&start=0&count=10&country=US&language=english&currency=\" + currency,\n\t\t\"json\": true\n\t}, function(err, response, body) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (body.success != 1) {\n\t\t\tcallback && callback(new Error(\"Error \" + body.success));\n\t\t\treturn;\n\t\t}\n\n\t\tvar match = body.total_count;\n\t\tif (match) {\n\t\t\tself.quantity = parseInt(match, 10);\n\t\t}\n\n\t\tvar lowestPrice;\n\t\tvar $ = Cheerio.load(body.results_html);\n\t\tmatch = $(\".market_listing_price.market_listing_price_with_fee\");\n\t\tif (match) {\n\t\t\tfor (var i = 0; i < match.length; i++) {\n\t\t\t\tlowestPrice = parseFloat($(match[i]).text().replace(\",\", \".\").replace(/[^\\d.]/g, ''));\n\t\t\t\tif (!isNaN(lowestPrice)) {\n\t\t\t\t\tself.lowestPrice = lowestPrice;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcallback && callback(null);\n\t}, \"steamcommunity\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/classes/CMarketItem.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/classes/CMarketSearchResult.js":
/*!********************************************************************!*\
  !*** ./node_modules/steamcommunity/classes/CMarketSearchResult.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\nvar Cheerio = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/index.js\");\n\nSteamCommunity.prototype.marketSearch = function(options, callback) {\n\tvar qs = {};\n\n\tif(typeof options === 'string') {\n\t\tqs.query = options;\n\t} else {\n\t\tqs.query = options.query || '';\n\t\tqs.appid = options.appid;\n\t\tqs.search_descriptions = options.searchDescriptions ? 1 : 0;\n\n\t\tif(qs.appid) {\n\t\t\tfor(var i in options) {\n\t\t\t\tif(['query', 'appid', 'searchDescriptions'].indexOf(i) != -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// This is a tag\n\t\t\t\tqs['category_' + qs.appid + '_' + i + '[]'] = 'tag_' + options[i];\n\t\t\t}\n\t\t}\n\t}\n\n\tqs.start = 0;\n\tqs.count = 100;\n\tqs.sort_column = 'price';\n\tqs.sort_dir = 'asc';\n\n\tvar self = this;\n\tvar results = [];\n\tperformSearch();\n\n\tfunction performSearch() {\n\t\tself.httpRequest({\n\t\t\t\"uri\": \"https://steamcommunity.com/market/search/render/\",\n\t\t\t\"qs\": qs,\n\t\t\t\"headers\": {\n\t\t\t\t\"referer\": \"https://steamcommunity.com/market/search\"\n\t\t\t},\n\t\t\t\"json\": true\n\t\t}, function(err, response, body) {\n\t\t\tif (err) {\n\t\t\t\tcallback(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(!body.success) {\n\t\t\t\tcallback(new Error(\"Success is not true\"));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(!body.results_html) {\n\t\t\t\tcallback(new Error(\"No results_html in response\"));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar $ = Cheerio.load(body.results_html);\n\t\t\tvar $errorMsg = $('.market_listing_table_message');\n\t\t\tif($errorMsg.length > 0) {\n\t\t\t\tcallback(new Error($errorMsg.text()));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar rows = $('.market_listing_row_link');\n\t\t\tfor(var i = 0; i < rows.length; i++) {\n\t\t\t\tresults.push(new CMarketSearchResult($(rows[i])));\n\t\t\t}\n\n\t\t\tif(body.start + body.pagesize >= body.total_count) {\n\t\t\t\tcallback(null, results);\n\t\t\t} else {\n\t\t\t\tqs.start += body.pagesize;\n\t\t\t\tperformSearch();\n\t\t\t}\n\t\t}, \"steamcommunity\");\n\t}\n};\n\nfunction CMarketSearchResult(row) {\n\tvar match = row.attr('href').match(/\\/market\\/listings\\/(\\d+)\\/([^\\?\\/]+)/);\n\n\tthis.appid = parseInt(match[1], 10);\n\tthis.market_hash_name = decodeURIComponent(match[2]);\n\tthis.image = ((row.find('.market_listing_item_img').attr('src') || \"\").match(/^https?:\\/\\/[^\\/]+\\/economy\\/image\\/[^\\/]+\\//) || [])[0];\n\tthis.price = parseInt(row.find('.market_listing_their_price .market_table_value span.normal_price').text().replace(/[^\\d]+/g, ''), 10);\n\tthis.quantity = parseInt(row.find('.market_listing_num_listings_qty').text().replace(/[^\\d]+/g, ''), 10);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvY2xhc3Nlcy9DTWFya2V0U2VhcmNoUmVzdWx0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQixtQkFBTyxDQUFDLGlFQUFhO0FBQzFDLGNBQWMsbUJBQU8sQ0FBQyxzREFBUzs7QUFFL0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NzMi1za2luLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvY2xhc3Nlcy9DTWFya2V0U2VhcmNoUmVzdWx0LmpzP2FmMmEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFN0ZWFtQ29tbXVuaXR5ID0gcmVxdWlyZSgnLi4vaW5kZXguanMnKTtcbnZhciBDaGVlcmlvID0gcmVxdWlyZSgnY2hlZXJpbycpO1xuXG5TdGVhbUNvbW11bml0eS5wcm90b3R5cGUubWFya2V0U2VhcmNoID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcblx0dmFyIHFzID0ge307XG5cblx0aWYodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG5cdFx0cXMucXVlcnkgPSBvcHRpb25zO1xuXHR9IGVsc2Uge1xuXHRcdHFzLnF1ZXJ5ID0gb3B0aW9ucy5xdWVyeSB8fCAnJztcblx0XHRxcy5hcHBpZCA9IG9wdGlvbnMuYXBwaWQ7XG5cdFx0cXMuc2VhcmNoX2Rlc2NyaXB0aW9ucyA9IG9wdGlvbnMuc2VhcmNoRGVzY3JpcHRpb25zID8gMSA6IDA7XG5cblx0XHRpZihxcy5hcHBpZCkge1xuXHRcdFx0Zm9yKHZhciBpIGluIG9wdGlvbnMpIHtcblx0XHRcdFx0aWYoWydxdWVyeScsICdhcHBpZCcsICdzZWFyY2hEZXNjcmlwdGlvbnMnXS5pbmRleE9mKGkpICE9IC0xKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUaGlzIGlzIGEgdGFnXG5cdFx0XHRcdHFzWydjYXRlZ29yeV8nICsgcXMuYXBwaWQgKyAnXycgKyBpICsgJ1tdJ10gPSAndGFnXycgKyBvcHRpb25zW2ldO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHFzLnN0YXJ0ID0gMDtcblx0cXMuY291bnQgPSAxMDA7XG5cdHFzLnNvcnRfY29sdW1uID0gJ3ByaWNlJztcblx0cXMuc29ydF9kaXIgPSAnYXNjJztcblxuXHR2YXIgc2VsZiA9IHRoaXM7XG5cdHZhciByZXN1bHRzID0gW107XG5cdHBlcmZvcm1TZWFyY2goKTtcblxuXHRmdW5jdGlvbiBwZXJmb3JtU2VhcmNoKCkge1xuXHRcdHNlbGYuaHR0cFJlcXVlc3Qoe1xuXHRcdFx0XCJ1cmlcIjogXCJodHRwczovL3N0ZWFtY29tbXVuaXR5LmNvbS9tYXJrZXQvc2VhcmNoL3JlbmRlci9cIixcblx0XHRcdFwicXNcIjogcXMsXG5cdFx0XHRcImhlYWRlcnNcIjoge1xuXHRcdFx0XHRcInJlZmVyZXJcIjogXCJodHRwczovL3N0ZWFtY29tbXVuaXR5LmNvbS9tYXJrZXQvc2VhcmNoXCJcblx0XHRcdH0sXG5cdFx0XHRcImpzb25cIjogdHJ1ZVxuXHRcdH0sIGZ1bmN0aW9uKGVyciwgcmVzcG9uc2UsIGJvZHkpIHtcblx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0Y2FsbGJhY2soZXJyKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighYm9keS5zdWNjZXNzKSB7XG5cdFx0XHRcdGNhbGxiYWNrKG5ldyBFcnJvcihcIlN1Y2Nlc3MgaXMgbm90IHRydWVcIikpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFib2R5LnJlc3VsdHNfaHRtbCkge1xuXHRcdFx0XHRjYWxsYmFjayhuZXcgRXJyb3IoXCJObyByZXN1bHRzX2h0bWwgaW4gcmVzcG9uc2VcIikpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciAkID0gQ2hlZXJpby5sb2FkKGJvZHkucmVzdWx0c19odG1sKTtcblx0XHRcdHZhciAkZXJyb3JNc2cgPSAkKCcubWFya2V0X2xpc3RpbmdfdGFibGVfbWVzc2FnZScpO1xuXHRcdFx0aWYoJGVycm9yTXNnLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Y2FsbGJhY2sobmV3IEVycm9yKCRlcnJvck1zZy50ZXh0KCkpKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcm93cyA9ICQoJy5tYXJrZXRfbGlzdGluZ19yb3dfbGluaycpO1xuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHJvd3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0cmVzdWx0cy5wdXNoKG5ldyBDTWFya2V0U2VhcmNoUmVzdWx0KCQocm93c1tpXSkpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoYm9keS5zdGFydCArIGJvZHkucGFnZXNpemUgPj0gYm9keS50b3RhbF9jb3VudCkge1xuXHRcdFx0XHRjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHFzLnN0YXJ0ICs9IGJvZHkucGFnZXNpemU7XG5cdFx0XHRcdHBlcmZvcm1TZWFyY2goKTtcblx0XHRcdH1cblx0XHR9LCBcInN0ZWFtY29tbXVuaXR5XCIpO1xuXHR9XG59O1xuXG5mdW5jdGlvbiBDTWFya2V0U2VhcmNoUmVzdWx0KHJvdykge1xuXHR2YXIgbWF0Y2ggPSByb3cuYXR0cignaHJlZicpLm1hdGNoKC9cXC9tYXJrZXRcXC9saXN0aW5nc1xcLyhcXGQrKVxcLyhbXlxcP1xcL10rKS8pO1xuXG5cdHRoaXMuYXBwaWQgPSBwYXJzZUludChtYXRjaFsxXSwgMTApO1xuXHR0aGlzLm1hcmtldF9oYXNoX25hbWUgPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMl0pO1xuXHR0aGlzLmltYWdlID0gKChyb3cuZmluZCgnLm1hcmtldF9saXN0aW5nX2l0ZW1faW1nJykuYXR0cignc3JjJykgfHwgXCJcIikubWF0Y2goL15odHRwcz86XFwvXFwvW15cXC9dK1xcL2Vjb25vbXlcXC9pbWFnZVxcL1teXFwvXStcXC8vKSB8fCBbXSlbMF07XG5cdHRoaXMucHJpY2UgPSBwYXJzZUludChyb3cuZmluZCgnLm1hcmtldF9saXN0aW5nX3RoZWlyX3ByaWNlIC5tYXJrZXRfdGFibGVfdmFsdWUgc3Bhbi5ub3JtYWxfcHJpY2UnKS50ZXh0KCkucmVwbGFjZSgvW15cXGRdKy9nLCAnJyksIDEwKTtcblx0dGhpcy5xdWFudGl0eSA9IHBhcnNlSW50KHJvdy5maW5kKCcubWFya2V0X2xpc3RpbmdfbnVtX2xpc3RpbmdzX3F0eScpLnRleHQoKS5yZXBsYWNlKC9bXlxcZF0rL2csICcnKSwgMTApO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/classes/CMarketSearchResult.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/classes/CSteamGroup.js":
/*!************************************************************!*\
  !*** ./node_modules/steamcommunity/classes/CSteamGroup.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\nvar Helpers = __webpack_require__(/*! ../components/helpers.js */ \"(rsc)/./node_modules/steamcommunity/components/helpers.js\");\nvar SteamID = __webpack_require__(/*! steamid */ \"(rsc)/./node_modules/steamid/index.js\");\nvar xml2js = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\n\nSteamCommunity.prototype.getSteamGroup = function(id, callback) {\n\tif(typeof id !== 'string' && !Helpers.isSteamID(id)) {\n\t\tthrow new Error(\"id parameter should be a group URL string or a SteamID object\");\n\t}\n\n\tif(typeof id === 'object' && (id.universe != SteamID.Universe.PUBLIC || id.type != SteamID.Type.CLAN)) {\n\t\tthrow new Error(\"SteamID must stand for a clan account in the public universe\");\n\t}\n\n\tvar self = this;\n\tthis.httpRequest(\"https://steamcommunity.com/\" + (typeof id === 'string' ? \"groups/\" + id : \"gid/\" + id.toString()) + \"/memberslistxml/?xml=1\", function(err, response, body) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\txml2js.parseString(body, function(err, result) {\n\t\t\tif(err) {\n\t\t\t\tcallback(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcallback(null, new CSteamGroup(self, result.memberList));\n\t\t});\n\t}, \"steamcommunity\");\n};\n\nfunction CSteamGroup(community, groupData) {\n\tthis._community = community;\n\n\tthis.steamID = new SteamID(groupData.groupID64[0]);\n\tthis.name = groupData.groupDetails[0].groupName[0];\n\tthis.url = groupData.groupDetails[0].groupURL[0];\n\tthis.headline = groupData.groupDetails[0].headline[0];\n\tthis.summary = groupData.groupDetails[0].summary[0];\n\tthis.avatarHash = groupData.groupDetails[0].avatarIcon[0].match(/([0-9a-f]+)\\.jpg$/)[1];\n\tthis.members = parseInt(groupData.groupDetails[0].memberCount[0], 10);\n\tthis.membersInChat = parseInt(groupData.groupDetails[0].membersInChat[0], 10);\n\tthis.membersInGame = parseInt(groupData.groupDetails[0].membersInGame[0], 10);\n\tthis.membersOnline = parseInt(groupData.groupDetails[0].membersOnline[0], 10);\n}\n\nCSteamGroup.prototype.getAvatarURL = function(size, protocol) {\n\tsize = size || '';\n\tprotocol = protocol || 'http://';\n\n\tvar url = protocol + \"steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/\" + this.avatarHash.substring(0, 2) + \"/\" + this.avatarHash;\n\tif(size == 'full' || size == 'medium') {\n\t\treturn url + \"_\" + size + \".jpg\";\n\t} else {\n\t\treturn url + \".jpg\";\n\t}\n};\n\nCSteamGroup.prototype.getMembers = function(addresses, callback) {\n\tif(typeof addresses === 'function') {\n\t\tcallback = addresses;\n\t\taddresses = null;\n\t}\n\n\tthis._community.getGroupMembers(this.steamID, callback, null, null, addresses, 0);\n};\n\nCSteamGroup.prototype.join = function(callback) {\n\tthis._community.joinGroup(this.steamID, callback);\n};\n\nCSteamGroup.prototype.leave = function(callback) {\n\tthis._community.leaveGroup(this.steamID, callback);\n};\n\nCSteamGroup.prototype.getAllAnnouncements = function(time, callback) {\n\tthis._community.getAllGroupAnnouncements(this.steamID, time, callback);\n};\n\nCSteamGroup.prototype.postAnnouncement = function(headline, content, hidden, callback) {\n\tthis._community.postGroupAnnouncement(this.steamID, headline, content, hidden, callback);\n};\n\nCSteamGroup.prototype.editAnnouncement = function(annoucementID, headline, content, callback) {\n\tthis._community.editGroupAnnouncement(this.steamID, annoucementID, headline, content, callback)\n};\n\nCSteamGroup.prototype.deleteAnnouncement = function(annoucementID, callback) {\n\tthis._community.deleteGroupAnnouncement(this.steamID, annoucementID, callback)\n};\n\nCSteamGroup.prototype.scheduleEvent = function(name, type, description, time, server, callback) {\n\tthis._community.scheduleGroupEvent(this.steamID, name, type, description, time, server, callback);\n};\n\nCSteamGroup.prototype.editEvent = function(id, name, type, description, time, server, callback) {\n\tthis._community.editGroupEvent(this.steamID, id, name, type, description, time, server, callback);\n};\n\nCSteamGroup.prototype.deleteEvent = function (id, callback) {\n\tthis._community.deleteGroupEvent(this.steamID, id, callback);\n};\n\nCSteamGroup.prototype.setPlayerOfTheWeek = function(steamID, callback) {\n\tthis._community.setGroupPlayerOfTheWeek(this.steamID, steamID, callback);\n};\n\nCSteamGroup.prototype.kick = function(steamID, callback) {\n\tthis._community.kickGroupMember(this.steamID, steamID, callback);\n};\n\nCSteamGroup.prototype.getHistory = function(page, callback) {\n\tthis._community.getGroupHistory(this.steamID, page, callback);\n};\n\n\nCSteamGroup.prototype.getAllComments = function(from, count, callback) {\n\tthis._community.getAllGroupComments(this.steamID, from, count, callback);\n};\n\nCSteamGroup.prototype.deleteComment = function(cid, callback) {\n\tthis._community.deleteGroupComment(this.steamID, cid, callback);\n};\n\nCSteamGroup.prototype.comment = function(message, callback) {\n\tthis._community.postGroupComment(this.steamID, message, callback);\n};\n\n/**\n * Get requests to join this restricted group.\n * @param {function} callback - First argument is null/Error, second is array of SteamID objects\n */\nCSteamGroup.prototype.getJoinRequests = function(callback) {\n\tthis._community.getGroupJoinRequests(this.steamID, callback);\n};\n\n/**\n * Respond to one or more join requests to this restricted group.\n * @param {SteamID|string|SteamID[]|string[]} steamIDs - The SteamIDs of the users you want to approve or deny membership for (or a single value)\n * @param {boolean} approve - True to put them in the group, false to deny their membership\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nCSteamGroup.prototype.respondToJoinRequests = function(steamIDs, approve, callback) {\n\tthis._community.respondToGroupJoinRequests(this.steamID, steamIDs, approve, callback);\n};\n\n/**\n * Respond to *ALL* pending group-join requests for this group.\n * @param {boolean} approve - True to allow everyone who requested into the group, false to not\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nCSteamGroup.prototype.respondToAllJoinRequests = function(approve, callback) {\n\tthis._community.respondToAllGroupJoinRequests(this.steamID, approve, callback);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvY2xhc3Nlcy9DU3RlYW1Hcm91cC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxQkFBcUIsbUJBQU8sQ0FBQyxpRUFBYTtBQUMxQyxjQUFjLG1CQUFPLENBQUMsMkZBQTBCO0FBQ2hELGNBQWMsbUJBQU8sQ0FBQyxzREFBUztBQUMvQixhQUFhLG1CQUFPLENBQUMseURBQVE7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxtQ0FBbUM7QUFDOUMsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NzMi1za2luLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvY2xhc3Nlcy9DU3RlYW1Hcm91cC5qcz8zNGZkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBTdGVhbUNvbW11bml0eSA9IHJlcXVpcmUoJy4uL2luZGV4LmpzJyk7XG52YXIgSGVscGVycyA9IHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvaGVscGVycy5qcycpO1xudmFyIFN0ZWFtSUQgPSByZXF1aXJlKCdzdGVhbWlkJyk7XG52YXIgeG1sMmpzID0gcmVxdWlyZSgneG1sMmpzJyk7XG5cblN0ZWFtQ29tbXVuaXR5LnByb3RvdHlwZS5nZXRTdGVhbUdyb3VwID0gZnVuY3Rpb24oaWQsIGNhbGxiYWNrKSB7XG5cdGlmKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycgJiYgIUhlbHBlcnMuaXNTdGVhbUlEKGlkKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImlkIHBhcmFtZXRlciBzaG91bGQgYmUgYSBncm91cCBVUkwgc3RyaW5nIG9yIGEgU3RlYW1JRCBvYmplY3RcIik7XG5cdH1cblxuXHRpZih0eXBlb2YgaWQgPT09ICdvYmplY3QnICYmIChpZC51bml2ZXJzZSAhPSBTdGVhbUlELlVuaXZlcnNlLlBVQkxJQyB8fCBpZC50eXBlICE9IFN0ZWFtSUQuVHlwZS5DTEFOKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIlN0ZWFtSUQgbXVzdCBzdGFuZCBmb3IgYSBjbGFuIGFjY291bnQgaW4gdGhlIHB1YmxpYyB1bml2ZXJzZVwiKTtcblx0fVxuXG5cdHZhciBzZWxmID0gdGhpcztcblx0dGhpcy5odHRwUmVxdWVzdChcImh0dHBzOi8vc3RlYW1jb21tdW5pdHkuY29tL1wiICsgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycgPyBcImdyb3Vwcy9cIiArIGlkIDogXCJnaWQvXCIgKyBpZC50b1N0cmluZygpKSArIFwiL21lbWJlcnNsaXN0eG1sLz94bWw9MVwiLCBmdW5jdGlvbihlcnIsIHJlc3BvbnNlLCBib2R5KSB7XG5cdFx0aWYgKGVycikge1xuXHRcdFx0Y2FsbGJhY2soZXJyKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR4bWwyanMucGFyc2VTdHJpbmcoYm9keSwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcblx0XHRcdGlmKGVycikge1xuXHRcdFx0XHRjYWxsYmFjayhlcnIpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNhbGxiYWNrKG51bGwsIG5ldyBDU3RlYW1Hcm91cChzZWxmLCByZXN1bHQubWVtYmVyTGlzdCkpO1xuXHRcdH0pO1xuXHR9LCBcInN0ZWFtY29tbXVuaXR5XCIpO1xufTtcblxuZnVuY3Rpb24gQ1N0ZWFtR3JvdXAoY29tbXVuaXR5LCBncm91cERhdGEpIHtcblx0dGhpcy5fY29tbXVuaXR5ID0gY29tbXVuaXR5O1xuXG5cdHRoaXMuc3RlYW1JRCA9IG5ldyBTdGVhbUlEKGdyb3VwRGF0YS5ncm91cElENjRbMF0pO1xuXHR0aGlzLm5hbWUgPSBncm91cERhdGEuZ3JvdXBEZXRhaWxzWzBdLmdyb3VwTmFtZVswXTtcblx0dGhpcy51cmwgPSBncm91cERhdGEuZ3JvdXBEZXRhaWxzWzBdLmdyb3VwVVJMWzBdO1xuXHR0aGlzLmhlYWRsaW5lID0gZ3JvdXBEYXRhLmdyb3VwRGV0YWlsc1swXS5oZWFkbGluZVswXTtcblx0dGhpcy5zdW1tYXJ5ID0gZ3JvdXBEYXRhLmdyb3VwRGV0YWlsc1swXS5zdW1tYXJ5WzBdO1xuXHR0aGlzLmF2YXRhckhhc2ggPSBncm91cERhdGEuZ3JvdXBEZXRhaWxzWzBdLmF2YXRhckljb25bMF0ubWF0Y2goLyhbMC05YS1mXSspXFwuanBnJC8pWzFdO1xuXHR0aGlzLm1lbWJlcnMgPSBwYXJzZUludChncm91cERhdGEuZ3JvdXBEZXRhaWxzWzBdLm1lbWJlckNvdW50WzBdLCAxMCk7XG5cdHRoaXMubWVtYmVyc0luQ2hhdCA9IHBhcnNlSW50KGdyb3VwRGF0YS5ncm91cERldGFpbHNbMF0ubWVtYmVyc0luQ2hhdFswXSwgMTApO1xuXHR0aGlzLm1lbWJlcnNJbkdhbWUgPSBwYXJzZUludChncm91cERhdGEuZ3JvdXBEZXRhaWxzWzBdLm1lbWJlcnNJbkdhbWVbMF0sIDEwKTtcblx0dGhpcy5tZW1iZXJzT25saW5lID0gcGFyc2VJbnQoZ3JvdXBEYXRhLmdyb3VwRGV0YWlsc1swXS5tZW1iZXJzT25saW5lWzBdLCAxMCk7XG59XG5cbkNTdGVhbUdyb3VwLnByb3RvdHlwZS5nZXRBdmF0YXJVUkwgPSBmdW5jdGlvbihzaXplLCBwcm90b2NvbCkge1xuXHRzaXplID0gc2l6ZSB8fCAnJztcblx0cHJvdG9jb2wgPSBwcm90b2NvbCB8fCAnaHR0cDovLyc7XG5cblx0dmFyIHVybCA9IHByb3RvY29sICsgXCJzdGVhbWNkbi1hLmFrYW1haWhkLm5ldC9zdGVhbWNvbW11bml0eS9wdWJsaWMvaW1hZ2VzL2F2YXRhcnMvXCIgKyB0aGlzLmF2YXRhckhhc2guc3Vic3RyaW5nKDAsIDIpICsgXCIvXCIgKyB0aGlzLmF2YXRhckhhc2g7XG5cdGlmKHNpemUgPT0gJ2Z1bGwnIHx8IHNpemUgPT0gJ21lZGl1bScpIHtcblx0XHRyZXR1cm4gdXJsICsgXCJfXCIgKyBzaXplICsgXCIuanBnXCI7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHVybCArIFwiLmpwZ1wiO1xuXHR9XG59O1xuXG5DU3RlYW1Hcm91cC5wcm90b3R5cGUuZ2V0TWVtYmVycyA9IGZ1bmN0aW9uKGFkZHJlc3NlcywgY2FsbGJhY2spIHtcblx0aWYodHlwZW9mIGFkZHJlc3NlcyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGNhbGxiYWNrID0gYWRkcmVzc2VzO1xuXHRcdGFkZHJlc3NlcyA9IG51bGw7XG5cdH1cblxuXHR0aGlzLl9jb21tdW5pdHkuZ2V0R3JvdXBNZW1iZXJzKHRoaXMuc3RlYW1JRCwgY2FsbGJhY2ssIG51bGwsIG51bGwsIGFkZHJlc3NlcywgMCk7XG59O1xuXG5DU3RlYW1Hcm91cC5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdHRoaXMuX2NvbW11bml0eS5qb2luR3JvdXAodGhpcy5zdGVhbUlELCBjYWxsYmFjayk7XG59O1xuXG5DU3RlYW1Hcm91cC5wcm90b3R5cGUubGVhdmUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXHR0aGlzLl9jb21tdW5pdHkubGVhdmVHcm91cCh0aGlzLnN0ZWFtSUQsIGNhbGxiYWNrKTtcbn07XG5cbkNTdGVhbUdyb3VwLnByb3RvdHlwZS5nZXRBbGxBbm5vdW5jZW1lbnRzID0gZnVuY3Rpb24odGltZSwgY2FsbGJhY2spIHtcblx0dGhpcy5fY29tbXVuaXR5LmdldEFsbEdyb3VwQW5ub3VuY2VtZW50cyh0aGlzLnN0ZWFtSUQsIHRpbWUsIGNhbGxiYWNrKTtcbn07XG5cbkNTdGVhbUdyb3VwLnByb3RvdHlwZS5wb3N0QW5ub3VuY2VtZW50ID0gZnVuY3Rpb24oaGVhZGxpbmUsIGNvbnRlbnQsIGhpZGRlbiwgY2FsbGJhY2spIHtcblx0dGhpcy5fY29tbXVuaXR5LnBvc3RHcm91cEFubm91bmNlbWVudCh0aGlzLnN0ZWFtSUQsIGhlYWRsaW5lLCBjb250ZW50LCBoaWRkZW4sIGNhbGxiYWNrKTtcbn07XG5cbkNTdGVhbUdyb3VwLnByb3RvdHlwZS5lZGl0QW5ub3VuY2VtZW50ID0gZnVuY3Rpb24oYW5ub3VjZW1lbnRJRCwgaGVhZGxpbmUsIGNvbnRlbnQsIGNhbGxiYWNrKSB7XG5cdHRoaXMuX2NvbW11bml0eS5lZGl0R3JvdXBBbm5vdW5jZW1lbnQodGhpcy5zdGVhbUlELCBhbm5vdWNlbWVudElELCBoZWFkbGluZSwgY29udGVudCwgY2FsbGJhY2spXG59O1xuXG5DU3RlYW1Hcm91cC5wcm90b3R5cGUuZGVsZXRlQW5ub3VuY2VtZW50ID0gZnVuY3Rpb24oYW5ub3VjZW1lbnRJRCwgY2FsbGJhY2spIHtcblx0dGhpcy5fY29tbXVuaXR5LmRlbGV0ZUdyb3VwQW5ub3VuY2VtZW50KHRoaXMuc3RlYW1JRCwgYW5ub3VjZW1lbnRJRCwgY2FsbGJhY2spXG59O1xuXG5DU3RlYW1Hcm91cC5wcm90b3R5cGUuc2NoZWR1bGVFdmVudCA9IGZ1bmN0aW9uKG5hbWUsIHR5cGUsIGRlc2NyaXB0aW9uLCB0aW1lLCBzZXJ2ZXIsIGNhbGxiYWNrKSB7XG5cdHRoaXMuX2NvbW11bml0eS5zY2hlZHVsZUdyb3VwRXZlbnQodGhpcy5zdGVhbUlELCBuYW1lLCB0eXBlLCBkZXNjcmlwdGlvbiwgdGltZSwgc2VydmVyLCBjYWxsYmFjayk7XG59O1xuXG5DU3RlYW1Hcm91cC5wcm90b3R5cGUuZWRpdEV2ZW50ID0gZnVuY3Rpb24oaWQsIG5hbWUsIHR5cGUsIGRlc2NyaXB0aW9uLCB0aW1lLCBzZXJ2ZXIsIGNhbGxiYWNrKSB7XG5cdHRoaXMuX2NvbW11bml0eS5lZGl0R3JvdXBFdmVudCh0aGlzLnN0ZWFtSUQsIGlkLCBuYW1lLCB0eXBlLCBkZXNjcmlwdGlvbiwgdGltZSwgc2VydmVyLCBjYWxsYmFjayk7XG59O1xuXG5DU3RlYW1Hcm91cC5wcm90b3R5cGUuZGVsZXRlRXZlbnQgPSBmdW5jdGlvbiAoaWQsIGNhbGxiYWNrKSB7XG5cdHRoaXMuX2NvbW11bml0eS5kZWxldGVHcm91cEV2ZW50KHRoaXMuc3RlYW1JRCwgaWQsIGNhbGxiYWNrKTtcbn07XG5cbkNTdGVhbUdyb3VwLnByb3RvdHlwZS5zZXRQbGF5ZXJPZlRoZVdlZWsgPSBmdW5jdGlvbihzdGVhbUlELCBjYWxsYmFjaykge1xuXHR0aGlzLl9jb21tdW5pdHkuc2V0R3JvdXBQbGF5ZXJPZlRoZVdlZWsodGhpcy5zdGVhbUlELCBzdGVhbUlELCBjYWxsYmFjayk7XG59O1xuXG5DU3RlYW1Hcm91cC5wcm90b3R5cGUua2ljayA9IGZ1bmN0aW9uKHN0ZWFtSUQsIGNhbGxiYWNrKSB7XG5cdHRoaXMuX2NvbW11bml0eS5raWNrR3JvdXBNZW1iZXIodGhpcy5zdGVhbUlELCBzdGVhbUlELCBjYWxsYmFjayk7XG59O1xuXG5DU3RlYW1Hcm91cC5wcm90b3R5cGUuZ2V0SGlzdG9yeSA9IGZ1bmN0aW9uKHBhZ2UsIGNhbGxiYWNrKSB7XG5cdHRoaXMuX2NvbW11bml0eS5nZXRHcm91cEhpc3RvcnkodGhpcy5zdGVhbUlELCBwYWdlLCBjYWxsYmFjayk7XG59O1xuXG5cbkNTdGVhbUdyb3VwLnByb3RvdHlwZS5nZXRBbGxDb21tZW50cyA9IGZ1bmN0aW9uKGZyb20sIGNvdW50LCBjYWxsYmFjaykge1xuXHR0aGlzLl9jb21tdW5pdHkuZ2V0QWxsR3JvdXBDb21tZW50cyh0aGlzLnN0ZWFtSUQsIGZyb20sIGNvdW50LCBjYWxsYmFjayk7XG59O1xuXG5DU3RlYW1Hcm91cC5wcm90b3R5cGUuZGVsZXRlQ29tbWVudCA9IGZ1bmN0aW9uKGNpZCwgY2FsbGJhY2spIHtcblx0dGhpcy5fY29tbXVuaXR5LmRlbGV0ZUdyb3VwQ29tbWVudCh0aGlzLnN0ZWFtSUQsIGNpZCwgY2FsbGJhY2spO1xufTtcblxuQ1N0ZWFtR3JvdXAucHJvdG90eXBlLmNvbW1lbnQgPSBmdW5jdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuXHR0aGlzLl9jb21tdW5pdHkucG9zdEdyb3VwQ29tbWVudCh0aGlzLnN0ZWFtSUQsIG1lc3NhZ2UsIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogR2V0IHJlcXVlc3RzIHRvIGpvaW4gdGhpcyByZXN0cmljdGVkIGdyb3VwLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBGaXJzdCBhcmd1bWVudCBpcyBudWxsL0Vycm9yLCBzZWNvbmQgaXMgYXJyYXkgb2YgU3RlYW1JRCBvYmplY3RzXG4gKi9cbkNTdGVhbUdyb3VwLnByb3RvdHlwZS5nZXRKb2luUmVxdWVzdHMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXHR0aGlzLl9jb21tdW5pdHkuZ2V0R3JvdXBKb2luUmVxdWVzdHModGhpcy5zdGVhbUlELCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFJlc3BvbmQgdG8gb25lIG9yIG1vcmUgam9pbiByZXF1ZXN0cyB0byB0aGlzIHJlc3RyaWN0ZWQgZ3JvdXAuXG4gKiBAcGFyYW0ge1N0ZWFtSUR8c3RyaW5nfFN0ZWFtSURbXXxzdHJpbmdbXX0gc3RlYW1JRHMgLSBUaGUgU3RlYW1JRHMgb2YgdGhlIHVzZXJzIHlvdSB3YW50IHRvIGFwcHJvdmUgb3IgZGVueSBtZW1iZXJzaGlwIGZvciAob3IgYSBzaW5nbGUgdmFsdWUpXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFwcHJvdmUgLSBUcnVlIHRvIHB1dCB0aGVtIGluIHRoZSBncm91cCwgZmFsc2UgdG8gZGVueSB0aGVpciBtZW1iZXJzaGlwXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIFRha2VzIG9ubHkgYW4gRXJyb3Igb2JqZWN0L251bGwgYXMgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKi9cbkNTdGVhbUdyb3VwLnByb3RvdHlwZS5yZXNwb25kVG9Kb2luUmVxdWVzdHMgPSBmdW5jdGlvbihzdGVhbUlEcywgYXBwcm92ZSwgY2FsbGJhY2spIHtcblx0dGhpcy5fY29tbXVuaXR5LnJlc3BvbmRUb0dyb3VwSm9pblJlcXVlc3RzKHRoaXMuc3RlYW1JRCwgc3RlYW1JRHMsIGFwcHJvdmUsIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogUmVzcG9uZCB0byAqQUxMKiBwZW5kaW5nIGdyb3VwLWpvaW4gcmVxdWVzdHMgZm9yIHRoaXMgZ3JvdXAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFwcHJvdmUgLSBUcnVlIHRvIGFsbG93IGV2ZXJ5b25lIHdobyByZXF1ZXN0ZWQgaW50byB0aGUgZ3JvdXAsIGZhbHNlIHRvIG5vdFxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBUYWtlcyBvbmx5IGFuIEVycm9yIG9iamVjdC9udWxsIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxuICovXG5DU3RlYW1Hcm91cC5wcm90b3R5cGUucmVzcG9uZFRvQWxsSm9pblJlcXVlc3RzID0gZnVuY3Rpb24oYXBwcm92ZSwgY2FsbGJhY2spIHtcblx0dGhpcy5fY29tbXVuaXR5LnJlc3BvbmRUb0FsbEdyb3VwSm9pblJlcXVlc3RzKHRoaXMuc3RlYW1JRCwgYXBwcm92ZSwgY2FsbGJhY2spO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/classes/CSteamGroup.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/classes/CSteamSharedFile.js":
/*!*****************************************************************!*\
  !*** ./node_modules/steamcommunity/classes/CSteamSharedFile.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const Cheerio = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/index.js\");\nconst SteamID = __webpack_require__(/*! steamid */ \"(rsc)/./node_modules/steamid/index.js\");\n\nconst SteamCommunity  = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\nconst Helpers = __webpack_require__(/*! ../components/helpers.js */ \"(rsc)/./node_modules/steamcommunity/components/helpers.js\");\n\nconst ESharedFileType = __webpack_require__(/*! ../resources/ESharedFileType.js */ \"(rsc)/./node_modules/steamcommunity/resources/ESharedFileType.js\");\n\n\n/**\n * Scrape a sharedfile's DOM to get all available information\n * @param {string} sharedFileId - ID of the sharedfile\n * @param {function} callback - First argument is null/Error, second is object containing all available information\n */\nSteamCommunity.prototype.getSteamSharedFile = function(sharedFileId, callback) {\n\t// Construct object holding all the data we can scrape\n\tlet sharedfile = {\n\t\tid: sharedFileId,\n\t\ttype: null,\n\t\tappID: null,\n\t\towner: null,\n\t\tfileSize: null,\n\t\tpostDate: null,\n\t\tresolution: null,\n\t\tuniqueVisitorsCount: null,\n\t\tfavoritesCount: null,\n\t\tupvoteCount: null,\n\t\tguideNumRatings: null,\n\t\tisUpvoted: null,\n\t\tisDownvoted: null\n\t};\n\n\t// Get DOM of sharedfile\n\tthis.httpRequestGet(`https://steamcommunity.com/sharedfiles/filedetails/?id=${sharedFileId}`, (err, res, body) => {\n\t\ttry {\n\n\t\t\t/* --------------------- Preprocess output --------------------- */\n\n\t\t\t// Load output into cheerio to make parsing easier\n\t\t\tlet $ = Cheerio.load(body);\n\n\t\t\t// Dynamically map detailsStatsContainerLeft to detailsStatsContainerRight in an object to make readout easier. It holds size, post date and resolution.\n\t\t\tlet detailsStatsObj = {};\n\t\t\tlet detailsLeft     = $(\".detailsStatsContainerLeft\").children();\n\t\t\tlet detailsRight    = $(\".detailsStatsContainerRight\").children();\n\n\t\t\tObject.keys(detailsLeft).forEach((e) => { // Dynamically get all details. Don't hardcore so that this also works for guides.\n\t\t\t\tif (isNaN(e)) {\n\t\t\t\t\treturn; // Ignore invalid entries\n\t\t\t\t}\n\n\t\t\t\tdetailsStatsObj[detailsLeft[e].children[0].data.trim()] = detailsRight[e].children[0].data;\n\t\t\t});\n\n\t\t\t// Dynamically map stats_table descriptions to values. This holds Unique Visitors and Current Favorites\n\t\t\tlet statsTableObj = {};\n\t\t\tlet statsTable    = $(\".stats_table\").children();\n\n\t\t\tObject.keys(statsTable).forEach((e) => {\n\t\t\t\tif (isNaN(e)) {\n\t\t\t\t\treturn; // Ignore invalid entries\n\t\t\t\t}\n\n\t\t\t\t// Value description is at index 3, value data at index 1\n\t\t\t\tstatsTableObj[statsTable[e].children[3].children[0].data] = statsTable[e].children[1].children[0].data.replace(/,/g, \"\"); // Remove commas from 1k+ values\n\t\t\t});\n\n\n\t\t\t/* --------------------- Find and map values --------------------- */\n\n\t\t\t// Find appID in share button onclick event\n\t\t\tsharedfile.appID = Number($(\"#ShareItemBtn\").attr()[\"onclick\"].replace(`ShowSharePublishedFilePopup( '${sharedFileId}', '`, \"\").replace(\"' );\", \"\"));\n\n\n\t\t\t// Find fileSize if not guide\n\t\t\tsharedfile.fileSize = detailsStatsObj[\"File Size\"] || null; // TODO: Convert to bytes? It seems like to always be MB but no guarantee\n\n\n\t\t\t// Find postDate and convert to timestamp\n\t\t\tlet posted = detailsStatsObj[\"Posted\"].trim();\n\n\t\t\tsharedfile.postDate = Helpers.decodeSteamTime(posted);\n\n\n\t\t\t// Find resolution if artwork or screenshot\n\t\t\tsharedfile.resolution = detailsStatsObj[\"Size\"] || null;\n\n\n\t\t\t// Find uniqueVisitorsCount. We can't use ' || null' here as Number(\"0\") casts to false\n\t\t\tif (statsTableObj[\"Unique Visitors\"]) {\n\t\t\t\tsharedfile.uniqueVisitorsCount = Number(statsTableObj[\"Unique Visitors\"]);\n\t\t\t}\n\n\n\t\t\t// Find favoritesCount. We can't use ' || null' here as Number(\"0\") casts to false\n\t\t\tif (statsTableObj[\"Current Favorites\"]) {\n\t\t\t\tsharedfile.favoritesCount = Number(statsTableObj[\"Current Favorites\"]);\n\t\t\t}\n\n\n\t\t\t// Find upvoteCount. We can't use ' || null' here as Number(\"0\") casts to false\n\t\t\tlet upvoteCount = $(\"#VotesUpCountContainer > #VotesUpCount\").text();\n\n\t\t\tif (upvoteCount) {\n\t\t\t\tsharedfile.upvoteCount = Number(upvoteCount);\n\t\t\t}\n\n\n\t\t\t// Find numRatings if this is a guide as they use a different voting system\n\t\t\tlet numRatings = $(\".ratingSection > .numRatings\").text().replace(\" ratings\", \"\");\n\n\t\t\tsharedfile.guideNumRatings = Number(numRatings) || null; // Set to null if not a guide or if the guide does not have enough ratings to show a value\n\n\n\t\t\t// Determine if this account has already voted on this sharedfile\n\t\t\tsharedfile.isUpvoted   = String($(\".workshopItemControlCtn > #VoteUpBtn\")[0].attribs[\"class\"]).includes(\"toggled\");   // Check if upvote btn class contains \"toggled\"\n\t\t\tsharedfile.isDownvoted = String($(\".workshopItemControlCtn > #VoteDownBtn\")[0].attribs[\"class\"]).includes(\"toggled\"); // Check if downvote btn class contains \"toggled\"\n\n\n\t\t\t// Determine type by looking at the second breadcrumb. Find the first separator as it has a unique name and go to the next element which holds our value of interest\n\t\t\tlet breadcrumb = $(\".breadcrumbs > .breadcrumb_separator\").next().get(0).children[0].data || \"\";\n\n\t\t\tif (breadcrumb.includes(\"Screenshot\")) {\n\t\t\t\tsharedfile.type = ESharedFileType.Screenshot;\n\t\t\t}\n\n\t\t\tif (breadcrumb.includes(\"Artwork\")) {\n\t\t\t\tsharedfile.type = ESharedFileType.Artwork;\n\t\t\t}\n\n\t\t\tif (breadcrumb.includes(\"Guide\")) {\n\t\t\t\tsharedfile.type = ESharedFileType.Guide;\n\t\t\t}\n\n\n\t\t\t// Find owner profile link, convert to steamID64 using SteamIdResolver lib and create a SteamID object\n\t\t\tlet ownerHref = $(\".friendBlockLinkOverlay\").attr()[\"href\"];\n\n\t\t\tHelpers.resolveVanityURL(ownerHref, (err, data) => { // This request takes <1 sec\n\t\t\t\tif (err) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsharedfile.owner = new SteamID(data.steamID);\n\n\t\t\t\t// Make callback when ID was resolved as otherwise owner will always be null\n\t\t\t\tcallback(null, new CSteamSharedFile(this, sharedfile));\n\t\t\t});\n\n\t\t} catch (err) {\n\t\t\tcallback(err, null);\n\t\t}\n\t}, \"steamcommunity\");\n};\n\n/**\n * Constructor - Creates a new SharedFile object\n * @class\n * @param {SteamCommunity} community\n * @param {{ id: string, type: ESharedFileType, appID: number, owner: SteamID|null, fileSize: string|null, postDate: number, resolution: string|null, uniqueVisitorsCount: number, favoritesCount: number, upvoteCount: number|null, guideNumRatings: Number|null, isUpvoted: boolean, isDownvoted: boolean }} data\n */\nfunction CSteamSharedFile(community, data) {\n\t/**\n\t * @type {SteamCommunity}\n\t */\n\tthis._community = community;\n\n\t// Clone all the data we received\n\tObject.assign(this, data);\n}\n\n/**\n * Deletes a comment from this sharedfile's comment section\n * @param {String} cid - ID of the comment to delete\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nCSteamSharedFile.prototype.deleteComment = function(cid, callback) {\n\tthis._community.deleteSharedFileComment(this.owner, this.id, cid, callback);\n};\n\n/**\n * Favorites this sharedfile\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nCSteamSharedFile.prototype.favorite = function(callback) {\n\tthis._community.favoriteSharedFile(this.id, this.appID, callback);\n};\n\n/**\n * Posts a comment to this sharedfile\n * @param {String} message - Content of the comment to post\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nCSteamSharedFile.prototype.comment = function(message, callback) {\n\tthis._community.postSharedFileComment(this.owner, this.id, message, callback);\n};\n\n/**\n * Subscribes to this sharedfile's comment section. Note: Checkbox on webpage does not update\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nCSteamSharedFile.prototype.subscribe = function(callback) {\n\tthis._community.subscribeSharedFileComments(this.owner, this.id, callback);\n};\n\n/**\n * Unfavorites this sharedfile\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nCSteamSharedFile.prototype.unfavorite = function(callback) {\n\tthis._community.unfavoriteSharedFile(this.id, this.appID, callback);\n};\n\n/**\n * Unsubscribes from this sharedfile's comment section. Note: Checkbox on webpage does not update\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nCSteamSharedFile.prototype.unsubscribe = function(callback) {\n\tthis._community.unsubscribeSharedFileComments(this.owner, this.id, callback);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/classes/CSteamSharedFile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/classes/CSteamUser.js":
/*!***********************************************************!*\
  !*** ./node_modules/steamcommunity/classes/CSteamUser.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\r\nvar Helpers = __webpack_require__(/*! ../components/helpers.js */ \"(rsc)/./node_modules/steamcommunity/components/helpers.js\");\r\nvar SteamID = __webpack_require__(/*! steamid */ \"(rsc)/./node_modules/steamid/index.js\");\r\nvar xml2js = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\r\n\r\nSteamCommunity.prototype.getSteamUser = function(id, callback) {\r\n\tif(typeof id !== 'string' && !Helpers.isSteamID(id)) {\r\n\t\tthrow new Error(\"id parameter should be a user URL string or a SteamID object\");\r\n\t}\r\n\r\n\tif(typeof id === 'object' && (id.universe != SteamID.Universe.PUBLIC || id.type != SteamID.Type.INDIVIDUAL)) {\r\n\t\tthrow new Error(\"SteamID must stand for an individual account in the public universe\");\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequest(\"https://steamcommunity.com/\" + (typeof id === 'string' ? \"id/\" + id : \"profiles/\" + id.toString()) + \"/?xml=1\", function(err, response, body) {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\txml2js.parseString(body, function(err, result) {\r\n\t\t\tif(err || (!result.response && !result.profile)) {\r\n\t\t\t\tcallback(err || new Error(\"No valid response\"));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(result.response && result.response.error && result.response.error.length) {\r\n\t\t\t\tcallback(new Error(result.response.error[0]));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Try and find custom URL from redirect\r\n\t\t\tvar customurl = null;\r\n\t\t\tif(response.request.redirects && response.request.redirects.length) {\r\n\t\t\t\tvar match = response.request.redirects[0].redirectUri.match(/https?:\\/\\/steamcommunity\\.com\\/id\\/([^/])+\\/\\?xml=1/);\r\n\t\t\t\tif(match) {\r\n\t\t\t\t\tcustomurl = match[1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(!result.profile.steamID64) {\r\n\t\t\t\tcallback(new Error(\"No valid response\"));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tcallback(null, new CSteamUser(self, result.profile, customurl));\r\n\t\t});\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nfunction CSteamUser(community, userData, customurl) {\r\n\tthis._community = community;\r\n\r\n\tthis.steamID = new SteamID(userData.steamID64[0]);\r\n\tthis.name = processItem('steamID');\r\n\tthis.onlineState = processItem('onlineState');\r\n\tthis.stateMessage = processItem('stateMessage');\r\n\tthis.privacyState = processItem('privacyState', 'uncreated');\r\n\tthis.visibilityState = processItem('visibilityState');\r\n\tthis.avatarHash = processItem('avatarIcon', '').match(/([0-9a-f]+)\\.[a-z]+$/);\r\n\tif(this.avatarHash) {\r\n\t\tthis.avatarHash = this.avatarHash[1];\r\n\t}\r\n\r\n\tthis.vacBanned = processItem('vacBanned', false) == 1;\r\n\tthis.tradeBanState = processItem('tradeBanState', 'None');\r\n\tthis.isLimitedAccount = processItem('isLimitedAccount') == 1;\r\n\tthis.customURL = processItem('customURL', customurl);\r\n\r\n\tif(this.visibilityState == 3) {\r\n\t\tlet memberSinceValue = processItem('memberSince', '0').replace(/(\\d{1,2})(st|nd|th)/, \"$1\");\r\n\r\n\t\tif (memberSinceValue.indexOf(',') === -1) {\r\n\t\t\tmemberSinceValue += ', ' + new Date().getFullYear();\r\n\t\t}\r\n\r\n\t\tthis.memberSince = new Date(memberSinceValue);\r\n\t\tthis.location = processItem('location');\r\n\t\tthis.realName = processItem('realname');\r\n\t\tthis.summary = processItem('summary');\r\n\t} else {\r\n\t\tthis.memberSince = null;\r\n\t\tthis.location = null;\r\n\t\tthis.realName = null;\r\n\t\tthis.summary = null;\r\n\t}\r\n\r\n\t// Maybe handle mostPlayedGames?\r\n\r\n\tthis.groups = null;\r\n\tthis.primaryGroup = null;\r\n\r\n\tvar self = this;\r\n\tif(userData.groups && userData.groups[0] && userData.groups[0].group) {\r\n\t\tthis.groups = userData.groups[0].group.map(function(group) {\r\n\t\t\tif(group['$'] && group['$'].isPrimary === \"1\") {\r\n\t\t\t\tself.primaryGroup = new SteamID(group.groupID64[0]);\r\n\t\t\t}\r\n\r\n\t\t\treturn new SteamID(group.groupID64[0]);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction processItem(name, defaultVal) {\r\n\t\tif(!userData[name]) {\r\n\t\t\treturn defaultVal;\r\n\t\t}\r\n\r\n\t\treturn userData[name][0];\r\n\t}\r\n}\r\n\r\nCSteamUser.getAvatarURL = function(hash, size, protocol) {\r\n\tsize = size || '';\r\n\tprotocol = protocol || 'http://';\r\n\r\n\thash = hash || \"72f78b4c8cc1f62323f8a33f6d53e27db57c2252\"; // The default \"?\" avatar\r\n\r\n\tvar url = protocol + \"steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/\" + hash.substring(0, 2) + \"/\" + hash;\r\n\tif(size == 'full' || size == 'medium') {\r\n\t\treturn url + \"_\" + size + \".jpg\";\r\n\t} else {\r\n\t\treturn url + \".jpg\";\r\n\t}\r\n};\r\n\r\nCSteamUser.prototype.getAvatarURL = function(size, protocol) {\r\n\treturn CSteamUser.getAvatarURL(this.avatarHash, size, protocol);\r\n};\r\n\r\nCSteamUser.prototype.addFriend = function(callback) {\r\n\tthis._community.addFriend(this.steamID, callback);\r\n};\r\n\r\nCSteamUser.prototype.acceptFriendRequest = function(callback) {\r\n\tthis._community.acceptFriendRequest(this.steamID, callback);\r\n};\r\n\r\nCSteamUser.prototype.removeFriend = function(callback) {\r\n\tthis._community.removeFriend(this.steamID, callback);\r\n\r\n};\r\n\r\nCSteamUser.prototype.blockCommunication = function(callback) {\r\n\tthis._community.blockCommunication(this.steamID, callback);\r\n};\r\n\r\nCSteamUser.prototype.unblockCommunication = function(callback) {\r\n\tthis._community.unblockCommunication(this.steamID, callback);\r\n};\r\n\r\nCSteamUser.prototype.comment = function(message, callback) {\r\n\tthis._community.postUserComment(this.steamID, message, callback);\r\n};\r\n\r\nCSteamUser.prototype.deleteComment = function(commentID, callback) {\r\n\tthis._community.deleteUserComment(this.steamID, commentID, callback);\r\n};\r\n\r\nCSteamUser.prototype.getComments = function(options, callback) {\r\n\tthis._community.getUserComments(this.steamID, options, callback);\r\n};\r\n\r\nCSteamUser.prototype.inviteToGroup = function(groupID, callback) {\r\n\tthis._community.inviteUserToGroup(this.steamID, groupID, callback);\r\n};\r\n\r\nCSteamUser.prototype.follow = function(callback) {\r\n\tthis._community.followUser(this.steamID, callback);\r\n};\r\n\r\nCSteamUser.prototype.unfollow = function(callback) {\r\n\tthis._community.unfollowUser(this.steamID, callback);\r\n};\r\n\r\nCSteamUser.prototype.getAliases = function(callback) {\r\n\tthis._community.getUserAliases(this.steamID, callback);\r\n};\r\n\r\nCSteamUser.prototype.getInventoryContexts = function(callback) {\r\n\tthis._community.getUserInventoryContexts(this.steamID, callback);\r\n};\r\n\r\n/**\r\n * Get the contents of a user's inventory context.\r\n * @deprecated Use CSteamUser#getInventoryContents instead\r\n * @param {int} appID - The Steam application ID of the game for which you want an inventory\r\n * @param {int} contextID - The ID of the \"context\" within the game you want to retrieve\r\n * @param {boolean} tradableOnly - true to get only tradable items and currencies\r\n * @param callback\r\n */\r\nCSteamUser.prototype.getInventory = function(appID, contextID, tradableOnly, callback) {\r\n\tthis._community.getUserInventory(this.steamID, appID, contextID, tradableOnly, callback);\r\n};\r\n\r\n/**\r\n * Get the contents of a user's inventory context.\r\n * @param {int} appID - The Steam application ID of the game for which you want an inventory\r\n * @param {int} contextID - The ID of the \"context\" within the game you want to retrieve\r\n * @param {boolean} tradableOnly - true to get only tradable items and currencies\r\n * @param {string} [language] - The language of item descriptions to return. Omit for default (which may either be English or your account's chosen language)\r\n * @param callback\r\n */\r\nCSteamUser.prototype.getInventoryContents = function(appID, contextID, tradableOnly, language, callback) {\r\n\tthis._community.getUserInventoryContents(this.steamID, appID, contextID, tradableOnly, language, callback);\r\n};\r\n\r\n/**\r\n * Get the background URL of user's profile.\r\n * @param {function} callback\r\n */\r\nCSteamUser.prototype.getProfileBackground = function(callback) {\r\n\tthis._community.getUserProfileBackground(this.steamID, callback);\r\n};\r\n\r\n/**\r\n * Upload an image to Steam and send it to the target user over chat.\r\n * @param {Buffer} imageContentsBuffer - The image contents, as a Buffer\r\n * @param {{spoiler?: boolean}} [options]\r\n * @param {function} callback\r\n */\r\nCSteamUser.prototype.sendImage = function(imageContentsBuffer, options, callback) {\r\n\tthis._community.sendImageToUser(this.steamID, imageContentsBuffer, options, callback);\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/classes/CSteamUser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/chat.js":
/*!********************************************************!*\
  !*** ./node_modules/steamcommunity/components/chat.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\nvar SteamID = __webpack_require__(/*! steamid */ \"(rsc)/./node_modules/steamid/index.js\");\n\nSteamCommunity.ChatState = __webpack_require__(/*! ../resources/EChatState.js */ \"(rsc)/./node_modules/steamcommunity/resources/EChatState.js\");\nSteamCommunity.PersonaState = __webpack_require__(/*! ../resources/EPersonaState.js */ \"(rsc)/./node_modules/steamcommunity/resources/EPersonaState.js\");\nSteamCommunity.PersonaStateFlag = __webpack_require__(/*! ../resources/EPersonaStateFlag.js */ \"(rsc)/./node_modules/steamcommunity/resources/EPersonaStateFlag.js\");\n\n/**\n * @deprecated No support for new Steam chat. Use steam-user instead.\n * @param {int} interval\n * @param {string} uiMode\n */\nSteamCommunity.prototype.chatLogon = function(interval, uiMode) {\n\tif(this.chatState == SteamCommunity.ChatState.LoggingOn || this.chatState == SteamCommunity.ChatState.LoggedOn) {\n\t\treturn;\n\t}\n\n\tinterval = interval || 500;\n\tuiMode = uiMode || \"web\";\n\n\tthis.emit('debug', 'Requesting chat WebAPI token');\n\tthis.chatState = SteamCommunity.ChatState.LoggingOn;\n\n\tvar self = this;\n\tthis.getWebApiOauthToken(function(err, token) {\n\t\tif(err) {\n\t\t\tvar fatal = err.message.indexOf('not authorized') != -1;\n\n\t\t\tif (!fatal) {\n\t\t\t\tself.chatState = SteamCommunity.ChatState.LogOnFailed;\n\t\t\t\tsetTimeout(self.chatLogon.bind(self), 5000);\n\t\t\t} else {\n\t\t\t\tself.chatState = SteamCommunity.ChatState.Offline;\n\t\t\t}\n\n\t\t\tself.emit('chatLogOnFailed', err, fatal);\n\t\t\tself.emit('debug', \"Cannot get oauth token: \" + err.message);\n\t\t\treturn;\n\t\t}\n\n\t\tself.httpRequestPost({\n\t\t\t\"uri\": \"https://api.steampowered.com/ISteamWebUserPresenceOAuth/Logon/v1\",\n\t\t\t\"form\": {\n\t\t\t\t\"ui_mode\": uiMode,\n\t\t\t\t\"access_token\": token\n\t\t\t},\n\t\t\t\"json\": true\n\t\t}, function(err, response, body) {\n\t\t\tif(err || response.statusCode != 200) {\n\t\t\t\tself.chatState = SteamCommunity.ChatState.LogOnFailed;\n\t\t\t\tself.emit('chatLogOnFailed', err ? err : new Error(\"HTTP error \" + response.statusCode), false);\n\t\t\t\tself.emit('debug', 'Error logging into webchat: ' + (err ? err.message : \"HTTP error \" + response.statusCode));\n\t\t\t\tsetTimeout(self.chatLogon.bind(self), 5000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(body.error != 'OK') {\n\t\t\t\tself.chatState = SteamCommunity.ChatState.LogOnFailed;\n\t\t\t\tself.emit('chatLogOnFailed', new Error(body.error), false);\n\t\t\t\tself.emit('debug', 'Error logging into webchat: ' + body.error);\n\t\t\t\tsetTimeout(self.chatLogon.bind(self), 5000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tself._chat = {\n\t\t\t\t\"umqid\": body.umqid,\n\t\t\t\t\"message\": body.message,\n\t\t\t\t\"accessToken\": token,\n\t\t\t\t\"interval\": interval,\n\t\t\t\t\"uiMode\": uiMode\n\t\t\t};\n\n\t\t\tself.chatFriends = {};\n\n\t\t\tself.chatState = SteamCommunity.ChatState.LoggedOn;\n\t\t\tself.emit('chatLoggedOn');\n\t\t\tself._chatPoll();\n\t\t}, \"steamcommunity\");\n\t});\n};\n\n/**\n * @deprecated No support for new Steam chat. Use steam-user instead.\n * @param {string|SteamID} recipient\n * @param {string} text\n * @param {string} [type]\n * @param {function} [callback]\n */\nSteamCommunity.prototype.chatMessage = function(recipient, text, type, callback) {\n\tif(this.chatState != SteamCommunity.ChatState.LoggedOn) {\n\t\tthrow new Error(\"Chat must be logged on before messages can be sent\");\n\t}\n\n\tif(typeof recipient === 'string') {\n\t\trecipient = new SteamID(recipient);\n\t}\n\n\tif(typeof type === 'function') {\n\t\tcallback = type;\n\t\ttype = 'saytext';\n\t}\n\n\ttype = type || 'saytext';\n\n\tvar self = this;\n\tthis.httpRequestPost({\n\t\t\"uri\": \"https://api.steampowered.com/ISteamWebUserPresenceOAuth/Message/v1\",\n\t\t\"form\": {\n\t\t\t\"access_token\": this._chat.accessToken,\n\t\t\t\"steamid_dst\": recipient.toString(),\n\t\t\t\"text\": text,\n\t\t\t\"type\": type,\n\t\t\t\"umqid\": this._chat.umqid\n\t\t},\n\t\t\"json\": true\n\t}, function(err, response, body) {\n\t\tif(!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif(body.error != 'OK') {\n\t\t\tcallback(new Error(body.error));\n\t\t} else {\n\t\t\tcallback(null);\n\t\t}\n\t}, \"steamcommunity\");\n};\n\n/**\n * @deprecated No support for new Steam chat. Use steam-user instead.\n */\nSteamCommunity.prototype.chatLogoff = function() {\n\tvar self = this;\n\tthis.httpRequestPost({\n\t\t\"uri\": \"https://api.steampowered.com/ISteamWebUserPresenceOAuth/Logoff/v1\",\n\t\t\"form\": {\n\t\t\t\"access_token\": this._chat.accessToken,\n\t\t\t\"umqid\": this._chat.umqid\n\t\t}\n\t}, function(err, response, body) {\n\t\tif(err || response.statusCode != 200) {\n\t\t\tself.emit('debug', 'Error logging off of chat: ' + (err ? err.message : \"HTTP error \" + response.statusCode));\n\t\t\tsetTimeout(self.chatLogoff.bind(self), 1000);\n\t\t} else {\n\t\t\tself.emit('chatLoggedOff');\n\t\t\tclearTimeout(self._chat.timer);\n\t\t\tdelete self._chat;\n\t\t\tdelete self.chatFriends;\n\t\t\tself.chatState = SteamCommunity.ChatState.Offline;\n\t\t}\n\t}, \"steamcommunity\");\n};\n\n/**\n * @private\n */\nSteamCommunity.prototype._chatPoll = function() {\n\tthis.emit('debug', 'Doing chat poll');\n\n\tvar self = this;\n\tthis.httpRequestPost({\n\t\t\"uri\": \"https://api.steampowered.com/ISteamWebUserPresenceOAuth/Poll/v1\",\n\t\t\"form\": {\n\t\t\t\"umqid\": self._chat.umqid,\n\t\t\t\"message\": self._chat.message,\n\t\t\t\"pollid\": 1,\n\t\t\t\"sectimeout\": 20,\n\t\t\t\"secidletime\": 0,\n\t\t\t\"use_accountids\": 1,\n\t\t\t\"access_token\": self._chat.accessToken\n\t\t},\n\t\t\"json\": true\n\t}, function(err, response, body) {\n\t\tif (self.chatState == SteamCommunity.ChatState.Offline) {\n\t\t\treturn;\n\t\t}\n\n\t\tself._chat.timer = setTimeout(self._chatPoll.bind(self), self._chat.interval);\n\n\t\tif(err || response.statusCode != 200) {\n\t\t\tself.emit('debug', 'Error in chat poll: ' + (err ? err.message : \"HTTP error \" + response.statusCode));\n\t\t\tif (err.message == \"Not Logged On\") {\n\t\t\t\tself._relogWebChat();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif(!body || body.error != 'OK') {\n\t\t\tself.emit('debug', 'Error in chat poll: ' + (body && body.error ? body.error : \"Malformed response\"));\n\t\t\tif (body && body.error && body.error == \"Not Logged On\") {\n\t\t\t\tself._relogWebChat();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tself._chat.message = body.messagelast;\n\n\t\t(body.messages || []).forEach(function(message) {\n\t\t\tvar sender = new SteamID();\n\t\t\tsender.universe = SteamID.Universe.PUBLIC;\n\t\t\tsender.type = SteamID.Type.INDIVIDUAL;\n\t\t\tsender.instance = SteamID.Instance.DESKTOP;\n\t\t\tsender.accountid = message.accountid_from;\n\n\t\t\tswitch(message.type) {\n\t\t\t\tcase 'personastate':\n\t\t\t\t\tself._chatUpdatePersona(sender);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'saytext':\n\t\t\t\t\tself.emit('chatMessage', sender, message.text);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'typing':\n\t\t\t\t\tself.emit('chatTyping', sender);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tself.emit('debug', 'Unhandled chat message type: ' + message.type);\n\t\t\t}\n\t\t});\n\t}, \"steamcommunity\");\n};\n\n/**\n * @private\n */\nSteamCommunity.prototype._relogWebChat = function() {\n\tthis.emit('debug', \"Relogging web chat\");\n\tclearTimeout(this._chat.timer);\n\tthis.chatState = SteamCommunity.ChatState.Offline;\n\tthis.chatLogon(this._chat.interval, this._chat.uiMode);\n};\n\n/**\n * @param {SteamID} steamID\n * @private\n */\nSteamCommunity.prototype._chatUpdatePersona = function(steamID) {\n\tif (!this.chatFriends || this.chatState == SteamCommunity.ChatState.Offline) {\n\t\treturn; // we no longer care\n\t}\n\n\tthis.emit('debug', 'Updating persona data for ' + steamID);\n\tvar self = this;\n\tthis.httpRequest({\n\t\t\"uri\": \"https://steamcommunity.com/chat/friendstate/\" + steamID.accountid,\n\t\t\"json\": true\n\t}, function(err, response, body) {\n\t\tif (!self.chatFriends || self.chatState == SteamCommunity.ChatState.Offline) {\n\t\t\treturn; // welp\n\t\t}\n\n\t\tif(err || response.statusCode != 200) {\n\t\t\tself.emit('debug', 'Chat update persona error: ' + (err ? err.message : \"HTTP error \" + response.statusCode));\n\t\t\tsetTimeout(function() {\n\t\t\t\tself._chatUpdatePersona(steamID);\n\t\t\t}, 2000);\n\t\t\treturn;\n\t\t}\n\n\t\tvar persona = {\n\t\t\t\"steamID\": steamID,\n\t\t\t\"personaName\": body.m_strName,\n\t\t\t\"personaState\": body.m_ePersonaState,\n\t\t\t\"personaStateFlags\": body.m_nPersonaStateFlags || 0,\n\t\t\t\"avatarHash\": body.m_strAvatarHash,\n\t\t\t\"inGame\": !!body.m_bInGame,\n\t\t\t\"inGameAppID\": body.m_nInGameAppID ? parseInt(body.m_nInGameAppID, 10) : null,\n\t\t\t\"inGameName\": body.m_strInGameName || null\n\t\t};\n\n\t\tself.emit('chatPersonaState', steamID, persona);\n\t\tself.chatFriends[steamID.getSteamID64()] = persona;\n\t}, \"steamcommunity\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/chat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/confirmations.js":
/*!*****************************************************************!*\
  !*** ./node_modules/steamcommunity/components/confirmations.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\nvar Cheerio = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/index.js\");\nvar SteamTotp = __webpack_require__(/*! steam-totp */ \"(rsc)/./node_modules/steamcommunity/node_modules/steam-totp/index.js\");\nvar Async = __webpack_require__(/*! async */ \"(rsc)/./node_modules/async/dist/async.js\");\n\nvar CConfirmation = __webpack_require__(/*! ../classes/CConfirmation.js */ \"(rsc)/./node_modules/steamcommunity/classes/CConfirmation.js\");\nvar EConfirmationType = __webpack_require__(/*! ../resources/EConfirmationType.js */ \"(rsc)/./node_modules/steamcommunity/resources/EConfirmationType.js\");\n\n/**\n * Get a list of your account's currently outstanding confirmations.\n * @param {int} time - The unix timestamp with which the following key was generated\n * @param {string} key - The confirmation key that was generated using the preceeding time and the tag 'conf' (this key can be reused)\n * @param {SteamCommunity~getConfirmations} callback - Called when the list of confirmations is received\n */\nSteamCommunity.prototype.getConfirmations = function(time, key, callback) {\n\tvar self = this;\n\n\t// Ugly hack to maintain backward compatibility\n\tvar tag = 'conf';\n\tif (typeof key == 'object') {\n\t\ttag = key.tag;\n\t\tkey = key.key;\n\t}\n\n\t// The official Steam app uses the tag 'list', but 'conf' still works so let's use that for backward compatibility.\n\trequest(this, 'getlist', key, time, tag, null, true, function(err, body) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!body.success) {\n\t\t\tif (body.needauth) {\n\t\t\t\tvar err = new Error('Not Logged In');\n\t\t\t\tself._notifySessionExpired(err);\n\t\t\t\tcallback(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcallback(new Error(body.message || body.detail || 'Failed to get confirmation list'));\n\t\t\treturn;\n\t\t}\n\n\t\tvar confs = (body.conf || []).map(conf => new CConfirmation(self, {\n\t\t\tid: conf.id,\n\t\t\ttype: conf.type,\n\t\t\tcreator: conf.creator_id,\n\t\t\tkey: conf.nonce,\n\t\t\ttitle: `${conf.type_name || 'Confirm'} - ${conf.headline || ''}`,\n\t\t\treceiving: conf.type == EConfirmationType.Trade ? ((conf.summary || [])[1] || '') : '',\n\t\t\tsending: (conf.summary || [])[0] || '',\n\t\t\ttime: (new Date(conf.creation_time * 1000)).toISOString(), // for backward compatibility\n\t\t\ttimestamp: new Date(conf.creation_time * 1000),\n\t\t\ticon: conf.icon || ''\n\t\t}));\n\n\t\tcallback(null, confs);\n\t});\n};\n\n/**\n * @callback SteamCommunity~getConfirmations\n * @param {Error|null} err - An Error object on failure, or null on success\n * @param {CConfirmation[]} confirmations - An array of CConfirmation objects\n */\n\n/**\n * Get the trade offer ID associated with a particular confirmation\n * @param {int} confID - The ID of the confirmation in question\n * @param {int} time - The unix timestamp with which the following key was generated\n * @param {string} key - The confirmation key that was generated using the preceeding time and the tag \"detail\" (this key can be reused)\n * @param {SteamCommunity~getConfirmationOfferID} callback\n */\nSteamCommunity.prototype.getConfirmationOfferID = function(confID, time, key, callback) {\n\t// The official Steam app uses the tag 'detail', but 'details' still works so let's use that for backward compatibility\n\trequest(this, 'detailspage/' + confID, key, time, 'details', null, false, function(err, body) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof body != 'string') {\n\t\t\tcallback(new Error(\"Cannot load confirmation details\"));\n\t\t\treturn;\n\t\t}\n\n\t\tvar $ = Cheerio.load(body);\n\t\tvar offer = $('.tradeoffer');\n\t\tif(offer.length < 1) {\n\t\t\tcallback(null, null);\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(null, offer.attr('id').split('_')[1]);\n\t});\n};\n\n/**\n * @callback SteamCommunity~getConfirmationOfferID\n * @param {Error|null} err - An Error object on failure, or null on success\n * @param {string} offerID - The trade offer ID associated with the specified confirmation, or null if not for an offer\n */\n\n/**\n * Confirm or cancel a given confirmation.\n * @param {int|int[]} confID - The ID of the confirmation in question, or an array of confirmation IDs\n * @param {string|string[]} confKey - The confirmation key associated with the confirmation in question (or an array of them) (not a TOTP key, the `key` property of CConfirmation)\n * @param {int} time - The unix timestamp with which the following key was generated\n * @param {string} key - The confirmation key that was generated using the preceding time and the tag \"allow\" (if accepting) or \"cancel\" (if not accepting)\n * @param {boolean} accept - true if you want to accept the confirmation, false if you want to cancel it\n * @param {SteamCommunity~genericErrorCallback} callback - Called when the request is complete\n */\nSteamCommunity.prototype.respondToConfirmation = function(confID, confKey, time, key, accept, callback) {\n\t// Ugly hack to maintain backward compatibility\n\tvar tag = accept ? 'allow' : 'cancel';\n\tif (typeof key == 'object') {\n\t\ttag = key.tag;\n\t\tkey = key.key;\n\t}\n\n\t// The official app uses tags reject/accept, but cancel/allow still works so use these for backward compatibility\n\trequest(this, (confID instanceof Array) ? 'multiajaxop' : 'ajaxop', key, time, tag, {\n\t\top: accept ? 'allow' : 'cancel',\n\t\tcid: confID,\n\t\tck: confKey\n\t}, true, function(err, body) {\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (body.success) {\n\t\t\tcallback(null);\n\t\t\treturn;\n\t\t}\n\n\t\tif (body.message) {\n\t\t\tcallback(new Error(body.message));\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(new Error('Could not act on confirmation'));\n\t});\n};\n\n/**\n * Accept a confirmation for a given object (trade offer or market listing) automatically.\n * @param {string} identitySecret\n * @param {number|string} objectID\n * @param {SteamCommunity~genericErrorCallback} callback\n */\nSteamCommunity.prototype.acceptConfirmationForObject = function(identitySecret, objectID, callback) {\n\tvar self = this;\n\tthis._usedConfTimes = this._usedConfTimes || [];\n\n\tif (typeof this._timeOffset !== 'undefined') {\n\t\t// time offset is already known and saved\n\t\tdoConfirmation();\n\t} else {\n\t\tSteamTotp.getTimeOffset(function(err, offset) {\n\t\t\tif (err) {\n\t\t\t\tcallback(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tself._timeOffset = offset;\n\t\t\tdoConfirmation();\n\n\t\t\tsetTimeout(function() {\n\t\t\t\t// Delete the saved time offset after 12 hours because why not\n\t\t\t\tdelete self._timeOffset;\n\t\t\t}, 1000 * 60 * 60 * 12).unref();\n\t\t});\n\t}\n\n\tfunction doConfirmation() {\n\t\tvar offset = self._timeOffset;\n\t\tvar time = SteamTotp.time(offset);\n\t\tvar confKey = SteamTotp.getConfirmationKey(identitySecret, time, 'list');\n\t\tself.getConfirmations(time, {tag: 'list', key: confKey}, function(err, confs) {\n\t\t\tif (err) {\n\t\t\t\tcallback(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar conf = confs.filter(function(conf) { return conf.creator == objectID; });\n\t\t\tif (conf.length == 0) {\n\t\t\t\tcallback(new Error('Could not find confirmation for object ' + objectID));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconf = conf[0];\n\n\t\t\t// make sure we don't reuse the same time\n\t\t\tvar localOffset = 0;\n\t\t\tdo {\n\t\t\t\ttime = SteamTotp.time(offset) + localOffset++;\n\t\t\t} while (self._usedConfTimes.indexOf(time) != -1);\n\n\t\t\tself._usedConfTimes.push(time);\n\t\t\tif (self._usedConfTimes.length > 60) {\n\t\t\t\tself._usedConfTimes.splice(0, self._usedConfTimes.length - 60); // we don't need to save more than 60 entries\n\t\t\t}\n\n\t\t\tconfKey = SteamTotp.getConfirmationKey(identitySecret, time, 'accept');\n\t\t\tconf.respond(time, {tag: 'accept', key: confKey}, true, callback);\n\t\t});\n\t}\n};\n\n/**\n * Send a single request to Steam to accept all outstanding confirmations (after loading the list). If one fails, the\n * entire request will fail and there will be no way to know which failed without loading the list again.\n * @param {number} time\n * @param {string} confKey\n * @param {string} allowKey\n * @param {function} callback\n */\nSteamCommunity.prototype.acceptAllConfirmations = function(time, confKey, allowKey, callback) {\n\tvar self = this;\n\n\tthis.getConfirmations(time, confKey, function(err, confs) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (confs.length == 0) {\n\t\t\tcallback(null, []);\n\t\t\treturn;\n\t\t}\n\n\t\tself.respondToConfirmation(confs.map(function(conf) { return conf.id; }), confs.map(function(conf) { return conf.key; }), time, allowKey, true, function(err) {\n\t\t\tif (err) {\n\t\t\t\tcallback(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcallback(err, confs);\n\t\t});\n\t});\n};\n\nfunction request(community, url, key, time, tag, params, json, callback) {\n\tif (!community.steamID) {\n\t\tthrow new Error('Must be logged in before trying to do anything with confirmations');\n\t}\n\n\tparams = params || {};\n\tparams.p = SteamTotp.getDeviceID(community.steamID);\n\tparams.a = community.steamID.getSteamID64();\n\tparams.k = key;\n\tparams.t = time;\n\tparams.m = 'react';\n\tparams.tag = tag;\n\n\tvar req = {\n\t\tmethod: url == 'multiajaxop' ? 'POST' : 'GET',\n\t\turi: 'https://steamcommunity.com/mobileconf/' + url,\n\t\tjson: !!json\n\t};\n\n\tif (req.method == 'GET') {\n\t\treq.qs = params;\n\t} else {\n\t\treq.form = params;\n\t}\n\n\tcommunity.httpRequest(req, function(err, response, body) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(null, body);\n\t}, 'steamcommunity');\n}\n\n// Confirmation checker\n\n/**\n * Start automatically polling our confirmations for new ones. The `confKeyNeeded` event will be emitted when we need a confirmation key, or `newConfirmation` when we get a new confirmation\n * @param {int} pollInterval - The interval, in milliseconds, at which we will poll for confirmations. This should probably be at least 10,000 to avoid rate-limits.\n * @param {Buffer|string|null} [identitySecret=null] - Your identity_secret. If passed, all confirmations will be automatically accepted and nothing will be emitted.\n */\nSteamCommunity.prototype.startConfirmationChecker = function(pollInterval, identitySecret) {\n\tthis._confirmationPollInterval = pollInterval;\n\tthis._knownConfirmations = this._knownConfirmations || {};\n\tthis._confirmationKeys = this._confirmationKeys || {};\n\tthis._identitySecret = identitySecret;\n\n\tif(this._confirmationTimer) {\n\t\tclearTimeout(this._confirmationTimer);\n\t}\n\n\tsetTimeout(this.checkConfirmations.bind(this), 500);\n};\n\n/**\n * Stop automatically polling our confirmations.\n */\nSteamCommunity.prototype.stopConfirmationChecker = function() {\n\tif(this._confirmationPollInterval) {\n\t\tdelete this._confirmationPollInterval;\n\t}\n\n\tif(this._identitySecret) {\n\t\tdelete this._identitySecret;\n\t}\n\n\tif(this._confirmationTimer) {\n\t\tclearTimeout(this._confirmationTimer);\n\t\tdelete this._confirmationTimer;\n\t}\n};\n\n/**\n * Run the confirmation checker right now instead of waiting for the next poll.\n * Useful to call right after you send/accept an offer that needs confirmation.\n */\nSteamCommunity.prototype.checkConfirmations = function() {\n\tif(this._confirmationTimer) {\n\t\tclearTimeout(this._confirmationTimer);\n\t\tdelete this._confirmationTimer;\n\t}\n\n\tvar self = this;\n\tif(!this._confirmationQueue) {\n\t\tthis._confirmationQueue = Async.queue(function(conf, callback) {\n\t\t\t// Worker to process new confirmations\n\t\t\tif(self._identitySecret) {\n\t\t\t\t// We should accept this\n\t\t\t\tself.emit('debug', \"Accepting confirmation #\" + conf.id);\n\t\t\t\tvar time = Math.floor(Date.now() / 1000);\n\t\t\t\tconf.respond(time, SteamTotp.getConfirmationKey(self._identitySecret, time, \"allow\"), true, function(err) {\n\t\t\t\t\t// If there was an error and it wasn't actually accepted, we'll pick it up again\n\t\t\t\t\tif (!err) self.emit('confirmationAccepted', conf);\n\t\t\t\t\tdelete self._knownConfirmations[conf.id];\n\t\t\t\t\tsetTimeout(callback, 1000); // Call the callback in 1 second, to make sure the time changes\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tself.emit('newConfirmation', conf);\n\t\t\t\tsetTimeout(callback, 1000); // Call the callback in 1 second, to make sure the time changes\n\t\t\t}\n\t\t}, 1);\n\t}\n\n\tthis.emit('debug', 'Checking confirmations');\n\n\tthis._confirmationCheckerGetKey('conf', function(err, key) {\n\t\tif(err) {\n\t\t\tresetTimer();\n\t\t\treturn;\n\t\t}\n\n\t\tself.getConfirmations(key.time, key.key, function(err, confirmations) {\n\t\t\tif(err) {\n\t\t\t\tself.emit('debug', \"Can't check confirmations: \" + err.message);\n\t\t\t\tresetTimer();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar known = self._knownConfirmations;\n\n\t\t\tvar newOnes = confirmations.filter(function(conf) {\n\t\t\t\treturn !known[conf.id];\n\t\t\t});\n\n\t\t\tif(newOnes.length < 1) {\n\t\t\t\tresetTimer();\n\t\t\t\treturn; // No new ones\n\t\t\t}\n\n\t\t\t// We have new confirmations!\n\t\t\tnewOnes.forEach(function(conf) {\n\t\t\t\tself._knownConfirmations[conf.id] = conf; // Add it to our list of known confirmations\n\t\t\t\tself._confirmationQueue.push(conf);\n\t\t\t});\n\n\t\t\tresetTimer();\n\t\t});\n\t});\n\n\tfunction resetTimer() {\n\t\tif(self._confirmationPollInterval) {\n\t\t\tself._confirmationTimer = setTimeout(self.checkConfirmations.bind(self), self._confirmationPollInterval);\n\t\t}\n\t}\n};\n\nSteamCommunity.prototype.acknowledgeTradeProtection = function(callback) {\n\tthis.httpRequestPost({\n\t\turi: 'https://steamcommunity.com//trade/new/acknowledge',\n\t\tform: {\n\t\t\tsessionid: this.getSessionID(),\n\t\t\tmessage: 1\n\t\t}\n\t}, (err, res, body) => {\n\t\tif (err) {\n\t\t\treturn callback && callback(err);\n\t\t}\n\n\t\tcallback && callback(null);\n\t}, 'steamcommunity');\n}\n\nSteamCommunity.prototype._confirmationCheckerGetKey = function(tag, callback) {\n\tif(this._identitySecret) {\n\t\tif(tag == 'details') {\n\t\t\t// We don't care about details\n\t\t\tcallback(new Error(\"Disabled\"));\n\t\t\treturn;\n\t\t}\n\n\t\tvar time = Math.floor(Date.now() / 1000);\n\t\tcallback(null, {\"time\": time, \"key\": SteamTotp.getConfirmationKey(this._identitySecret, time, tag)});\n\t\treturn;\n\t}\n\n\tvar existing = this._confirmationKeys[tag];\n\tvar reusable = ['conf', 'details'];\n\n\t// See if we already have a key that we can reuse.\n\tif(reusable.indexOf(tag) != -1 && existing && (Date.now() - (existing.time * 1000) < (1000 * 60 * 5))) {\n\t\tcallback(null, existing);\n\t\treturn;\n\t}\n\n\t// We need a fresh one\n\tvar self = this;\n\tthis.emit('confKeyNeeded', tag, function(err, time, key) {\n\t\tif(err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tself._confirmationKeys[tag] = {\"time\": time, \"key\": key};\n\t\tcallback(null, {\"time\": time, \"key\": key});\n\t});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/confirmations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/groups.js":
/*!**********************************************************!*\
  !*** ./node_modules/steamcommunity/components/groups.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\r\nvar SteamID = __webpack_require__(/*! steamid */ \"(rsc)/./node_modules/steamid/index.js\");\r\nvar xml2js = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\r\nvar Cheerio = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/index.js\");\r\nvar Helpers = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/steamcommunity/components/helpers.js\");\r\nvar EResult = SteamCommunity.EResult;\r\n\r\nSteamCommunity.prototype.getGroupMembers = function(gid, callback, members, link, addresses, addressIdx) {\r\n\tmembers = members || [];\r\n\r\n\tif (!link) {\r\n\t\tif (typeof gid !== 'string') {\r\n\t\t\t// It's a SteamID object\r\n\t\t\tlink = \"https://steamcommunity.com/gid/\" + gid.toString() + \"/memberslistxml/?xml=1\";\r\n\t\t} else {\r\n\t\t\ttry {\r\n\t\t\t\tvar sid = new SteamID(gid);\r\n\t\t\t\tif (sid.type == SteamID.Type.CLAN && sid.isValid()) {\r\n\t\t\t\t\tlink = \"https://steamcommunity.com/gid/\" + sid.getSteamID64() + \"/memberslistxml/?xml=1\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Doesn't particularly matter what this message is\");\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tlink = \"https://steamcommunity.com/groups/\" + gid + \"/memberslistxml/?xml=1\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\taddressIdx = addressIdx || 0;\r\n\r\n\tvar options = {};\r\n\toptions.uri = link;\r\n\r\n\tif(addresses) {\r\n\t\tif(addressIdx >= addresses.length) {\r\n\t\t\taddressIdx = 0;\r\n\t\t}\r\n\r\n\t\toptions.localAddress = addresses[addressIdx];\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequest(options, function(err, response, body) {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\txml2js.parseString(body, function(err, result) {\r\n\t\t\tif (err) {\r\n\t\t\t\tcallback(err);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tmembers = members.concat(result.memberList.members[0].steamID64.map(function(steamID) {\r\n\t\t\t\treturn new SteamID(steamID);\r\n\t\t\t}));\r\n\r\n\t\t\tif (result.memberList.nextPageLink) {\r\n\t\t\t\taddressIdx++;\r\n\t\t\t\tself.getGroupMembers(gid, callback, members, result.memberList.nextPageLink[0], addresses, addressIdx);\r\n\t\t\t} else {\r\n\t\t\t\tcallback(null, members);\r\n\t\t\t}\r\n\t\t});\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.getGroupMembersEx = function(gid, addresses, callback) {\r\n\tthis.getGroupMembers(gid, callback, null, null, addresses, 0);\r\n};\r\n\r\nSteamCommunity.prototype.joinGroup = function(gid, callback) {\r\n\tif(typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/gid/\" + gid.getSteamID64(),\r\n\t\t\"form\": {\r\n\t\t\t\"action\": \"join\",\r\n\t\t\t\"sessionID\": this.getSessionID()\r\n\t\t}\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.leaveGroup = function(gid, callback) {\r\n\tif(typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis._myProfile(\"home_process\", {\r\n\t\t\"sessionID\": this.getSessionID(),\r\n\t\t\"action\": \"leaveGroup\",\r\n\t\t\"groupId\": gid.getSteamID64()\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t});\r\n};\r\n\r\nSteamCommunity.prototype.getAllGroupAnnouncements = function(gid, time, callback) {\r\n\tif(typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tif(typeof time === 'function') {\r\n\t\tcallback = time;\r\n\t\ttime = new Date(0); // The beginnig of time...\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequest({\r\n\t\t\"uri\": \"https://steamcommunity.com/gid/\" + gid.getSteamID64() + \"/rss/\"\r\n\t}, function(err, response, body) {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\txml2js.parseString(body, function(err, results) {\r\n\t\t\tif(err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\r\n\t\t\tif(!results.rss.channel[0].item) {\r\n\t\t\t\treturn callback(null, []);\r\n\t\t\t}\r\n\r\n\t\t\tvar announcements = results.rss.channel[0].item.map(function(announcement) {\r\n\t\t\t\tvar splitLink = announcement.link[0].split('/');\r\n\t\t\t\treturn {\r\n\t\t\t\t\theadline: announcement.title[0],\r\n\t\t\t\t\tcontent:  announcement.description[0],\r\n\t\t\t\t\tdate:     new Date(announcement.pubDate[0]),\r\n\t\t\t\t\tauthor:   (typeof announcement.author === 'undefined') ? null : announcement.author[0],\r\n\t\t\t\t\taid:      splitLink[splitLink.length - 1]\r\n\t\t\t\t}\r\n\t\t\t}).filter(function(announcement) {\r\n\t\t\t\treturn (announcement.date > time);\r\n\t\t\t});\r\n\r\n\t\t\treturn callback(null, announcements);\r\n\t\t});\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.postGroupAnnouncement = function(gid, headline, content, hidden, callback) {\r\n\tif(typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tif(typeof hidden === 'function') {\r\n\t\tcallback = hidden;\r\n\t\thidden = false;\r\n\t}\r\n\r\n\tvar self = this;\r\n\tvar form = {\r\n\t\t\"sessionID\": this.getSessionID(),\r\n\t\t\"action\": \"post\",\r\n\t\t\"headline\": headline,\r\n\t\t\"body\": content,\r\n\t\t\"languages[0][headline]\": headline,\r\n\t\t\"languages[0][body]\": content\r\n\t};\r\n\r\n\tif(hidden) {\r\n\t\tform.is_hidden = \"is_hidden\"\r\n\t}\r\n\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/gid/\" + gid.getSteamID64() + \"/announcements\",\r\n\t\tform\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.editGroupAnnouncement = function(gid, aid, headline, content, callback) {\r\n\tif(typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tvar self = this;\r\n\r\n\tvar submitData = {\r\n\t\t\"uri\": \"https://steamcommunity.com/gid/\" + gid.getSteamID64() + \"/announcements\",\r\n\t\t\"form\": {\r\n\t\t\t\"sessionID\": this.getSessionID(),\r\n\t\t\t\"gid\": aid,\r\n\t\t\t\"action\": \"update\",\r\n\t\t\t\"headline\": headline,\r\n\t\t\t\"body\": content,\r\n\t\t\t\"languages[0][headline]\": headline,\r\n\t\t\t\"languages[0][body]\": content,\r\n\t\t\t\"languages[0][updated]\": 1\r\n\t\t}\r\n\t};\r\n\r\n\tthis.httpRequestPost(submitData, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.deleteGroupAnnouncement = function(gid, aid, callback) {\r\n\tif(typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tvar self = this;\r\n\r\n\tvar submitData = {\r\n\t\t\"uri\": \"https://steamcommunity.com/gid/\" + gid.getSteamID64() + \"/announcements/delete/\" + aid + \"?sessionID=\" + this.getSessionID()\r\n\t};\r\n\r\n\tthis.httpRequestGet(submitData, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.scheduleGroupEvent = function(gid, name, type, description, time, server, callback) {\r\n\tif(typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\t// Event types: ChatEvent - Chat, OtherEvent - A lil somethin somethin, PartyEvent - Party!, MeetingEvent - Important meeting, SpecialCauseEvent - Special cause (charity ball?), MusicAndArtsEvent - Music or Art type thing, SportsEvent - Sporting endeavor, TripEvent - Out of town excursion\r\n\t// Passing a number for type will make it a game event for that appid\r\n\r\n\tif(typeof server === 'function') {\r\n\t\tcallback = server;\r\n\t\tserver = {\"ip\": \"\", \"password\": \"\"};\r\n\t} else if(typeof server === 'string') {\r\n\t\tserver = {\"ip\": server, \"password\": \"\"};\r\n\t} else if(typeof server !== 'object') {\r\n\t\tserver = {\"ip\": \"\", \"password\": \"\"};\r\n\t}\r\n\r\n\tvar form = {\r\n\t\t\"sessionid\": this.getSessionID(),\r\n\t\t\"action\": \"newEvent\",\r\n\t\t\"tzOffset\": new Date().getTimezoneOffset() * -60,\r\n\t\t\"name\": name,\r\n\t\t\"type\": (typeof type === 'number' || !isNaN(parseInt(type, 10)) ? \"GameEvent\" : type),\r\n\t\t\"appID\": (typeof type === 'number' || !isNaN(parseInt(type, 10)) ? type : ''),\r\n\t\t\"serverIP\": server.ip,\r\n\t\t\"serverPassword\": server.password,\r\n\t\t\"notes\": description,\r\n\t\t\"eventQuickTime\": \"now\"\r\n\t};\r\n\r\n\tif(time === null) {\r\n\t\tform.startDate = 'MM/DD/YY';\r\n\t\tform.startHour = '12';\r\n\t\tform.startMinute = '00';\r\n\t\tform.startAMPM = 'PM';\r\n\t\tform.timeChoice = 'quick';\r\n\t} else {\r\n\t\tform.startDate = (time.getMonth() + 1 < 10 ? '0' : '') + (time.getMonth() + 1) + '/' + (time.getDate() < 10 ? '0' : '') + time.getDate() + '/' + time.getFullYear().toString().substring(2);\r\n\t\tform.startHour = (time.getHours() === 0 ? '12' : (time.getHours() > 12 ? time.getHours() - 12 : time.getHours()));\r\n\t\tform.startMinute = (time.getMinutes() < 10 ? '0' : '') + time.getMinutes();\r\n\t\tform.startAMPM = (time.getHours() <= 12 ? 'AM' : 'PM');\r\n\t\tform.timeChoice = 'specific';\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/gid/\" + gid.toString() + \"/eventEdit\",\r\n\t\t\"form\": form\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.editGroupEvent = function (gid, id, name, type, description, time, server, callback) {\r\n\tif (typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\t// Event types: ChatEvent - Chat, OtherEvent - A lil somethin somethin, PartyEvent - Party!, MeetingEvent - Important meeting, SpecialCauseEvent - Special cause (charity ball?), MusicAndArtsEvent - Music or Art type thing, SportsEvent - Sporting endeavor, TripEvent - Out of town excursion\r\n\t// Passing a number for type will make it a game event for that appid\r\n\r\n\tif (typeof server === 'function') {\r\n\t\tcallback = server;\r\n\t\tserver = {\"ip\": \"\", \"password\": \"\"};\r\n\t} else if (typeof server === 'string') {\r\n\t\tserver = {\"ip\": server, \"password\": \"\"};\r\n\t} else if (typeof server !== 'object') {\r\n\t\tserver = {\"ip\": \"\", \"password\": \"\"};\r\n\t}\r\n\r\n\tvar form = {\r\n\t\t\"sessionid\": this.getSessionID(),\r\n\t\t\"action\": \"updateEvent\",\r\n\t\t\"eventID\": id,\r\n\t\t\"tzOffset\": new Date().getTimezoneOffset() * -60,\r\n\t\t\"name\": name,\r\n\t\t\"type\": (typeof type === 'number' || !isNaN(parseInt(type, 10)) ? \"GameEvent\" : type),\r\n\t\t\"appID\": (typeof type === 'number' || !isNaN(parseInt(type, 10)) ? type : ''),\r\n\t\t\"serverIP\": server.ip,\r\n\t\t\"serverPassword\": server.password,\r\n\t\t\"notes\": description,\r\n\t\t\"eventQuickTime\": \"now\"\r\n\t};\r\n\r\n\tif (time === null) {\r\n\t\tform.startDate = 'MM/DD/YY';\r\n\t\tform.startHour = '12';\r\n\t\tform.startMinute = '00';\r\n\t\tform.startAMPM = 'PM';\r\n\t\tform.timeChoice = 'quick';\r\n\t} else {\r\n\t\tform.startDate = (time.getMonth() + 1 < 10 ? '0' : '') + (time.getMonth() + 1) + '/' + (time.getDate() < 10 ? '0' : '') + time.getDate() + '/' + time.getFullYear().toString().substring(2);\r\n\t\tform.startHour = (time.getHours() === 0 ? '12' : (time.getHours() > 12 ? time.getHours() - 12 : time.getHours()));\r\n\t\tform.startMinute = (time.getMinutes() < 10 ? '0' : '') + time.getMinutes();\r\n\t\tform.startAMPM = (time.getHours() <= 12 ? 'AM' : 'PM');\r\n\t\tform.timeChoice = 'specific';\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/gid/\" + gid.toString() + \"/eventEdit\",\r\n\t\t\"form\": form\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.deleteGroupEvent = function(gid, id, callback) {\r\n\tif (typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tvar form = {\r\n\t\t\"sessionid\": this.getSessionID(),\r\n\t\t\"action\": \"deleteEvent\",\r\n\t\t\"eventID\": id\r\n\t};\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/gid/\" + gid.toString() + \"/eventEdit\",\r\n\t\t\"form\": form\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.setGroupPlayerOfTheWeek = function(gid, steamID, callback) {\r\n\tif(typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tif(typeof steamID === 'string') {\r\n\t\tsteamID = new SteamID(steamID);\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/gid/\" + gid.getSteamID64() + \"/potwEdit\",\r\n\t\t\"form\": {\r\n\t\t\t\"xml\": 1,\r\n\t\t\t\"action\": \"potw\",\r\n\t\t\t\"memberId\": steamID.getSteam3RenderedID(),\r\n\t\t\t\"sessionid\": this.getSessionID()\r\n\t\t}\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(err || response.statusCode != 200) {\r\n\t\t\tcallback(err || new Error(\"HTTP error \" + response.statusCode));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\txml2js.parseString(body, function(err, results) {\r\n\t\t\tif(err) {\r\n\t\t\t\tcallback(err);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(results.response.results[0] == 'OK') {\r\n\t\t\t\tcallback(null, new SteamID(results.response.oldPOTW[0]), new SteamID(results.response.newPOTW[0]));\r\n\t\t\t} else {\r\n\t\t\t\tcallback(new Error(results.response.results[0]));\r\n\t\t\t}\r\n\t\t});\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.kickGroupMember = function(gid, steamID, callback) {\r\n\tif(typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tif(typeof steamID === 'string') {\r\n\t\tsteamID = new SteamID(steamID);\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/gid/\" + gid.getSteamID64() + \"/membersManage\",\r\n\t\t\"form\": {\r\n\t\t\t\"sessionID\": this.getSessionID(),\r\n\t\t\t\"action\": \"kick\",\r\n\t\t\t\"memberId\": steamID.getSteamID64(),\r\n\t\t\t\"queryString\": \"\"\r\n\t\t}\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.getGroupHistory = function(gid, page, callback) {\r\n\tif(typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tif(typeof page === 'function') {\r\n\t\tcallback = page;\r\n\t\tpage = 1;\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequest(\"https://steamcommunity.com/gid/\" + gid.getSteamID64() + \"/history?p=\" + page, function(err, response, body) {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar $ = Cheerio.load(body);\r\n\t\tvar output = {};\r\n\r\n\t\tvar paging = $('.group_paging p').text();\r\n\t\tvar match = paging.match(/(\\d+) - (\\d+) of (\\d+)/);\r\n\r\n\t\tif(match) {\r\n\t\t\toutput.first = parseInt(match[1], 10);\r\n\t\t\toutput.last = parseInt(match[2], 10);\r\n\t\t\toutput.total = parseInt(match[3], 10);\r\n\t\t}\r\n\r\n\t\toutput.items = [];\r\n\t\tvar currentYear = (new Date()).getFullYear();\r\n\t\tvar lastDate = Date.now();\r\n\r\n\t\tArray.prototype.forEach.call($('.historyItem, .historyItemb'), function(item) {\r\n\t\t\tvar data = {};\r\n\r\n\t\t\tvar $item = $(item);\r\n\t\t\tdata.type = $item.find('.historyShort').text().replace(/ /g, '');\r\n\r\n\t\t\tvar users = $item.find('.whiteLink[data-miniprofile]');\r\n\t\t\tvar sid;\r\n\t\t\tif(users[0]) {\r\n\t\t\t\tsid = new SteamID();\r\n\t\t\t\tsid.universe = SteamID.Universe.PUBLIC;\r\n\t\t\t\tsid.type = SteamID.Type.INDIVIDUAL;\r\n\t\t\t\tsid.instance = SteamID.Instance.DESKTOP;\r\n\t\t\t\tsid.accountid = $(users[0]).data('miniprofile');\r\n\t\t\t\tdata.user = sid;\r\n\t\t\t}\r\n\r\n\t\t\tif(users[1]) {\r\n\t\t\t\tsid = new SteamID();\r\n\t\t\t\tsid.universe = SteamID.Universe.PUBLIC;\r\n\t\t\t\tsid.type = SteamID.Type.INDIVIDUAL;\r\n\t\t\t\tsid.instance = SteamID.Instance.DESKTOP;\r\n\t\t\t\tsid.accountid = $(users[1]).data('miniprofile');\r\n\t\t\t\tdata.actor = sid;\r\n\t\t\t}\r\n\r\n\t\t\t// Figure out the date. Of course there's no year, because Valve\r\n\t\t\tvar dateParts = $item.find('.historyDate').text().split('@');\r\n\t\t\tvar date = dateParts[0].trim().replace(/(st|nd|th)$/, '').trim() + ', ' + currentYear;\r\n\t\t\tvar time = dateParts[1].trim().replace(/(am|pm)/, ' $1');\r\n\r\n\t\t\tdate = new Date(date + ' ' + time + ' UTC');\r\n\r\n\t\t\t// If this date is in the future, or it's later than the previous one, decrement the year\r\n\t\t\tif(date.getTime() > lastDate) {\r\n\t\t\t\tdate.setFullYear(date.getFullYear() - 1);\r\n\t\t\t}\r\n\r\n\t\t\tdata.date = date;\r\n\r\n\t\t\toutput.items.push(data);\r\n\t\t});\r\n\r\n\t\tcallback(null, output);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.getAllGroupComments = function(gid, from, count, callback) {\r\n\tif (typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tvar options = {\r\n\t\t\"uri\": \"https://steamcommunity.com/comment/Clan/render/\" + gid.getSteamID64() + \"/-1/\",\r\n\t\t\"form\": {\r\n\t\t\t\"start\": from,\r\n\t\t\t\"count\": count\r\n\t\t}\r\n\t};\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost(options, function(err, response, body) {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar comments = [];\r\n\r\n\t\tvar $ = Cheerio.load(JSON.parse(body).comments_html);\r\n\r\n\t\t$(\".commentthread_comment_content\").each(function () {\r\n\t\t\tvar comment = {};\r\n\t\t\tvar cachedSelector;\r\n\r\n\t\t\tvar $selector = $(this).find(\".commentthread_author_link\");\r\n\t\t\tcomment.authorName = $($selector).find(\"bdi\").text();\r\n\t\t\tcomment.authorId = $($selector).attr(\"href\").replace(/https?:\\/\\/steamcommunity.com\\/(id|profiles)\\//, \"\");\r\n\t\t\tcomment.date = Helpers.decodeSteamTime($(this).find(\".commentthread_comment_timestamp\").text().trim());\r\n\r\n\t\t\t$selector = $(this).find(\".commentthread_comment_text\");\r\n\t\t\tcomment.commentId = $($selector).attr(\"id\").replace(\"comment_content_\", \"\");\r\n\t\t\tcomment.text = $($selector).html().trim();\r\n\r\n\t\t\tcomments.push(comment);\r\n\t\t});\r\n\r\n\t\tcallback(null, comments);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.deleteGroupComment = function(gid, cid, callback) {\r\n\tif (typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tif (typeof cid !== 'string') {\r\n\t\tcid = cid.toString();\r\n\t}\r\n\r\n\tvar options = {\r\n\t\t\"uri\": \"https://steamcommunity.com/comment/Clan/delete/\" + gid.getSteamID64() + \"/-1/\",\r\n\t\t\"form\": {\r\n\t\t\t\"sessionid\": this.getSessionID(),\r\n\t\t\t\"gidcomment\": cid\r\n\t\t}\r\n\t};\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost(options, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.postGroupComment = function(gid, message, callback) {\r\n\tif (typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tvar options = {\r\n\t\t\"uri\": \"https://steamcommunity.com/comment/Clan/post/\" + gid.getSteamID64() + \"/-1/\",\r\n\t\t\"form\": {\r\n\t\t\t\"comment\": message,\r\n\t\t\t\"count\": 6,\r\n\t\t\t\"sessionid\": this.getSessionID()\r\n\t\t}\r\n\t};\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost(options, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\n/**\r\n * Get requests to join a restricted group.\r\n * @param {SteamID|string} gid - The SteamID of the group you want to manage\r\n * @param {function} callback - First argument is null/Error, second is array of SteamID objects\r\n */\r\nSteamCommunity.prototype.getGroupJoinRequests = function(gid, callback) {\r\n\tif (typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tthis.httpRequestGet(\"https://steamcommunity.com/gid/\" + gid.getSteamID64() + \"/joinRequestsManage\", (err, res, body) => {\r\n\t\tif (!body) {\r\n\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar matches = body.match(/JoinRequests_ApproveDenyUser\\(\\W*['\"](\\d+)['\"],\\W0\\W\\)/g);\r\n\t\tif (!matches) {\r\n\t\t\t// no pending requests\r\n\t\t\tcallback(null, []);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar requests = [];\r\n\t\tfor (var i = 0; i < matches.length; i++) {\r\n\t\t\trequests.push(new SteamID(\"[U:1:\" + matches[i].match(/JoinRequests_ApproveDenyUser\\(\\W*['\"](\\d+)['\"],\\W0\\W\\)/)[1] + \"]\"));\r\n\t\t}\r\n\r\n\t\tcallback(null, requests);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\n/**\r\n * Respond to one or more join requests to a restricted group.\r\n * @param {SteamID|string} gid - The SteamID of the group you want to manage\r\n * @param {SteamID|string|SteamID[]|string[]} steamIDs - The SteamIDs of the users you want to approve or deny membership for (or a single value)\r\n * @param {boolean} approve - True to put them in the group, false to deny their membership\r\n * @param {function} callback - Takes only an Error object/null as the first argument\r\n */\r\nSteamCommunity.prototype.respondToGroupJoinRequests = function(gid, steamIDs, approve, callback) {\r\n\tif (typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tvar rgAccounts = (!Array.isArray(steamIDs) ? [steamIDs] : steamIDs).map(sid => sid.toString());\r\n\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/gid/\" + gid.getSteamID64() + \"/joinRequestsManage\",\r\n\t\t\"form\": {\r\n\t\t\t\"rgAccounts\": rgAccounts,\r\n\t\t\t\"bapprove\": approve ? \"1\" : \"0\",\r\n\t\t\t\"json\": \"1\",\r\n\t\t\t\"sessionID\": this.getSessionID()\r\n\t\t},\r\n\t\t\"json\": true\r\n\t}, (err, res, body) => {\r\n\t\tif (!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (body != EResult.OK) {\r\n\t\t\tvar err = new Error(EResult[body] || (\"Error \" + body));\r\n\t\t\terr.eresult = body;\r\n\t\t\tcallback(err);\r\n\t\t} else {\r\n\t\t\tcallback(null);\r\n\t\t}\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\n/**\r\n * Respond to *ALL* pending group-join requests for a particular group.\r\n * @param {SteamID|string} gid - The SteamID of the group you want to manage\r\n * @param {boolean} approve - True to allow everyone who requested into the group, false to not\r\n * @param {function} callback - Takes only an Error object/null as the first argument\r\n */\r\nSteamCommunity.prototype.respondToAllGroupJoinRequests = function(gid, approve, callback) {\r\n\tif (typeof gid === 'string') {\r\n\t\tgid = new SteamID(gid);\r\n\t}\r\n\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/gid/\" + gid.getSteamID64() + \"/joinRequestsManage\",\r\n\t\t\"form\": {\r\n\t\t\t\"bapprove\": approve ? \"1\" : \"0\",\r\n\t\t\t\"json\": \"1\",\r\n\t\t\t\"action\": \"bulkrespond\",\r\n\t\t\t\"sessionID\": this.getSessionID()\r\n\t\t},\r\n\t\t\"json\": true\r\n\t}, (err, res, body) => {\r\n\t\tif (!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (body != EResult.OK) {\r\n\t\t\tvar err = new Error(EResult[body] || (\"Error \" + body));\r\n\t\t\terr.eresult = body;\r\n\t\t\tcallback(err);\r\n\t\t} else {\r\n\t\t\tcallback(null);\r\n\t\t}\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\n/**\r\n * Follows a curator page\r\n * @param {string|number} curatorId - ID of the curator (not a SteamID)\r\n * @param {function} callback - Takes only an Error object/null as the first argument\r\n */\r\nSteamCommunity.prototype.followCurator = function(curatorId, callback) {\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://store.steampowered.com/curators/ajaxfollow\",\r\n\t\t\"form\": {\r\n\t\t\t\"clanid\": curatorId,\r\n\t\t\t\"sessionid\": this.getSessionID(),\r\n\t\t\t\"follow\": 1\r\n\t\t},\r\n\t\t\"json\": true\r\n\t}, (err, res, body) => {\r\n\t\tif (!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (body.success && body.success.success != SteamCommunity.EResult.OK) {\r\n\t\t\tcallback(Helpers.eresultError(body.success.success));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\n/**\r\n * Unfollows a curator page\r\n * @param {string|number} curatorId - ID of the curator (not a SteamID)\r\n * @param {function} callback - Takes only an Error object/null as the first argument\r\n */\r\nSteamCommunity.prototype.unfollowCurator = function(curatorId, callback) {\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://store.steampowered.com/curators/ajaxfollow\",\r\n\t\t\"form\": {\r\n\t\t\t\"clanid\": curatorId,\r\n\t\t\t\"sessionid\": this.getSessionID(),\r\n\t\t\t\"follow\": 0\r\n\t\t},\r\n\t\t\"json\": true\r\n\t}, (err, res, body) => {\r\n\t\tif (!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (body.success && body.success.success != SteamCommunity.EResult.OK) {\r\n\t\t\tcallback(Helpers.eresultError(body.success.success));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(null);\r\n\t}, \"steamcommunity\");\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/groups.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/help.js":
/*!********************************************************!*\
  !*** ./node_modules/steamcommunity/components/help.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\n\nconst Helpers = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/steamcommunity/components/helpers.js\");\n\nconst HELP_SITE_DOMAIN = 'https://help.steampowered.com';\n\n/**\n * Restore a previously removed steam package from your steam account.\n * @param {int|string} packageID\n * @param {function} callback\n */\nSteamCommunity.prototype.restorePackage = function(packageID, callback) {\n\tthis.httpRequestPost({\n\t\turi: HELP_SITE_DOMAIN + '/wizard/AjaxDoPackageRestore',\n\t\tform: {\n\t\t\tpackageid: packageID,\n\t\t\tsessionid: this.getSessionID(HELP_SITE_DOMAIN),\n\t\t\twizard_ajax: 1\n\t\t},\n\t\tjson: true\n\t}, wizardAjaxHandler(callback));\n};\n\n/**\n * Remove a steam package from your steam account.\n * @param {int|string} packageID\n * @param {function} callback\n */\nSteamCommunity.prototype.removePackage = function(packageID, callback) {\n\tthis.httpRequestPost({\n\t\turi: HELP_SITE_DOMAIN + '/wizard/AjaxDoPackageRemove',\n\t\tform: {\n\t\t\tpackageid: packageID,\n\t\t\tsessionid: this.getSessionID(HELP_SITE_DOMAIN),\n\t\t\twizard_ajax: 1\n\t\t},\n\t\tjson: true\n\t}, wizardAjaxHandler(callback));\n};\n\n/**\n * Returns a handler for wizard ajax HTTP requests.\n * @param {function} callback\n * @returns {(function(*=, *, *): void)|*}\n */\nfunction wizardAjaxHandler(callback) {\n\treturn (err, res, body) => {\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!body.success) {\n\t\t\tcallback(body.errorMsg ? new Error(body.errorMsg) : Helpers.eresultError(body.success));\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(null);\n\t};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvY29tcG9uZW50cy9oZWxwLmpzIiwibWFwcGluZ3MiOiJBQUFBLHVCQUF1QixtQkFBTyxDQUFDLGlFQUFhOztBQUU1QyxnQkFBZ0IsbUJBQU8sQ0FBQywrRUFBYzs7QUFFdEM7O0FBRUE7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jczItc2tpbi10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3N0ZWFtY29tbXVuaXR5L2NvbXBvbmVudHMvaGVscC5qcz9iZTA4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFN0ZWFtQ29tbXVuaXR5ID0gcmVxdWlyZSgnLi4vaW5kZXguanMnKTtcblxuY29uc3QgSGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycy5qcycpO1xuXG5jb25zdCBIRUxQX1NJVEVfRE9NQUlOID0gJ2h0dHBzOi8vaGVscC5zdGVhbXBvd2VyZWQuY29tJztcblxuLyoqXG4gKiBSZXN0b3JlIGEgcHJldmlvdXNseSByZW1vdmVkIHN0ZWFtIHBhY2thZ2UgZnJvbSB5b3VyIHN0ZWFtIGFjY291bnQuXG4gKiBAcGFyYW0ge2ludHxzdHJpbmd9IHBhY2thZ2VJRFxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuU3RlYW1Db21tdW5pdHkucHJvdG90eXBlLnJlc3RvcmVQYWNrYWdlID0gZnVuY3Rpb24ocGFja2FnZUlELCBjYWxsYmFjaykge1xuXHR0aGlzLmh0dHBSZXF1ZXN0UG9zdCh7XG5cdFx0dXJpOiBIRUxQX1NJVEVfRE9NQUlOICsgJy93aXphcmQvQWpheERvUGFja2FnZVJlc3RvcmUnLFxuXHRcdGZvcm06IHtcblx0XHRcdHBhY2thZ2VpZDogcGFja2FnZUlELFxuXHRcdFx0c2Vzc2lvbmlkOiB0aGlzLmdldFNlc3Npb25JRChIRUxQX1NJVEVfRE9NQUlOKSxcblx0XHRcdHdpemFyZF9hamF4OiAxXG5cdFx0fSxcblx0XHRqc29uOiB0cnVlXG5cdH0sIHdpemFyZEFqYXhIYW5kbGVyKGNhbGxiYWNrKSk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIHN0ZWFtIHBhY2thZ2UgZnJvbSB5b3VyIHN0ZWFtIGFjY291bnQuXG4gKiBAcGFyYW0ge2ludHxzdHJpbmd9IHBhY2thZ2VJRFxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuU3RlYW1Db21tdW5pdHkucHJvdG90eXBlLnJlbW92ZVBhY2thZ2UgPSBmdW5jdGlvbihwYWNrYWdlSUQsIGNhbGxiYWNrKSB7XG5cdHRoaXMuaHR0cFJlcXVlc3RQb3N0KHtcblx0XHR1cmk6IEhFTFBfU0lURV9ET01BSU4gKyAnL3dpemFyZC9BamF4RG9QYWNrYWdlUmVtb3ZlJyxcblx0XHRmb3JtOiB7XG5cdFx0XHRwYWNrYWdlaWQ6IHBhY2thZ2VJRCxcblx0XHRcdHNlc3Npb25pZDogdGhpcy5nZXRTZXNzaW9uSUQoSEVMUF9TSVRFX0RPTUFJTiksXG5cdFx0XHR3aXphcmRfYWpheDogMVxuXHRcdH0sXG5cdFx0anNvbjogdHJ1ZVxuXHR9LCB3aXphcmRBamF4SGFuZGxlcihjYWxsYmFjaykpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgaGFuZGxlciBmb3Igd2l6YXJkIGFqYXggSFRUUCByZXF1ZXN0cy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7KGZ1bmN0aW9uKCo9LCAqLCAqKTogdm9pZCl8Kn1cbiAqL1xuZnVuY3Rpb24gd2l6YXJkQWpheEhhbmRsZXIoY2FsbGJhY2spIHtcblx0cmV0dXJuIChlcnIsIHJlcywgYm9keSkgPT4ge1xuXHRcdGlmICghY2FsbGJhY2spIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoZXJyKSB7XG5cdFx0XHRjYWxsYmFjayhlcnIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICghYm9keS5zdWNjZXNzKSB7XG5cdFx0XHRjYWxsYmFjayhib2R5LmVycm9yTXNnID8gbmV3IEVycm9yKGJvZHkuZXJyb3JNc2cpIDogSGVscGVycy5lcmVzdWx0RXJyb3IoYm9keS5zdWNjZXNzKSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y2FsbGJhY2sobnVsbCk7XG5cdH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/help.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/helpers.js":
/*!***********************************************************!*\
  !*** ./node_modules/steamcommunity/components/helpers.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const request = __webpack_require__(/*! request */ \"(rsc)/./node_modules/request/index.js\");\nconst SteamID = __webpack_require__(/*! steamid */ \"(rsc)/./node_modules/steamid/index.js\");\nconst xml2js  = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\n\nconst EResult = __webpack_require__(/*! ../resources/EResult.js */ \"(rsc)/./node_modules/steamcommunity/resources/EResult.js\");\n\nexports.isSteamID = function(input) {\n\tvar keys = Object.keys(input);\n\tif (keys.length != 4) {\n\t\treturn false;\n\t}\n\n\t// Make sure it has the keys we expect\n\tkeys = keys.filter(function(item) {\n\t\treturn ['universe', 'type', 'instance', 'accountid'].indexOf(item) != -1;\n\t});\n\n\treturn keys.length == 4;\n};\n\nexports.decodeSteamTime = function(time) {\n\tvar date = new Date();\n\n\tif (time.includes(\"@\")) {\n\t\tvar parts = time.split('@');\n\t\tif (!parts[0].includes(\",\")) {\n\t\t\t// no year, assume current year\n\t\t\tparts[0] += \", \" + date.getFullYear();\n\t\t}\n\n\t\tdate = new Date(parts.join('@').replace(/(am|pm)/, ' $1') + \" UTC\");  // add a space so JS can decode it\n\t} else {\n\t\t// Relative date\n\t\tvar amount = time.replace(/(\\d) (minutes|hour|hours) ago/, \"$1\");\n\n\t\tif(time.includes(\"minutes\")) {\n\t\t\tdate.setMinutes(date.getMinutes() - amount);\n\t\t} else if(time.match(/hour|hours/)) {\n\t\t\tdate.setHours(date.getHours() - amount);\n\t\t}\n\t}\n\n\treturn date;\n};\n\n/**\n * Get an Error object for a particular EResult\n * @param {int} eresult\n * @returns {null|Error}\n */\nexports.eresultError = function(eresult) {\n\tif (eresult == EResult.OK) {\n\t\t// no error\n\t\treturn null;\n\t}\n\n\tvar err = new Error(EResult[eresult] || (\"Error \" + eresult));\n\terr.eresult = eresult;\n\treturn err;\n};\n\nexports.decodeJwt = function(jwt) {\n\tlet parts = jwt.split('.');\n\tif (parts.length != 3) {\n\t\tthrow new Error('Invalid JWT');\n\t}\n\n\tlet standardBase64 = parts[1].replace(/-/g, '+')\n\t\t.replace(/_/g, '/');\n\n\treturn JSON.parse(Buffer.from(standardBase64, 'base64').toString('utf8'));\n};\n\n/**\n * Resolves a Steam profile URL to get steamID64 and vanityURL\n * @param {String} url - Full steamcommunity profile URL or only the vanity part.\n * @param {Object} callback - First argument is null/Error, second is object containing vanityURL (String) and steamID (String)\n */\nexports.resolveVanityURL = function(url, callback) {\n\t// Precede url param if only the vanity was provided\n\tif (!url.includes(\"steamcommunity.com\")) {\n\t\turl = \"https://steamcommunity.com/id/\" + url;\n\t}\n\n\t// Make request to get XML data\n\trequest(url + \"/?xml=1\", function(err, response, body) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\t// Parse XML data returned from Steam into an object\n\t\tnew xml2js.Parser().parseString(body, (err, parsed) => {\n\t\t\tif (err) {\n\t\t\t\tcallback(new Error(\"Couldn't parse XML response\"));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (parsed.response && parsed.response.error) {\n\t\t\t\tcallback(new Error(\"Couldn't find Steam ID\"));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet steamID64 = parsed.profile.steamID64[0];\n\t\t\tlet vanityURL = parsed.profile.customURL[0];\n\n\t\t\tcallback(null, {\"vanityURL\": vanityURL, \"steamID\": steamID64});\n\t\t});\n\t});\n};\n\n/**\n * Converts `input` into a SteamID object, if it's a parseable string.\n * @param {SteamID|string} input\n * @return {SteamID}\n */\nexports.steamID = function(input) {\n\tif (exports.isSteamID(input)) {\n\t\treturn input;\n\t}\n\n\tif (typeof input != 'string') {\n\t\tthrow new Error(`Input SteamID value \"${input}\" is not a string`);\n\t}\n\n\t// This will throw if the input is not a well-formed SteamID\n\treturn new SteamID(input);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvY29tcG9uZW50cy9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLHNEQUFTO0FBQ2pDLGdCQUFnQixtQkFBTyxDQUFDLHNEQUFTO0FBQ2pDLGdCQUFnQixtQkFBTyxDQUFDLHlEQUFROztBQUVoQyxnQkFBZ0IsbUJBQU8sQ0FBQyx5RkFBeUI7O0FBRWpELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3RUFBd0U7QUFDeEUsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWE7QUFDYjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIsNkNBQTZDO0FBQ2hFLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCLFlBQVk7QUFDWjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQ0FBMEMsTUFBTTtBQUNoRDs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jczItc2tpbi10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3N0ZWFtY29tbXVuaXR5L2NvbXBvbmVudHMvaGVscGVycy5qcz84NzBiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5jb25zdCBTdGVhbUlEID0gcmVxdWlyZSgnc3RlYW1pZCcpO1xuY29uc3QgeG1sMmpzICA9IHJlcXVpcmUoJ3htbDJqcycpO1xuXG5jb25zdCBFUmVzdWx0ID0gcmVxdWlyZSgnLi4vcmVzb3VyY2VzL0VSZXN1bHQuanMnKTtcblxuZXhwb3J0cy5pc1N0ZWFtSUQgPSBmdW5jdGlvbihpbnB1dCkge1xuXHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKGlucHV0KTtcblx0aWYgKGtleXMubGVuZ3RoICE9IDQpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgaXQgaGFzIHRoZSBrZXlzIHdlIGV4cGVjdFxuXHRrZXlzID0ga2V5cy5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuXHRcdHJldHVybiBbJ3VuaXZlcnNlJywgJ3R5cGUnLCAnaW5zdGFuY2UnLCAnYWNjb3VudGlkJ10uaW5kZXhPZihpdGVtKSAhPSAtMTtcblx0fSk7XG5cblx0cmV0dXJuIGtleXMubGVuZ3RoID09IDQ7XG59O1xuXG5leHBvcnRzLmRlY29kZVN0ZWFtVGltZSA9IGZ1bmN0aW9uKHRpbWUpIHtcblx0dmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuXG5cdGlmICh0aW1lLmluY2x1ZGVzKFwiQFwiKSkge1xuXHRcdHZhciBwYXJ0cyA9IHRpbWUuc3BsaXQoJ0AnKTtcblx0XHRpZiAoIXBhcnRzWzBdLmluY2x1ZGVzKFwiLFwiKSkge1xuXHRcdFx0Ly8gbm8geWVhciwgYXNzdW1lIGN1cnJlbnQgeWVhclxuXHRcdFx0cGFydHNbMF0gKz0gXCIsIFwiICsgZGF0ZS5nZXRGdWxsWWVhcigpO1xuXHRcdH1cblxuXHRcdGRhdGUgPSBuZXcgRGF0ZShwYXJ0cy5qb2luKCdAJykucmVwbGFjZSgvKGFtfHBtKS8sICcgJDEnKSArIFwiIFVUQ1wiKTsgIC8vIGFkZCBhIHNwYWNlIHNvIEpTIGNhbiBkZWNvZGUgaXRcblx0fSBlbHNlIHtcblx0XHQvLyBSZWxhdGl2ZSBkYXRlXG5cdFx0dmFyIGFtb3VudCA9IHRpbWUucmVwbGFjZSgvKFxcZCkgKG1pbnV0ZXN8aG91cnxob3VycykgYWdvLywgXCIkMVwiKTtcblxuXHRcdGlmKHRpbWUuaW5jbHVkZXMoXCJtaW51dGVzXCIpKSB7XG5cdFx0XHRkYXRlLnNldE1pbnV0ZXMoZGF0ZS5nZXRNaW51dGVzKCkgLSBhbW91bnQpO1xuXHRcdH0gZWxzZSBpZih0aW1lLm1hdGNoKC9ob3VyfGhvdXJzLykpIHtcblx0XHRcdGRhdGUuc2V0SG91cnMoZGF0ZS5nZXRIb3VycygpIC0gYW1vdW50KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZGF0ZTtcbn07XG5cbi8qKlxuICogR2V0IGFuIEVycm9yIG9iamVjdCBmb3IgYSBwYXJ0aWN1bGFyIEVSZXN1bHRcbiAqIEBwYXJhbSB7aW50fSBlcmVzdWx0XG4gKiBAcmV0dXJucyB7bnVsbHxFcnJvcn1cbiAqL1xuZXhwb3J0cy5lcmVzdWx0RXJyb3IgPSBmdW5jdGlvbihlcmVzdWx0KSB7XG5cdGlmIChlcmVzdWx0ID09IEVSZXN1bHQuT0spIHtcblx0XHQvLyBubyBlcnJvclxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0dmFyIGVyciA9IG5ldyBFcnJvcihFUmVzdWx0W2VyZXN1bHRdIHx8IChcIkVycm9yIFwiICsgZXJlc3VsdCkpO1xuXHRlcnIuZXJlc3VsdCA9IGVyZXN1bHQ7XG5cdHJldHVybiBlcnI7XG59O1xuXG5leHBvcnRzLmRlY29kZUp3dCA9IGZ1bmN0aW9uKGp3dCkge1xuXHRsZXQgcGFydHMgPSBqd3Quc3BsaXQoJy4nKTtcblx0aWYgKHBhcnRzLmxlbmd0aCAhPSAzKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEpXVCcpO1xuXHR9XG5cblx0bGV0IHN0YW5kYXJkQmFzZTY0ID0gcGFydHNbMV0ucmVwbGFjZSgvLS9nLCAnKycpXG5cdFx0LnJlcGxhY2UoL18vZywgJy8nKTtcblxuXHRyZXR1cm4gSlNPTi5wYXJzZShCdWZmZXIuZnJvbShzdGFuZGFyZEJhc2U2NCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCd1dGY4JykpO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlcyBhIFN0ZWFtIHByb2ZpbGUgVVJMIHRvIGdldCBzdGVhbUlENjQgYW5kIHZhbml0eVVSTFxuICogQHBhcmFtIHtTdHJpbmd9IHVybCAtIEZ1bGwgc3RlYW1jb21tdW5pdHkgcHJvZmlsZSBVUkwgb3Igb25seSB0aGUgdmFuaXR5IHBhcnQuXG4gKiBAcGFyYW0ge09iamVjdH0gY2FsbGJhY2sgLSBGaXJzdCBhcmd1bWVudCBpcyBudWxsL0Vycm9yLCBzZWNvbmQgaXMgb2JqZWN0IGNvbnRhaW5pbmcgdmFuaXR5VVJMIChTdHJpbmcpIGFuZCBzdGVhbUlEIChTdHJpbmcpXG4gKi9cbmV4cG9ydHMucmVzb2x2ZVZhbml0eVVSTCA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcblx0Ly8gUHJlY2VkZSB1cmwgcGFyYW0gaWYgb25seSB0aGUgdmFuaXR5IHdhcyBwcm92aWRlZFxuXHRpZiAoIXVybC5pbmNsdWRlcyhcInN0ZWFtY29tbXVuaXR5LmNvbVwiKSkge1xuXHRcdHVybCA9IFwiaHR0cHM6Ly9zdGVhbWNvbW11bml0eS5jb20vaWQvXCIgKyB1cmw7XG5cdH1cblxuXHQvLyBNYWtlIHJlcXVlc3QgdG8gZ2V0IFhNTCBkYXRhXG5cdHJlcXVlc3QodXJsICsgXCIvP3htbD0xXCIsIGZ1bmN0aW9uKGVyciwgcmVzcG9uc2UsIGJvZHkpIHtcblx0XHRpZiAoZXJyKSB7XG5cdFx0XHRjYWxsYmFjayhlcnIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFBhcnNlIFhNTCBkYXRhIHJldHVybmVkIGZyb20gU3RlYW0gaW50byBhbiBvYmplY3Rcblx0XHRuZXcgeG1sMmpzLlBhcnNlcigpLnBhcnNlU3RyaW5nKGJvZHksIChlcnIsIHBhcnNlZCkgPT4ge1xuXHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRjYWxsYmFjayhuZXcgRXJyb3IoXCJDb3VsZG4ndCBwYXJzZSBYTUwgcmVzcG9uc2VcIikpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmIChwYXJzZWQucmVzcG9uc2UgJiYgcGFyc2VkLnJlc3BvbnNlLmVycm9yKSB7XG5cdFx0XHRcdGNhbGxiYWNrKG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgU3RlYW0gSURcIikpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGxldCBzdGVhbUlENjQgPSBwYXJzZWQucHJvZmlsZS5zdGVhbUlENjRbMF07XG5cdFx0XHRsZXQgdmFuaXR5VVJMID0gcGFyc2VkLnByb2ZpbGUuY3VzdG9tVVJMWzBdO1xuXG5cdFx0XHRjYWxsYmFjayhudWxsLCB7XCJ2YW5pdHlVUkxcIjogdmFuaXR5VVJMLCBcInN0ZWFtSURcIjogc3RlYW1JRDY0fSk7XG5cdFx0fSk7XG5cdH0pO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgaW5wdXRgIGludG8gYSBTdGVhbUlEIG9iamVjdCwgaWYgaXQncyBhIHBhcnNlYWJsZSBzdHJpbmcuXG4gKiBAcGFyYW0ge1N0ZWFtSUR8c3RyaW5nfSBpbnB1dFxuICogQHJldHVybiB7U3RlYW1JRH1cbiAqL1xuZXhwb3J0cy5zdGVhbUlEID0gZnVuY3Rpb24oaW5wdXQpIHtcblx0aWYgKGV4cG9ydHMuaXNTdGVhbUlEKGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dDtcblx0fVxuXG5cdGlmICh0eXBlb2YgaW5wdXQgIT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYElucHV0IFN0ZWFtSUQgdmFsdWUgXCIke2lucHV0fVwiIGlzIG5vdCBhIHN0cmluZ2ApO1xuXHR9XG5cblx0Ly8gVGhpcyB3aWxsIHRocm93IGlmIHRoZSBpbnB1dCBpcyBub3QgYSB3ZWxsLWZvcm1lZCBTdGVhbUlEXG5cdHJldHVybiBuZXcgU3RlYW1JRChpbnB1dCk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/http.js":
/*!********************************************************!*\
  !*** ./node_modules/steamcommunity/components/http.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var URL = __webpack_require__(/*! url */ \"url\");\r\n\r\nvar SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\r\n\r\nSteamCommunity.prototype.httpRequest = function(uri, options, callback, source) {\r\n\tif (typeof uri === 'object') {\r\n\t\tsource = callback;\r\n\t\tcallback = options;\r\n\t\toptions = uri;\r\n\t\turi = options.url || options.uri;\r\n\t} else if (typeof options === 'function') {\r\n\t\tsource = callback;\r\n\t\tcallback = options;\r\n\t\toptions = {};\r\n\t}\r\n\r\n\toptions.url = options.uri = uri;\r\n\r\n\tif (this._httpRequestConvenienceMethod) {\r\n\t\toptions.method = this._httpRequestConvenienceMethod;\r\n\t\tdelete this._httpRequestConvenienceMethod;\r\n\t}\r\n\r\n\t// Add origin header if necessary\r\n\t// https://github.com/DoctorMcKay/node-steamcommunity/issues/351\r\n\tif ((options.method || 'GET').toUpperCase() != 'GET') {\r\n\t\toptions.headers = options.headers || {};\r\n\t\tif (!options.headers.origin) {\r\n\t\t\tvar parsedUrl = URL.parse(options.url);\r\n\t\t\toptions.headers.origin = parsedUrl.protocol + '//' + parsedUrl.host;\r\n\t\t}\r\n\t}\r\n\r\n\tvar requestID = ++this._httpRequestID;\r\n\tsource = source || \"\";\r\n\r\n\tvar self = this;\r\n\tvar continued = false;\r\n\r\n\tif (!this.onPreHttpRequest || !this.onPreHttpRequest(requestID, source, options, continueRequest)) {\r\n\t\t// No pre-hook, or the pre-hook doesn't want to delay the request.\r\n\t\tcontinueRequest(null);\r\n\t}\r\n\r\n\tfunction continueRequest(err) {\r\n\t\tif (continued) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcontinued = true;\r\n\r\n\t\tif (err) {\r\n\t\t\tif (callback) {\r\n\t\t\t\tcallback(err);\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tself.request(options, function (err, response, body) {\r\n\t\t\tvar hasCallback = !!callback;\r\n\t\t\tvar httpError = options.checkHttpError !== false && self._checkHttpError(err, response, callback, body);\r\n\t\t\tvar communityError = !options.json && options.checkCommunityError !== false && self._checkCommunityError(body, httpError ? function () {} : callback); // don't fire the callback if hasHttpError did it already\r\n\t\t\tvar tradeError = !options.json && options.checkTradeError !== false && self._checkTradeError(body, httpError || communityError ? function () {} : callback); // don't fire the callback if either of the previous already did\r\n\t\t\tvar jsonError = options.json && options.checkJsonError !== false && !body ? new Error(\"Malformed JSON response\") : null;\r\n\r\n\t\t\tself.emit('postHttpRequest', requestID, source, options, httpError || communityError || tradeError || jsonError || null, response, body, {\r\n\t\t\t\t\"hasCallback\": hasCallback,\r\n\t\t\t\t\"httpError\": httpError,\r\n\t\t\t\t\"communityError\": communityError,\r\n\t\t\t\t\"tradeError\": tradeError,\r\n\t\t\t\t\"jsonError\": jsonError\r\n\t\t\t});\r\n\r\n\t\t\tif (hasCallback && !(httpError || communityError || tradeError)) {\r\n\t\t\t\tif (jsonError) {\r\n\t\t\t\t\tcallback.call(self, jsonError, response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcallback.apply(self, arguments);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n};\r\n\r\nSteamCommunity.prototype.httpRequestGet = function() {\r\n\tthis._httpRequestConvenienceMethod = \"GET\";\r\n\treturn this.httpRequest.apply(this, arguments);\r\n};\r\n\r\nSteamCommunity.prototype.httpRequestPost = function() {\r\n\tthis._httpRequestConvenienceMethod = \"POST\";\r\n\treturn this.httpRequest.apply(this, arguments);\r\n};\r\n\r\nSteamCommunity.prototype._notifySessionExpired = function(err) {\r\n\tthis.emit('sessionExpired', err);\r\n};\r\n\r\nSteamCommunity.prototype._checkHttpError = function(err, response, callback, body) {\r\n\tif (err) {\r\n\t\tcallback(err, response, body);\r\n\t\treturn err;\r\n\t}\r\n\r\n\tif (response.statusCode >= 300 && response.statusCode <= 399 && response.headers.location.indexOf('/login') != -1) {\r\n\t\terr = new Error(\"Not Logged In\");\r\n\t\tcallback(err, response, body);\r\n\t\tthis._notifySessionExpired(err);\r\n\t\treturn err;\r\n\t}\r\n\r\n\tif (response.statusCode == 403 && typeof response.body === 'string' && response.body.match(/<div id=\"parental_notice_instructions\">Enter your PIN below to exit Family View.<\\/div>/)) {\r\n\t\terr = new Error(\"Family View Restricted\");\r\n\t\tcallback(err, response, body);\r\n\t\treturn err;\r\n\t}\r\n\r\n\tif (response.statusCode >= 400) {\r\n\t\terr = new Error(\"HTTP error \" + response.statusCode);\r\n\t\terr.code = response.statusCode;\r\n\t\tcallback(err, response, body);\r\n\t\treturn err;\r\n\t}\r\n\r\n\treturn false;\r\n};\r\n\r\nSteamCommunity.prototype._checkCommunityError = function(html, callback) {\r\n\tvar err;\r\n\r\n\tif(typeof html === 'string' && html.match(/<h1>Sorry!<\\/h1>/)) {\r\n\t\tvar match = html.match(/<h3>(.+)<\\/h3>/);\r\n\t\terr = new Error(match ? match[1] : \"Unknown error occurred\");\r\n\t\tcallback(err);\r\n\t\treturn err;\r\n\t}\r\n\r\n\tif (typeof html === 'string' && html.indexOf('g_steamID = false;') > -1 && html.indexOf('<title>Sign In</title>') > -1) {\r\n\t\terr = new Error(\"Not Logged In\");\r\n\t\tcallback(err);\r\n\t\tthis._notifySessionExpired(err);\r\n\t\treturn err;\r\n\t}\r\n\r\n\treturn false;\r\n};\r\n\r\nSteamCommunity.prototype._checkTradeError = function(html, callback) {\r\n\tif (typeof html !== 'string') {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar match = html.match(/<div id=\"error_msg\">\\s*([^<]+)\\s*<\\/div>/);\r\n\tif (match) {\r\n\t\tvar err = new Error(match[1].trim());\r\n\t\tcallback(err);\r\n\t\treturn err;\r\n\t}\r\n\r\n\treturn false;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/http.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/inventoryhistory.js":
/*!********************************************************************!*\
  !*** ./node_modules/steamcommunity/components/inventoryhistory.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\nvar CEconItem = __webpack_require__(/*! ../classes/CEconItem.js */ \"(rsc)/./node_modules/steamcommunity/classes/CEconItem.js\");\nvar Helpers = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/steamcommunity/components/helpers.js\");\nvar SteamID = __webpack_require__(/*! steamid */ \"(rsc)/./node_modules/steamid/index.js\");\nvar request = __webpack_require__(/*! request */ \"(rsc)/./node_modules/request/index.js\");\nvar Cheerio = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/index.js\");\nvar Async = __webpack_require__(/*! async */ \"(rsc)/./node_modules/async/dist/async.js\");\n\n/*\n * Inventory history in a nutshell.\n *\n * There are no more page numbers. Now you have to request after_time and optionally after_trade.\n * Without \"prev\" set, you will request 30 trades that were completed FURTHER IN THE PAST than after_time (and optionally after_trade)\n * With \"prev\" set, you will request 30 trades that were completed MORE RECENTLY than after_time (and optionally after_trade)\n */\n\n/**\n * @deprecated Use GetTradeHistory instead: https://lab.xpaw.me/steam_api_documentation.html#IEconService_GetTradeHistory_v1\n * @param {object} options\n * @param {function} callback\n */\nSteamCommunity.prototype.getInventoryHistory = function(options, callback) {\n\tif (typeof options === 'function') {\n\t\tcallback = options;\n\t\toptions = {};\n\t}\n\t\n\toptions.direction = options.direction || \"past\";\n\n\tvar qs = \"?l=english\";\n\tif (options.startTime) {\n\t\tif (options.startTime instanceof Date) {\n\t\t\toptions.startTime = Math.floor(options.startTime.getTime() / 1000);\n\t\t}\n\n\t\tqs += \"&after_time=\" + options.startTime;\n\n\t\tif (options.startTrade) {\n\t\t\tqs += \"&after_trade=\" + options.startTrade;\n\t\t}\n\t}\n\n\tif (options.direction == \"future\") {\n\t\tqs += \"&prev=1\";\n\t}\n\n\tthis._myProfile(\"inventoryhistory\" + qs, null, function(err, response, body) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tvar output = {};\n\t\tvar vanityURLs = [];\n\n\t\tvar $ = Cheerio.load(body);\n\t\tif (!$('.inventory_history_pagingrow').html()) {\n\t\t\tcallback(new Error(\"Malformed page: no paging row found\"));\n\t\t\treturn;\n\t\t}\n\n\t\t// Load the inventory item data\n\t\tvar match2 = body.match(/var g_rgHistoryInventory = (.*);/);\n\t\tif (!match2) {\n\t\t\tcallback(new Error(\"Malformed page: no trade found\"));\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tvar historyInventory = JSON.parse(match2[1]);\n\t\t} catch (ex) {\n\t\t\tcallback(new Error(\"Malformed page: no well-formed trade data found\"));\n\t\t\treturn;\n\t\t}\n\n\t\tvar i;\n\n\t\t// See if we've got paging buttons\n\t\tvar $paging = $('.inventory_history_nextbtn .pagebtn:not(.disabled)');\n\t\tvar href;\n\t\tfor (i = 0; i < $paging.length; i++) {\n\t\t\thref = $paging[i].attribs.href;\n\t\t\tif (href.match(/prev=1/)) {\n\t\t\t\toutput.firstTradeTime = new Date(href.match(/after_time=(\\d+)/)[1] * 1000);\n\t\t\t\toutput.firstTradeID = href.match(/after_trade=(\\d+)/)[1];\n\t\t\t} else {\n\t\t\t\toutput.lastTradeTime = new Date(href.match(/after_time=(\\d+)/)[1] * 1000);\n\t\t\t\toutput.lastTradeID = href.match(/after_trade=(\\d+)/)[1];\n\t\t\t}\n\t\t}\n\n\t\toutput.trades = [];\n\t\tvar trades = $('.tradehistoryrow');\n\n\t\tvar item, trade, profileLink, items, j, econItem, timeMatch, time;\n\t\tfor (i = 0; i < trades.length; i++) {\n\t\t\titem = $(trades[i]);\n\t\t\ttrade = {};\n\n\t\t\ttrade.onHold = !!item.find('span:nth-of-type(2)').text().match(/Trade on Hold/i);\n\n\t\t\ttimeMatch = item.find('.tradehistory_timestamp').html().match(/(\\d+):(\\d+)(am|pm)/);\n\t\t\tif (timeMatch[1] == 12 && timeMatch[3] == 'am') {\n\t\t\t\ttimeMatch[1] = 0;\n\t\t\t}\n\n\t\t\tif (timeMatch[1] < 12 && timeMatch[3] == 'pm') {\n\t\t\t\ttimeMatch[1] = parseInt(timeMatch[1], 10) + 12;\n\t\t\t}\n\n\t\t\ttime = (timeMatch[1] < 10 ? '0' : '') + timeMatch[1] + ':' + timeMatch[2] + ':00';\n\n\t\t\ttrade.date = new Date(item.find('.tradehistory_date').html() + ' ' + time + ' UTC');\n\t\t\ttrade.partnerName = item.find('.tradehistory_event_description a').html();\n\t\t\ttrade.partnerSteamID = null;\n\t\t\ttrade.partnerVanityURL = null;\n\t\t\ttrade.itemsReceived = [];\n\t\t\ttrade.itemsGiven = [];\n\n\t\t\tprofileLink = item.find('.tradehistory_event_description a').attr('href');\n\t\t\tif (profileLink.indexOf('/profiles/') != -1) {\n\t\t\t\ttrade.partnerSteamID = new SteamID(profileLink.match(/(\\d+)$/)[1]);\n\t\t\t} else {\n\t\t\t\ttrade.partnerVanityURL = profileLink.match(/\\/([^\\/]+)$/)[1];\n\t\t\t\tif (options.resolveVanityURLs && vanityURLs.indexOf(trade.partnerVanityURL) == -1) {\n\t\t\t\t\tvanityURLs.push(trade.partnerVanityURL);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titems = item.find('.history_item');\n\t\t\tfor (j = 0; j < items.length; j++) {\n\t\t\t\tmatch = body.match(new RegExp(\"HistoryPageCreateItemHover\\\\( '\" + $(items[j]).attr('id') + \"', (\\\\d+), '(\\\\d+)', '(\\\\d+|class_\\\\d+_instance_\\\\d+|class_\\\\d+)', '(\\\\d+)' \\\\);\"));\n\t\t\t\teconItem = historyInventory[match[1]][match[2]][match[3]];\n\n\t\t\t\tif ($(items[j]).attr('id').indexOf('received') != -1) {\n\t\t\t\t\ttrade.itemsReceived.push(new CEconItem(econItem));\n\t\t\t\t} else {\n\t\t\t\t\ttrade.itemsGiven.push(new CEconItem(econItem));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toutput.trades.push(trade);\n\t\t}\n\n\t\tif (options.resolveVanityURLs) {\n\t\t\tAsync.map(vanityURLs, Helpers.resolveVanityURL, function(err, results) {\n\t\t\t\tif (err) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (i = 0; i < output.trades.length; i++) {\n\t\t\t\t\tif (output.trades[i].partnerSteamID || !output.trades[i].partnerVanityURL) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Find the vanity URL\n\t\t\t\t\tfor (j = 0; j < results.length; j++) {\n\t\t\t\t\t\tif (results[j].vanityURL == output.trades[i].partnerVanityURL) {\n\t\t\t\t\t\t\toutput.trades[i].partnerSteamID = new SteamID(results[j].steamID);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback(null, output);\n\t\t\t});\n\t\t} else {\n\t\t\tcallback(null, output);\n\t\t}\n\t}, \"steamcommunity\");\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/inventoryhistory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/login.js":
/*!*********************************************************!*\
  !*** ./node_modules/steamcommunity/components/login.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const {chrome} = __webpack_require__(/*! @doctormckay/user-agents */ \"(rsc)/./node_modules/@doctormckay/user-agents/index.js\");\r\n\r\nconst SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\r\n\r\n/**\r\n * @typedef LogOnDetails\r\n * @property {string} accountName\r\n * @property {string} password\r\n * @property {string} [steamguard]\r\n * @property {string} [authCode]\r\n * @property {string} [twoFactorCode]\r\n * @property {boolean} disableMobile\r\n */\r\n\r\n/**\r\n * @typedef LogOnResponse\r\n * @property {string} sessionID\r\n * @property {string[]} cookies\r\n * @property {string} steamguard\r\n * @property {string} [mobileAccessToken]\r\n */\r\n\r\n/**\r\n *\r\n * @param {LogOnDetails} logOnDetails\r\n * @returns {Promise<LogOnResponse>}\r\n * @private\r\n */\r\nSteamCommunity.prototype._modernLogin = function(logOnDetails) {\r\n\treturn new Promise(async (resolve, reject) => {\r\n\t\tif (!isNodeVersionNewEnough()) {\r\n\t\t\treturn reject(new Error(`Node.js version is too old! Need >=12.22.0 or later, got ${process.versions.node}.`));\r\n\t\t}\r\n\r\n\t\tif (this._options.request) {\r\n\t\t\treturn reject(new Error('SteamCommunity.login() is incompatible with node-steamcommunity v3\\'s usage of \\'request\\'. If you need to specify a custom \\'request\\' instance (e.g. when using a proxy), use https://www.npmjs.com/package/steam-session directly to log onto Steam.'));\r\n\t\t}\r\n\r\n\t\t// Import this here so we don't cause problems on old Node versions if this code path isn't taken.\r\n\t\tconst {LoginSession, EAuthTokenPlatformType, EAuthSessionGuardType} = __webpack_require__(/*! steam-session */ \"(rsc)/./node_modules/steam-session/dist/index.js\");\r\n\r\n\t\tlet session = new LoginSession(\r\n\t\t\tlogOnDetails.disableMobile\r\n\t\t\t\t? EAuthTokenPlatformType.WebBrowser\r\n\t\t\t\t: EAuthTokenPlatformType.MobileApp,\r\n\t\t\t{\r\n\t\t\t\tlocalAddress: this._options.localAddress,\r\n\t\t\t\tuserAgent: this._options.userAgent || chrome()\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tsession.on('authenticated', async () => {\r\n\t\t\ttry {\r\n\t\t\t\tlet webCookies = await session.getWebCookies();\r\n\t\t\t\tlet sessionIdCookie = webCookies.find(c => c.startsWith('sessionid='));\r\n\t\t\t\tresolve({\r\n\t\t\t\t\tsessionID: sessionIdCookie.split('=')[1].split(';')[0].trim(),\r\n\t\t\t\t\tcookies: webCookies,\r\n\t\t\t\t\tsteamguard: session.steamGuardMachineToken,\r\n\t\t\t\t\tmobileAccessToken: logOnDetails.disableMobile ? null : session.accessToken\r\n\t\t\t\t});\r\n\t\t\t} catch (ex) {\r\n\t\t\t\treject(ex);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsession.on('error', (err) => {\r\n\t\t\treject(err);\r\n\t\t});\r\n\r\n\t\ttry {\r\n\t\t\tlet startResult = await session.startWithCredentials({\r\n\t\t\t\taccountName: logOnDetails.accountName,\r\n\t\t\t\tpassword: logOnDetails.password,\r\n\t\t\t\tsteamGuardMachineToken: logOnDetails.steamguard,\r\n\t\t\t\tsteamGuardCode: logOnDetails.authCode || logOnDetails.twoFactorCode\r\n\t\t\t});\r\n\r\n\t\t\tif (startResult.actionRequired) {\r\n\t\t\t\t// Cannot continue with login, need something from the user\r\n\t\t\t\tsession.cancelLoginAttempt();\r\n\r\n\t\t\t\tlet emailMfaAction = startResult.validActions.find(action => action.type == EAuthSessionGuardType.EmailCode);\r\n\t\t\t\tif (emailMfaAction) {\r\n\t\t\t\t\tlet err = new Error('SteamGuard');\r\n\t\t\t\t\terr.emaildomain = emailMfaAction.detail;\r\n\t\t\t\t\treturn reject(err);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn reject(new Error('SteamGuardMobile'));\r\n\t\t\t}\r\n\t\t} catch (ex) {\r\n\t\t\treturn reject(ex);\r\n\t\t}\r\n\t});\r\n};\r\n\r\nfunction isNodeVersionNewEnough() {\r\n\tlet [major, minor] = process.versions.node.split('.');\r\n\r\n\tif (major < 12) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (major == 12 && minor < 22) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvY29tcG9uZW50cy9sb2dpbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFFBQVEsRUFBRSxtQkFBTyxDQUFDLHdGQUEwQjtBQUNuRDtBQUNBLHVCQUF1QixtQkFBTyxDQUFDLGlFQUFhO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsVUFBVTtBQUN4QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLHNCQUFzQjtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsNkRBQTZELEVBQUUsbUJBQU8sQ0FBQyx1RUFBZTtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jczItc2tpbi10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3N0ZWFtY29tbXVuaXR5L2NvbXBvbmVudHMvbG9naW4uanM/NTljZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7Y2hyb21lfSA9IHJlcXVpcmUoJ0Bkb2N0b3JtY2theS91c2VyLWFnZW50cycpO1xyXG5cclxuY29uc3QgU3RlYW1Db21tdW5pdHkgPSByZXF1aXJlKCcuLi9pbmRleC5qcycpO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlZGVmIExvZ09uRGV0YWlsc1xyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYWNjb3VudE5hbWVcclxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBhc3N3b3JkXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc3RlYW1ndWFyZF1cclxuICogQHByb3BlcnR5IHtzdHJpbmd9IFthdXRoQ29kZV1cclxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt0d29GYWN0b3JDb2RlXVxyXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGRpc2FibGVNb2JpbGVcclxuICovXHJcblxyXG4vKipcclxuICogQHR5cGVkZWYgTG9nT25SZXNwb25zZVxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc2Vzc2lvbklEXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IGNvb2tpZXNcclxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0ZWFtZ3VhcmRcclxuICogQHByb3BlcnR5IHtzdHJpbmd9IFttb2JpbGVBY2Nlc3NUb2tlbl1cclxuICovXHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHtMb2dPbkRldGFpbHN9IGxvZ09uRGV0YWlsc1xyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxMb2dPblJlc3BvbnNlPn1cclxuICogQHByaXZhdGVcclxuICovXHJcblN0ZWFtQ29tbXVuaXR5LnByb3RvdHlwZS5fbW9kZXJuTG9naW4gPSBmdW5jdGlvbihsb2dPbkRldGFpbHMpIHtcclxuXHRyZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0aWYgKCFpc05vZGVWZXJzaW9uTmV3RW5vdWdoKCkpIHtcclxuXHRcdFx0cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYE5vZGUuanMgdmVyc2lvbiBpcyB0b28gb2xkISBOZWVkID49MTIuMjIuMCBvciBsYXRlciwgZ290ICR7cHJvY2Vzcy52ZXJzaW9ucy5ub2RlfS5gKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuX29wdGlvbnMucmVxdWVzdCkge1xyXG5cdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBFcnJvcignU3RlYW1Db21tdW5pdHkubG9naW4oKSBpcyBpbmNvbXBhdGlibGUgd2l0aCBub2RlLXN0ZWFtY29tbXVuaXR5IHYzXFwncyB1c2FnZSBvZiBcXCdyZXF1ZXN0XFwnLiBJZiB5b3UgbmVlZCB0byBzcGVjaWZ5IGEgY3VzdG9tIFxcJ3JlcXVlc3RcXCcgaW5zdGFuY2UgKGUuZy4gd2hlbiB1c2luZyBhIHByb3h5KSwgdXNlIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3N0ZWFtLXNlc3Npb24gZGlyZWN0bHkgdG8gbG9nIG9udG8gU3RlYW0uJykpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEltcG9ydCB0aGlzIGhlcmUgc28gd2UgZG9uJ3QgY2F1c2UgcHJvYmxlbXMgb24gb2xkIE5vZGUgdmVyc2lvbnMgaWYgdGhpcyBjb2RlIHBhdGggaXNuJ3QgdGFrZW4uXHJcblx0XHRjb25zdCB7TG9naW5TZXNzaW9uLCBFQXV0aFRva2VuUGxhdGZvcm1UeXBlLCBFQXV0aFNlc3Npb25HdWFyZFR5cGV9ID0gcmVxdWlyZSgnc3RlYW0tc2Vzc2lvbicpO1xyXG5cclxuXHRcdGxldCBzZXNzaW9uID0gbmV3IExvZ2luU2Vzc2lvbihcclxuXHRcdFx0bG9nT25EZXRhaWxzLmRpc2FibGVNb2JpbGVcclxuXHRcdFx0XHQ/IEVBdXRoVG9rZW5QbGF0Zm9ybVR5cGUuV2ViQnJvd3NlclxyXG5cdFx0XHRcdDogRUF1dGhUb2tlblBsYXRmb3JtVHlwZS5Nb2JpbGVBcHAsXHJcblx0XHRcdHtcclxuXHRcdFx0XHRsb2NhbEFkZHJlc3M6IHRoaXMuX29wdGlvbnMubG9jYWxBZGRyZXNzLFxyXG5cdFx0XHRcdHVzZXJBZ2VudDogdGhpcy5fb3B0aW9ucy51c2VyQWdlbnQgfHwgY2hyb21lKClcclxuXHRcdFx0fVxyXG5cdFx0KTtcclxuXHJcblx0XHRzZXNzaW9uLm9uKCdhdXRoZW50aWNhdGVkJywgYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGxldCB3ZWJDb29raWVzID0gYXdhaXQgc2Vzc2lvbi5nZXRXZWJDb29raWVzKCk7XHJcblx0XHRcdFx0bGV0IHNlc3Npb25JZENvb2tpZSA9IHdlYkNvb2tpZXMuZmluZChjID0+IGMuc3RhcnRzV2l0aCgnc2Vzc2lvbmlkPScpKTtcclxuXHRcdFx0XHRyZXNvbHZlKHtcclxuXHRcdFx0XHRcdHNlc3Npb25JRDogc2Vzc2lvbklkQ29va2llLnNwbGl0KCc9JylbMV0uc3BsaXQoJzsnKVswXS50cmltKCksXHJcblx0XHRcdFx0XHRjb29raWVzOiB3ZWJDb29raWVzLFxyXG5cdFx0XHRcdFx0c3RlYW1ndWFyZDogc2Vzc2lvbi5zdGVhbUd1YXJkTWFjaGluZVRva2VuLFxyXG5cdFx0XHRcdFx0bW9iaWxlQWNjZXNzVG9rZW46IGxvZ09uRGV0YWlscy5kaXNhYmxlTW9iaWxlID8gbnVsbCA6IHNlc3Npb24uYWNjZXNzVG9rZW5cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSBjYXRjaCAoZXgpIHtcclxuXHRcdFx0XHRyZWplY3QoZXgpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRzZXNzaW9uLm9uKCdlcnJvcicsIChlcnIpID0+IHtcclxuXHRcdFx0cmVqZWN0KGVycik7XHJcblx0XHR9KTtcclxuXHJcblx0XHR0cnkge1xyXG5cdFx0XHRsZXQgc3RhcnRSZXN1bHQgPSBhd2FpdCBzZXNzaW9uLnN0YXJ0V2l0aENyZWRlbnRpYWxzKHtcclxuXHRcdFx0XHRhY2NvdW50TmFtZTogbG9nT25EZXRhaWxzLmFjY291bnROYW1lLFxyXG5cdFx0XHRcdHBhc3N3b3JkOiBsb2dPbkRldGFpbHMucGFzc3dvcmQsXHJcblx0XHRcdFx0c3RlYW1HdWFyZE1hY2hpbmVUb2tlbjogbG9nT25EZXRhaWxzLnN0ZWFtZ3VhcmQsXHJcblx0XHRcdFx0c3RlYW1HdWFyZENvZGU6IGxvZ09uRGV0YWlscy5hdXRoQ29kZSB8fCBsb2dPbkRldGFpbHMudHdvRmFjdG9yQ29kZVxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGlmIChzdGFydFJlc3VsdC5hY3Rpb25SZXF1aXJlZCkge1xyXG5cdFx0XHRcdC8vIENhbm5vdCBjb250aW51ZSB3aXRoIGxvZ2luLCBuZWVkIHNvbWV0aGluZyBmcm9tIHRoZSB1c2VyXHJcblx0XHRcdFx0c2Vzc2lvbi5jYW5jZWxMb2dpbkF0dGVtcHQoKTtcclxuXHJcblx0XHRcdFx0bGV0IGVtYWlsTWZhQWN0aW9uID0gc3RhcnRSZXN1bHQudmFsaWRBY3Rpb25zLmZpbmQoYWN0aW9uID0+IGFjdGlvbi50eXBlID09IEVBdXRoU2Vzc2lvbkd1YXJkVHlwZS5FbWFpbENvZGUpO1xyXG5cdFx0XHRcdGlmIChlbWFpbE1mYUFjdGlvbikge1xyXG5cdFx0XHRcdFx0bGV0IGVyciA9IG5ldyBFcnJvcignU3RlYW1HdWFyZCcpO1xyXG5cdFx0XHRcdFx0ZXJyLmVtYWlsZG9tYWluID0gZW1haWxNZmFBY3Rpb24uZGV0YWlsO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJlamVjdChlcnIpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ1N0ZWFtR3VhcmRNb2JpbGUnKSk7XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2ggKGV4KSB7XHJcblx0XHRcdHJldHVybiByZWplY3QoZXgpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gaXNOb2RlVmVyc2lvbk5ld0Vub3VnaCgpIHtcclxuXHRsZXQgW21ham9yLCBtaW5vcl0gPSBwcm9jZXNzLnZlcnNpb25zLm5vZGUuc3BsaXQoJy4nKTtcclxuXHJcblx0aWYgKG1ham9yIDwgMTIpIHtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGlmIChtYWpvciA9PSAxMiAmJiBtaW5vciA8IDIyKSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdHJ1ZTtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/login.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/market.js":
/*!**********************************************************!*\
  !*** ./node_modules/steamcommunity/components/market.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\nconst Cheerio = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/index.js\");\n\nconst Helpers = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/steamcommunity/components/helpers.js\");\n\n/**\n * Get a list of all apps on the market\n * @param {function} callback - First argument is null|Error, second is an object of appid => name\n */\nSteamCommunity.prototype.getMarketApps = function(callback) {\n\tvar self = this;\n\tthis.httpRequest('https://steamcommunity.com/market/', function (err, response, body) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tvar $ = Cheerio.load(body);\n\t\tif ($('.market_search_game_button_group')) {\n\t\t\tlet apps = {};\n\t\t\t$('.market_search_game_button_group a.game_button').each(function (i, element) {\n\t\t\t\tvar e = Cheerio.load(element);\n\t\t\t\tvar name = e('.game_button_game_name').text().trim();\n\t\t\t\tvar url = element.attribs.href;\n\t\t\t\tvar appid = url.substr(url.indexOf('=') + 1);\n\t\t\t\tapps[appid] = name;\n\t\t\t});\n\t\t\tcallback(null, apps);\n\t\t} else {\n\t\t\tcallback(new Error(\"Malformed response\"));\n\t\t}\n\t}, \"steamcommunity\");\n};\n\n/**\n * Check if an item is eligible to be turned into gems and if so, get its gem value\n * @param {int} appid\n * @param {int|string} assetid\n * @param {function} callback\n */\nSteamCommunity.prototype.getGemValue = function(appid, assetid, callback) {\n\tthis._myProfile({\n\t\t\"endpoint\": \"ajaxgetgoovalue/\",\n\t\t\"qs\": {\n\t\t\t\"sessionid\": this.getSessionID(),\n\t\t\t\"appid\": appid,\n\t\t\t\"contextid\": 6,\n\t\t\t\"assetid\": assetid\n\t\t},\n\t\t\"checkHttpError\": false,\n\t\t\"json\": true\n\t}, null, (err, res, body) => {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (body.success && body.success != SteamCommunity.EResult.OK) {\n\t\t\tlet err = new Error(body.message || SteamCommunity.EResult[body.success]);\n\t\t\terr.eresult = err.code = body.success;\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!body.goo_value || !body.strTitle) {\n\t\t\tcallback(new Error(\"Malformed response\"));\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(null, {\"promptTitle\": body.strTitle, \"gemValue\": parseInt(body.goo_value, 10)});\n\t});\n};\n\n/**\n * Turn an eligible item into gems.\n * @param {int} appid\n * @param {int|string} assetid\n * @param {int} expectedGemsValue\n * @param {function} callback\n */\nSteamCommunity.prototype.turnItemIntoGems = function(appid, assetid, expectedGemsValue, callback) {\n\tthis._myProfile({\n\t\t\"endpoint\": \"ajaxgrindintogoo/\",\n\t\t\"json\": true,\n\t\t\"checkHttpError\": false\n\t}, {\n\t\t\"appid\": appid,\n\t\t\"contextid\": 6,\n\t\t\"assetid\": assetid,\n\t\t\"goo_value_expected\": expectedGemsValue,\n\t\t\"sessionid\": this.getSessionID()\n\t}, (err, res, body) => {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (body.success && body.success != SteamCommunity.EResult.OK) {\n\t\t\tlet err = new Error(body.message || SteamCommunity.EResult[body.success]);\n\t\t\terr.eresult = err.code = body.success;\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!body['goo_value_received '] || !body.goo_value_total) { // lol valve\n\t\t\tcallback(new Error(\"Malformed response\"));\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(null, {\"gemsReceived\": parseInt(body['goo_value_received '], 10), \"totalGems\": parseInt(body.goo_value_total, 10)});\n\t})\n};\n\n/**\n * Open a booster pack.\n * @param {int} appid\n * @param {int|string} assetid\n * @param {function} callback\n */\nSteamCommunity.prototype.openBoosterPack = function(appid, assetid, callback) {\n\tthis._myProfile({\n\t\t\"endpoint\": \"ajaxunpackbooster/\",\n\t\t\"json\": true,\n\t\t\"checkHttpError\": false\n\t}, {\n\t\t\"appid\": appid,\n\t\t\"communityitemid\": assetid,\n\t\t\"sessionid\": this.getSessionID()\n\t}, (err, res, body) => {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (body.success && body.success != SteamCommunity.EResult.OK) {\n\t\t\tlet err = new Error(body.message || SteamCommunity.EResult[body.success]);\n\t\t\terr.eresult = err.code = body.success;\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!body.rgItems) {\n\t\t\tcallback(new Error(\"Malformed response\"));\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(null, body.rgItems);\n\t})\n};\n\n/**\n * Get the booster pack catalog to see what booster packs you can create\n * @param {function} callback\n */\nSteamCommunity.prototype.getBoosterPackCatalog = function(callback) {\n\tthis.httpRequestGet('https://steamcommunity.com/tradingcards/boostercreator/', (err, res, body) => {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tlet idx = body.indexOf('CBoosterCreatorPage.Init(');\n\t\tif (idx == -1) {\n\t\t\tcallback(new Error('Malformed response'));\n\t\t\treturn;\n\t\t}\n\n\t\tlet lines = body.slice(idx).split('\\n').map(l => l.trim());\n\n\t\tfor (let i = 1; i <= 4; i++) {\n\t\t\tif (typeof lines[i] != 'string' || !lines[i].match(/,$/)) {\n\t\t\t\tlet err = new Error('Malformed response');\n\t\t\t\terr.line = i;\n\t\t\t\tcallback(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlines[i] = lines[i].replace(/,$/, '');\n\t\t}\n\n\t\tlet boosterPackCatalog, totalGems, tradableGems, untradableGems;\n\t\ttry {\n\t\t\tboosterPackCatalog = JSON.parse(lines[1]);\n\t\t\ttotalGems = parseInt(lines[2].match(/\\d+/)[0], 10);\n\t\t\ttradableGems = parseInt(lines[3].match(/\\d+/)[0], 10);\n\t\t\tuntradableGems = parseInt(lines[4].match(/\\d+/)[0], 10);\n\t\t} catch (ex) {\n\t\t\tlet err = new Error('Malformed response');\n\t\t\terr.inner = ex;\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tlet keyedCatalog = {};\n\t\tboosterPackCatalog.forEach((app) => {\n\t\t\tapp.price = parseInt(app.price, 10);\n\t\t\tapp.unavailable = app.unavailable || false;\n\t\t\tapp.availableAtTime = app.available_at_time || null;\n\n\t\t\tif (typeof app.availableAtTime == 'string') {\n\t\t\t\tapp.availableAtTime = Helpers.decodeSteamTime(app.availableAtTime);\n\t\t\t}\n\n\t\t\tdelete app.available_at_time;\n\n\t\t\tkeyedCatalog[app.appid] = app;\n\t\t});\n\n\t\tcallback(null, {\n\t\t\ttotalGems,\n\t\t\ttradableGems,\n\t\t\tuntradableGems,\n\t\t\tcatalog: keyedCatalog\n\t\t});\n\t});\n};\n\n/**\n * Create a booster pack using gems.\n * @param {int} appid\n * @param {boolean} [useUntradableGems=false]\n * @param callback\n */\nSteamCommunity.prototype.createBoosterPack = function(appid, useUntradableGems, callback) {\n\tif (typeof useUntradableGems == 'function') {\n\t\tcallback = useUntradableGems;\n\t\tuseUntradableGems = false;\n\t}\n\n\tthis.httpRequestPost({\n\t\turi: 'https://steamcommunity.com/tradingcards/ajaxcreatebooster/',\n\t\tform: {\n\t\t\tsessionid: this.getSessionID(),\n\t\t\tappid,\n\t\t\tseries: 1,\n\t\t\t// tradability_preference can be a value 1-3\n\t\t\t// 1: Prefer using tradable gems, but use untradable if necessary\n\t\t\t// 2: Only use tradable gems\n\t\t\t// 3: Prefer using untradable gems, but use tradable if necessary\n\t\t\ttradability_preference: useUntradableGems ? 3 : 2\n\t\t},\n\t\tjson: true,\n\t\tcheckHttpError: false\n\t}, (err, res, body) => {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (body.purchase_eresult && body.purchase_eresult != 1) {\n\t\t\tcallback(Helpers.eresultError(body.purchase_eresult));\n\t\t\treturn;\n\t\t}\n\n\t\t// We can now check HTTP status codes\n\t\tif (this._checkHttpError(err, res, callback, body)) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(null, {\n\t\t\ttotalGems: parseInt(body.goo_amount, 10),\n\t\t\ttradableGems: parseInt(body.tradable_goo_amount, 10),\n\t\t\tuntradableGems: parseInt(body.untradable_goo_amount, 10),\n\t\t\tresultItem: body.purchase_result\n\t\t});\n\t});\n};\n\n/**\n * Get details about a gift in your inventory.\n * @param {string} giftID\n * @param {function} callback\n */\nSteamCommunity.prototype.getGiftDetails = function(giftID, callback) {\n\tthis.httpRequestPost({\n\t\t\"uri\": \"https://steamcommunity.com/gifts/\" + giftID + \"/validateunpack\",\n\t\t\"form\": {\n\t\t\t\"sessionid\": this.getSessionID()\n\t\t},\n\t\t\"json\": true\n\t}, (err, res, body) => {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (body.success && body.success != SteamCommunity.EResult.OK) {\n\t\t\tlet err = new Error(body.message || SteamCommunity.EResult[body.success]);\n\t\t\terr.eresult = err.code = body.success;\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!body.packageid || !body.gift_name) {\n\t\t\tcallback(new Error(\"Malformed response\"));\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(null, {\n\t\t\t\"giftName\": body.gift_name,\n\t\t\t\"packageID\": parseInt(body.packageid, 10),\n\t\t\t\"owned\": body.owned\n\t\t});\n\t});\n};\n\n/**\n * Unpack a gift in your inventory to your library.\n * @param {string} giftID\n * @param {function} callback\n */\nSteamCommunity.prototype.redeemGift = function(giftID, callback) {\n\tthis.httpRequestPost({\n\t\t\"uri\": \"https://steamcommunity.com/gifts/\" + giftID + \"/unpack\",\n\t\t\"form\": {\n\t\t\t\"sessionid\": this.getSessionID()\n\t\t},\n\t\t\"json\": true\n\t}, (err, res, body) => {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (body.success && body.success != SteamCommunity.EResult.OK) {\n\n\t\t\tlet err = new Error(body.message || SteamCommunity.EResult[body.success]);\n\t\t\terr.eresult = err.code = body.success;\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(null);\n\t});\n};\n\n/**\n * @param {int|string} assetid\n * @param {int} denominationIn\n * @param {int} denominationOut\n * @param {int} quantityIn\n * @param {int} quantityOut\n * @param {function} callback\n * @private\n */\nSteamCommunity.prototype._gemExchange = function(assetid, denominationIn, denominationOut, quantityIn, quantityOut, callback) {\n\tthis._myProfile({\n\t\tendpoint: 'ajaxexchangegoo/',\n\t\tjson: true,\n\t\tcheckHttpError: false\n\t}, {\n\t\tappid: 753,\n\t\tassetid,\n\t\tgoo_denomination_in: denominationIn,\n\t\tgoo_amount_in: quantityIn,\n\t\tgoo_denomination_out: denominationOut,\n\t\tgoo_amount_out_expected: quantityOut,\n\t\tsessionid: this.getSessionID()\n\t}, (err, res, body) => {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(Helpers.eresultError(body.success));\n\t});\n};\n\n/**\n * Pack gems into sack of gems.\n * @param {int|string} assetid - ID of gem stack you want to pack into sacks\n * @param {int} desiredSackCount - How many sacks you want. You must have at least this amount * 1000 gems in the stack you're packing\n * @param {function} callback\n */\nSteamCommunity.prototype.packGemSacks = function(assetid, desiredSackCount, callback) {\n\tthis._gemExchange(assetid, 1, 1000, desiredSackCount * 1000, desiredSackCount, callback);\n};\n\n/**\n * Unpack sack of gems into gems.\n * @param {int|string} assetid - ID of sack stack you want to unpack (say that 5 times fast)\n * @param {int} sacksToUnpack\n * @param {function} callback\n */\nSteamCommunity.prototype.unpackGemSacks = function(assetid, sacksToUnpack, callback) {\n\tthis._gemExchange(assetid, 1000, 1, sacksToUnpack, sacksToUnpack * 1000, callback);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/market.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/profile.js":
/*!***********************************************************!*\
  !*** ./node_modules/steamcommunity/components/profile.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const Cheerio = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/index.js\");\nconst FS = __webpack_require__(/*! fs */ \"fs\");\nconst SteamID = __webpack_require__(/*! steamid */ \"(rsc)/./node_modules/steamid/index.js\");\n\nconst Helpers = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/steamcommunity/components/helpers.js\");\nconst SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\n\nSteamCommunity.PrivacyState = {\n\t\"Private\": 1,\n\t\"FriendsOnly\": 2,\n\t\"Public\": 3\n};\n\nvar CommentPrivacyState = {\n\t\"1\": 2,         // private\n\t\"2\": 0,         // friends only\n\t\"3\": 1          // anyone\n};\n\nSteamCommunity.prototype.setupProfile = function(callback) {\n\tvar self = this;\n\tthis._myProfile(\"edit?welcomed=1\", null, function(err, response, body) {\n\t\tif(!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tif(err || response.statusCode != 200) {\n\t\t\tcallback(err || new Error(\"HTTP error \" + response.statusCode));\n\t\t} else {\n\t\t\tcallback(null);\n\t\t}\n\t});\n};\n\nSteamCommunity.prototype.editProfile = function(settings, callback) {\n\tvar self = this;\n\tthis._myProfile('edit/info', null, function(err, response, body) {\n\t\tif (err || response.statusCode != 200) {\n\t\t\tif (callback) {\n\t\t\t\tcallback(err || new Error('HTTP error ' + response.statusCode));\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvar $ = Cheerio.load(body);\n\t\tvar existingSettings = $('#profile_edit_config').data('profile-edit');\n\t\tif (!existingSettings || !existingSettings.strPersonaName) {\n\t\t\tif (callback) {\n\t\t\t\tcallback(new Error('Malformed response'));\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvar values = {\n\t\t\tsessionID: self.getSessionID(),\n\t\t\ttype: 'profileSave',\n\t\t\tweblink_1_title: '',\n\t\t\tweblink_1_url: '',\n\t\t\tweblink_2_title: '',\n\t\t\tweblink_2_url: '',\n\t\t\tweblink_3_title: '',\n\t\t\tweblink_3_url: '',\n\t\t\tpersonaName: existingSettings.strPersonaName,\n\t\t\treal_name: existingSettings.strRealName,\n\t\t\tsummary: existingSettings.strSummary,\n\t\t\tcountry: existingSettings.LocationData.locCountryCode,\n\t\t\tstate: existingSettings.LocationData.locStateCode,\n\t\t\tcity: existingSettings.LocationData.locCityCode,\n\t\t\tcustomURL: existingSettings.strCustomURL,\n\t\t\tjson: 1\n\t\t};\n\n\t\tfor (var i in settings) {\n\t\t\tif(!settings.hasOwnProperty(i)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tswitch(i) {\n\t\t\t\tcase 'name':\n\t\t\t\t\tvalues.personaName = settings[i];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'realName':\n\t\t\t\t\tvalues.real_name = settings[i];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'summary':\n\t\t\t\t\tvalues.summary = settings[i];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'country':\n\t\t\t\t\tvalues.country = settings[i];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'state':\n\t\t\t\t\tvalues.state = settings[i];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'city':\n\t\t\t\t\tvalues.city = settings[i];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'customURL':\n\t\t\t\t\tvalues.customURL = settings[i];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'primaryGroup':\n\t\t\t\t\tif(typeof settings[i] === 'object' && settings[i].getSteamID64) {\n\t\t\t\t\t\tvalues.primary_group_steamid = settings[i].getSteamID64();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalues.primary_group_steamid = new SteamID(settings[i]).getSteamID64();\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t// These don't work right now\n\t\t\t\t/*\n\t\t\t\tcase 'background':\n\t\t\t\t\t// The assetid of our desired profile background\n\t\t\t\t\tvalues.profile_background = settings[i];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'featuredBadge':\n\t\t\t\t\t// Currently, game badges aren't supported\n\t\t\t\t\tvalues.favorite_badge_badgeid = settings[i];\n\t\t\t\t\tbreak;\n\t\t\t\t*/\n\t\t\t\t// TODO: profile showcases\n\t\t\t}\n\t\t}\n\n\t\tself._myProfile('edit', values, function(err, response, body) {\n\t\t\tif (settings.customURL) {\n\t\t\t\tdelete self._profileURL;\n\t\t\t}\n\n\t\t\tif (!callback) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (err || response.statusCode != 200) {\n\t\t\t\tcallback(err || new Error('HTTP error ' + response.statusCode));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tvar json = JSON.parse(body);\n\t\t\t\tif (!json.success || json.success != 1) {\n\t\t\t\t\tcallback(new Error(json.errmsg || 'Request was not successful'));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcallback(null);\n\t\t\t} catch (ex) {\n\t\t\t\tcallback(ex);\n\t\t\t}\n\t\t});\n\t});\n};\n\nSteamCommunity.prototype.profileSettings = function(settings, callback) {\n\tthis._myProfile('edit/settings', null, (err, response, body) => {\n\t\tif (err || response.statusCode != 200) {\n\t\t\tif (callback) {\n\t\t\t\tcallback(err || new Error('HTTP error ' + response.statusCode));\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvar $ = Cheerio.load(body);\n\t\tvar existingSettings = $('#profile_edit_config').data('profile-edit');\n\t\tif (!existingSettings || !existingSettings.Privacy) {\n\t\t\tif (callback) {\n\t\t\t\tcallback(new Error('Malformed response'));\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// PrivacySettings => {PrivacyProfile, PrivacyInventory, PrivacyInventoryGifts, PrivacyOwnedGames, PrivacyPlaytime}\n\t\t// eCommentPermission\n\t\tvar privacy = existingSettings.Privacy.PrivacySettings;\n\t\tvar commentPermission = existingSettings.Privacy.eCommentPermission;\n\n\t\tfor (var i in settings) {\n\t\t\tif (!settings.hasOwnProperty(i)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tswitch (i) {\n\t\t\t\tcase 'profile':\n\t\t\t\t\tprivacy.PrivacyProfile = settings[i];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'comments':\n\t\t\t\t\tcommentPermission = CommentPrivacyState[settings[i]];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'inventory':\n\t\t\t\t\tprivacy.PrivacyInventory = settings[i];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'inventoryGifts':\n\t\t\t\t\tprivacy.PrivacyInventoryGifts = settings[i] ? SteamCommunity.PrivacyState.Private : SteamCommunity.PrivacyState.Public;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'gameDetails':\n\t\t\t\t\tprivacy.PrivacyOwnedGames = settings[i];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'playtime':\n\t\t\t\t\tprivacy.PrivacyPlaytime = settings[i] ? SteamCommunity.PrivacyState.Private : SteamCommunity.PrivacyState.Public;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'friendsList':\n\t\t\t\t\tprivacy.PrivacyFriendsList = settings[i];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._myProfile({\n\t\t\tmethod: 'POST',\n\t\t\tendpoint: 'ajaxsetprivacy/',\n\t\t\tjson: true,\n\t\t\tformData: { // it's multipart because lolvalve\n\t\t\t\tsessionid: this.getSessionID(),\n\t\t\t\tPrivacy: JSON.stringify(privacy),\n\t\t\t\teCommentPermission: commentPermission\n\t\t\t}\n\t\t}, null, function(err, response, body) {\n\t\t\tif (err || response.statusCode != 200) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback(err || new Error('HTTP error ' + response.statusCode));\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (body.success != 1) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback(new Error(body.success ? 'Error ' + body.success : 'Request was not successful'));\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (callback) {\n\t\t\t\tcallback(null, body.Privacy);\n\t\t\t}\n\t\t});\n\t});\n};\n\nSteamCommunity.prototype.uploadAvatar = function(image, format, callback) {\n\tif(typeof format === 'function') {\n\t\tcallback = format;\n\t\tformat = null;\n\t}\n\n\t// are we logged in?\n\tif (!this.steamID) {\n\t\tcallback(new Error(\"Not Logged In\"));\n\t\treturn;\n\t}\n\n\tvar self = this;\n\n\tif(image instanceof Buffer) {\n\t\tdoUpload(image);\n\t} else if(image.match(/^https?:\\/\\//)) {\n\t\tthis.httpRequestGet({\n\t\t\t\"uri\": image,\n\t\t\t\"encoding\": null\n\t\t}, function(err, response, body) {\n\t\t\tif(err || response.statusCode != 200) {\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback(err ? new Error(err.message + \" downloading image\") : new Error(\"HTTP error \" + response.statusCode + \" downloading image\"));\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(!format) {\n\t\t\t\tformat = response.headers['content-type'];\n\t\t\t}\n\n\t\t\tdoUpload(body);\n\t\t}, \"steamcommunity\");\n\t} else {\n\t\tif(!format) {\n\t\t\tformat = image.match(/\\.([^\\.]+)$/);\n\t\t\tif(format) {\n\t\t\t\tformat = format[1];\n\t\t\t}\n\t\t}\n\n\t\tFS.readFile(image, function(err, file) {\n\t\t\tif(err) {\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdoUpload(file);\n\t\t})\n\t}\n\n\tfunction doUpload(buffer) {\n\t\tif(!format) {\n\t\t\tif(callback) {\n\t\t\t\tcallback(new Error(\"Unknown image format\"));\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif(format.match(/^image\\//)) {\n\t\t\tformat = format.substring(6);\n\t\t}\n\n\t\tvar filename = '';\n\t\tvar contentType = '';\n\n\t\tswitch(format.toLowerCase()) {\n\t\t\tcase 'jpg':\n\t\t\tcase 'jpeg':\n\t\t\t\tfilename = 'avatar.jpg';\n\t\t\t\tcontentType = 'image/jpeg';\n\t\t\t\tbreak;\n\n\t\t\tcase 'png':\n\t\t\t\tfilename = 'avatar.png';\n\t\t\t\tcontentType = 'image/png';\n\t\t\t\tbreak;\n\n\t\t\tcase 'gif':\n\t\t\t\tfilename = 'avatar.gif';\n\t\t\t\tcontentType = 'image/gif';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback(new Error(\"Unknown or invalid image format\"));\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t}\n\n\t\tself.httpRequestPost({\n\t\t\t\"uri\": \"https://steamcommunity.com/actions/FileUploader\",\n\t\t\t\"formData\": {\n\t\t\t\t\"MAX_FILE_SIZE\": buffer.length,\n\t\t\t\t\"type\": \"player_avatar_image\",\n\t\t\t\t\"sId\": self.steamID.getSteamID64(),\n\t\t\t\t\"sessionid\": self.getSessionID(),\n\t\t\t\t\"doSub\": 1,\n\t\t\t\t\"json\": 1,\n\t\t\t\t\"avatar\": {\n\t\t\t\t\t\"value\": buffer,\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"filename\": filename,\n\t\t\t\t\t\t\"contentType\": contentType\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"json\": true\n\t\t}, function(err, response, body) {\n\t\t\tif(err) {\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(body && !body.success && body.message) {\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback(new Error(body.message));\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(response.statusCode != 200) {\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback(new Error(\"HTTP error \" + response.statusCode));\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(!body || !body.success) {\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback(new Error(\"Malformed response\"));\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(callback) {\n\t\t\t\tcallback(null, body.images.full);\n\t\t\t}\n\t\t}, \"steamcommunity\");\n\t}\n};\n\n/**\n * Post a new status to your profile activity feed.\n * @param {string} statusText - The text of this status update\n * @param {{appID: int}} [options] - Options for this status update. All are optional. If you don't pass any options, this can be omitted.\n * @param {function} callback - err, postID\n */\nSteamCommunity.prototype.postProfileStatus = function(statusText, options, callback) {\n\tif (typeof options === 'function') {\n\t\tcallback = options;\n\t\toptions = {};\n\t}\n\n\tthis._myProfile(\"ajaxpostuserstatus/\", {\n\t\t\"appid\": options.appID || 0,\n\t\t\"sessionid\": this.getSessionID(),\n\t\t\"status_text\": statusText\n\t}, (err, res, body) => {\n\t\ttry {\n\t\t\tbody = JSON.parse(body);\n\t\t\tif (body.message) {\n\t\t\t\tcallback(new Error(body.message));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar match = body.blotter_html.match(/id=\"userstatus_(\\d+)_/);\n\t\t\tif (!match) {\n\t\t\t\tcallback(new Error(\"Malformed response\"));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcallback(null, parseInt(match[1], 10));\n\t\t} catch (ex) {\n\t\t\tcallback(ex);\n\t\t}\n\t});\n};\n\n/**\n * Delete a previously-posted profile status update.\n * @param {int} postID\n * @param {function} [callback]\n */\nSteamCommunity.prototype.deleteProfileStatus = function(postID, callback) {\n\tthis._myProfile(\"ajaxdeleteuserstatus/\", {\n\t\t\"sessionid\": this.getSessionID(),\n\t\t\"postid\": postID\n\t}, (err, res, body) => {\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tbody = JSON.parse(body);\n\t\t\tif (!body.success) {\n\t\t\t\tcallback(new Error(\"Malformed response\"));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcallback(Helpers.eresultError(body.success));\n\t\t} catch (ex) {\n\t\t\tcallback(ex);\n\t\t}\n\t});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/profile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/sharedfiles.js":
/*!***************************************************************!*\
  !*** ./node_modules/steamcommunity/components/sharedfiles.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var SteamID = __webpack_require__(/*! steamid */ \"(rsc)/./node_modules/steamid/index.js\");\n\nvar SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\n\n\n/**\n * Deletes a comment from a sharedfile's comment section\n * @param {SteamID | String} userID - ID of the user associated to this sharedfile\n * @param {String} sharedFileId - ID of the sharedfile\n * @param {String} cid - ID of the comment to delete\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nSteamCommunity.prototype.deleteSharedFileComment = function(userID, sharedFileId, cid, callback) {\n\tif (typeof userID === \"string\") {\n\t\tuserID = new SteamID(userID);\n\t}\n\n\tthis.httpRequestPost({\n\t\t\"uri\": `https://steamcommunity.com/comment/PublishedFile_Public/delete/${userID.toString()}/${sharedFileId}/`,\n\t\t\"form\": {\n\t\t\t\"gidcomment\": cid,\n\t\t\t\"count\": 10,\n\t\t\t\"sessionid\": this.getSessionID()\n\t\t}\n\t}, function(err, response, body) {\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(err);\n\t}, \"steamcommunity\");\n};\n\n/**\n * Favorites a sharedfile\n * @param {String} sharedFileId - ID of the sharedfile\n * @param {String} appid - ID of the app associated to this sharedfile\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nSteamCommunity.prototype.favoriteSharedFile = function(sharedFileId, appid, callback) {\n\tthis.httpRequestPost({\n\t\t\"uri\": \"https://steamcommunity.com/sharedfiles/favorite\",\n\t\t\"form\": {\n\t\t\t\"id\": sharedFileId,\n\t\t\t\"appid\": appid,\n\t\t\t\"sessionid\": this.getSessionID()\n\t\t}\n\t}, function(err, response, body) {\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(err);\n\t}, \"steamcommunity\");\n};\n\n/**\n * Posts a comment to a sharedfile\n * @param {SteamID | String} userID - ID of the user associated to this sharedfile\n * @param {String} sharedFileId - ID of the sharedfile\n * @param {String} message - Content of the comment to post\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nSteamCommunity.prototype.postSharedFileComment = function(userID, sharedFileId, message, callback) {\n\tif (typeof userID === \"string\") {\n\t\tuserID = new SteamID(userID);\n\t}\n\n\tthis.httpRequestPost({\n\t\t\"uri\": `https://steamcommunity.com/comment/PublishedFile_Public/post/${userID.toString()}/${sharedFileId}/`,\n\t\t\"form\": {\n\t\t\t\"comment\": message,\n\t\t\t\"count\": 10,\n\t\t\t\"sessionid\": this.getSessionID()\n\t\t}\n\t}, function(err, response, body) {\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(err);\n\t}, \"steamcommunity\");\n};\n\n/**\n * Subscribes to a sharedfile's comment section. Note: Checkbox on webpage does not update\n * @param {SteamID | String} userID ID of the user associated to this sharedfile\n * @param {String} sharedFileId ID of the sharedfile\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nSteamCommunity.prototype.subscribeSharedFileComments = function(userID, sharedFileId, callback) {\n\tif (typeof userID === \"string\") {\n\t\tuserID = new SteamID(userID);\n\t}\n\n\tthis.httpRequestPost({\n\t\t\"uri\": `https://steamcommunity.com/comment/PublishedFile_Public/subscribe/${userID.toString()}/${sharedFileId}/`,\n\t\t\"form\": {\n\t\t\t\"count\": 10,\n\t\t\t\"sessionid\": this.getSessionID()\n\t\t}\n\t}, function(err, response, body) { // eslint-disable-line\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(err);\n\t}, \"steamcommunity\");\n};\n\n/**\n * Unfavorites a sharedfile\n * @param {String} sharedFileId - ID of the sharedfile\n * @param {String} appid - ID of the app associated to this sharedfile\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nSteamCommunity.prototype.unfavoriteSharedFile = function(sharedFileId, appid, callback) {\n\tthis.httpRequestPost({\n\t\t\"uri\": \"https://steamcommunity.com/sharedfiles/unfavorite\",\n\t\t\"form\": {\n\t\t\t\"id\": sharedFileId,\n\t\t\t\"appid\": appid,\n\t\t\t\"sessionid\": this.getSessionID()\n\t\t}\n\t}, function(err, response, body) {\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(err);\n\t}, \"steamcommunity\");\n};\n\n/**\n * Unsubscribes from a sharedfile's comment section. Note: Checkbox on webpage does not update\n * @param {SteamID | String} userID - ID of the user associated to this sharedfile\n * @param {String} sharedFileId - ID of the sharedfile\n * @param {function} callback - Takes only an Error object/null as the first argument\n */\nSteamCommunity.prototype.unsubscribeSharedFileComments = function(userID, sharedFileId, callback) {\n\tif (typeof userID === \"string\") {\n\t\tuserID = new SteamID(userID);\n\t}\n\n\tthis.httpRequestPost({\n\t\t\"uri\": `https://steamcommunity.com/comment/PublishedFile_Public/unsubscribe/${userID.toString()}/${sharedFileId}/`,\n\t\t\"form\": {\n\t\t\t\"count\": 10,\n\t\t\t\"sessionid\": this.getSessionID()\n\t\t}\n\t}, function(err, response, body) { // eslint-disable-line\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(err);\n\t}, \"steamcommunity\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/sharedfiles.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/twofactor.js":
/*!*************************************************************!*\
  !*** ./node_modules/steamcommunity/components/twofactor.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var SteamTotp = __webpack_require__(/*! steam-totp */ \"(rsc)/./node_modules/steamcommunity/node_modules/steam-totp/index.js\");\nvar SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\n\nvar ETwoFactorTokenType = {\n\tNone: 0,                  // No token-based two-factor authentication\n\tValveMobileApp: 1,        // Tokens generated using Valve's special charset (5 digits, alphanumeric)\n\tThirdParty: 2             // Tokens generated using literally everyone else's standard charset (6 digits, numeric). This is disabled.\n};\n\nSteamCommunity.prototype.enableTwoFactor = function(callback) {\n\tthis._verifyMobileAccessToken();\n\n\tif (!this.mobileAccessToken) {\n\t\tcallback(new Error('No mobile access token available. Provide one by calling setMobileAppAccessToken()'));\n\t\treturn;\n\t}\n\n\tthis.httpRequestPost({\n\t\turi: \"https://api.steampowered.com/ITwoFactorService/AddAuthenticator/v1/?access_token=\" + this.mobileAccessToken,\n\t\t// TODO: Send this as protobuf to more closely mimic official app behavior\n\t\tform: {\n\t\t\tsteamid: this.steamID.getSteamID64(),\n\t\t\tauthenticator_type: ETwoFactorTokenType.ValveMobileApp,\n\t\t\tdevice_identifier: SteamTotp.getDeviceID(this.steamID),\n\t\t\tsms_phone_id: '1',\n\t\t\tversion: 2\n\t\t},\n\t\tjson: true\n\t}, (err, response, body) => {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!body.response) {\n\t\t\tcallback(new Error('Malformed response'));\n\t\t\treturn;\n\t\t}\n\n\t\tif (body.response.status != 1) {\n\t\t\tvar error = new Error('Error ' + body.response.status);\n\t\t\terror.eresult = body.response.status;\n\t\t\tcallback(error);\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(null, body.response);\n\t}, 'steamcommunity');\n};\n\nSteamCommunity.prototype.finalizeTwoFactor = function(secret, activationCode, callback) {\n\tthis._verifyMobileAccessToken();\n\n\tif (!this.mobileAccessToken) {\n\t\tcallback(new Error('No mobile access token available. Provide one by calling setMobileAppAccessToken()'));\n\t\treturn;\n\t}\n\n\tlet attemptsLeft = 30;\n\tlet diff = 0;\n\n\tlet finalize = () => {\n\t\tlet code = SteamTotp.generateAuthCode(secret, diff);\n\n\t\tthis.httpRequestPost({\n\t\t\turi: 'https://api.steampowered.com/ITwoFactorService/FinalizeAddAuthenticator/v1/?access_token=' + this.mobileAccessToken,\n\t\t\tform: {\n\t\t\t\tsteamid: this.steamID.getSteamID64(),\n\t\t\t\tauthenticator_code: code,\n\t\t\t\tauthenticator_time: Math.floor(Date.now() / 1000),\n\t\t\t\tactivation_code: activationCode\n\t\t\t},\n\t\t\tjson: true\n\t\t}, function(err, response, body) {\n\t\t\tif (err) {\n\t\t\t\tcallback(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!body.response) {\n\t\t\t\tcallback(new Error('Malformed response'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tbody = body.response;\n\n\t\t\tif (body.server_time) {\n\t\t\t\tdiff = body.server_time - Math.floor(Date.now() / 1000);\n\t\t\t}\n\n\t\t\tif (body.status == 89) {\n\t\t\t\tcallback(new Error('Invalid activation code'));\n\t\t\t} else if(body.want_more) {\n\t\t\t\tattemptsLeft--;\n\t\t\t\tdiff += 30;\n\n\t\t\t\tfinalize();\n\t\t\t} else if(!body.success) {\n\t\t\t\tcallback(new Error('Error ' + body.status));\n\t\t\t} else {\n\t\t\t\tcallback(null);\n\t\t\t}\n\t\t}, 'steamcommunity');\n\t}\n\n\tSteamTotp.getTimeOffset(function(err, offset, latency) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tdiff = offset;\n\t\tfinalize();\n\t});\n};\n\nSteamCommunity.prototype.disableTwoFactor = function(revocationCode, callback) {\n\tthis._verifyMobileAccessToken();\n\n\tif (!this.mobileAccessToken) {\n\t\tcallback(new Error('No mobile access token available. Provide one by calling setMobileAppAccessToken()'));\n\t\treturn;\n\t}\n\n\tthis.httpRequestPost({\n\t\turi: 'https://api.steampowered.com/ITwoFactorService/RemoveAuthenticator/v1/?access_token=' + this.mobileAccessToken,\n\t\tform: {\n\t\t\tsteamid: this.steamID.getSteamID64(),\n\t\t\trevocation_code: revocationCode,\n\t\t\tsteamguard_scheme: 1\n\t\t},\n\t\tjson: true\n\t}, function(err, response, body) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!body.response) {\n\t\t\tcallback(new Error('Malformed response'));\n\t\t\treturn;\n\t\t}\n\n\t\tif (!body.response.success) {\n\t\t\tcallback(new Error('Request failed'));\n\t\t\treturn;\n\t\t}\n\n\t\t// success = true means it worked\n\t\tcallback(null);\n\t}, 'steamcommunity');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvY29tcG9uZW50cy90d29mYWN0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMsd0ZBQVk7QUFDcEMscUJBQXFCLG1CQUFPLENBQUMsaUVBQWE7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NzMi1za2luLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvY29tcG9uZW50cy90d29mYWN0b3IuanM/NWQxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RlYW1Ub3RwID0gcmVxdWlyZSgnc3RlYW0tdG90cCcpO1xudmFyIFN0ZWFtQ29tbXVuaXR5ID0gcmVxdWlyZSgnLi4vaW5kZXguanMnKTtcblxudmFyIEVUd29GYWN0b3JUb2tlblR5cGUgPSB7XG5cdE5vbmU6IDAsICAgICAgICAgICAgICAgICAgLy8gTm8gdG9rZW4tYmFzZWQgdHdvLWZhY3RvciBhdXRoZW50aWNhdGlvblxuXHRWYWx2ZU1vYmlsZUFwcDogMSwgICAgICAgIC8vIFRva2VucyBnZW5lcmF0ZWQgdXNpbmcgVmFsdmUncyBzcGVjaWFsIGNoYXJzZXQgKDUgZGlnaXRzLCBhbHBoYW51bWVyaWMpXG5cdFRoaXJkUGFydHk6IDIgICAgICAgICAgICAgLy8gVG9rZW5zIGdlbmVyYXRlZCB1c2luZyBsaXRlcmFsbHkgZXZlcnlvbmUgZWxzZSdzIHN0YW5kYXJkIGNoYXJzZXQgKDYgZGlnaXRzLCBudW1lcmljKS4gVGhpcyBpcyBkaXNhYmxlZC5cbn07XG5cblN0ZWFtQ29tbXVuaXR5LnByb3RvdHlwZS5lbmFibGVUd29GYWN0b3IgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXHR0aGlzLl92ZXJpZnlNb2JpbGVBY2Nlc3NUb2tlbigpO1xuXG5cdGlmICghdGhpcy5tb2JpbGVBY2Nlc3NUb2tlbikge1xuXHRcdGNhbGxiYWNrKG5ldyBFcnJvcignTm8gbW9iaWxlIGFjY2VzcyB0b2tlbiBhdmFpbGFibGUuIFByb3ZpZGUgb25lIGJ5IGNhbGxpbmcgc2V0TW9iaWxlQXBwQWNjZXNzVG9rZW4oKScpKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR0aGlzLmh0dHBSZXF1ZXN0UG9zdCh7XG5cdFx0dXJpOiBcImh0dHBzOi8vYXBpLnN0ZWFtcG93ZXJlZC5jb20vSVR3b0ZhY3RvclNlcnZpY2UvQWRkQXV0aGVudGljYXRvci92MS8/YWNjZXNzX3Rva2VuPVwiICsgdGhpcy5tb2JpbGVBY2Nlc3NUb2tlbixcblx0XHQvLyBUT0RPOiBTZW5kIHRoaXMgYXMgcHJvdG9idWYgdG8gbW9yZSBjbG9zZWx5IG1pbWljIG9mZmljaWFsIGFwcCBiZWhhdmlvclxuXHRcdGZvcm06IHtcblx0XHRcdHN0ZWFtaWQ6IHRoaXMuc3RlYW1JRC5nZXRTdGVhbUlENjQoKSxcblx0XHRcdGF1dGhlbnRpY2F0b3JfdHlwZTogRVR3b0ZhY3RvclRva2VuVHlwZS5WYWx2ZU1vYmlsZUFwcCxcblx0XHRcdGRldmljZV9pZGVudGlmaWVyOiBTdGVhbVRvdHAuZ2V0RGV2aWNlSUQodGhpcy5zdGVhbUlEKSxcblx0XHRcdHNtc19waG9uZV9pZDogJzEnLFxuXHRcdFx0dmVyc2lvbjogMlxuXHRcdH0sXG5cdFx0anNvbjogdHJ1ZVxuXHR9LCAoZXJyLCByZXNwb25zZSwgYm9keSkgPT4ge1xuXHRcdGlmIChlcnIpIHtcblx0XHRcdGNhbGxiYWNrKGVycik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCFib2R5LnJlc3BvbnNlKSB7XG5cdFx0XHRjYWxsYmFjayhuZXcgRXJyb3IoJ01hbGZvcm1lZCByZXNwb25zZScpKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoYm9keS5yZXNwb25zZS5zdGF0dXMgIT0gMSkge1xuXHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCdFcnJvciAnICsgYm9keS5yZXNwb25zZS5zdGF0dXMpO1xuXHRcdFx0ZXJyb3IuZXJlc3VsdCA9IGJvZHkucmVzcG9uc2Uuc3RhdHVzO1xuXHRcdFx0Y2FsbGJhY2soZXJyb3IpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNhbGxiYWNrKG51bGwsIGJvZHkucmVzcG9uc2UpO1xuXHR9LCAnc3RlYW1jb21tdW5pdHknKTtcbn07XG5cblN0ZWFtQ29tbXVuaXR5LnByb3RvdHlwZS5maW5hbGl6ZVR3b0ZhY3RvciA9IGZ1bmN0aW9uKHNlY3JldCwgYWN0aXZhdGlvbkNvZGUsIGNhbGxiYWNrKSB7XG5cdHRoaXMuX3ZlcmlmeU1vYmlsZUFjY2Vzc1Rva2VuKCk7XG5cblx0aWYgKCF0aGlzLm1vYmlsZUFjY2Vzc1Rva2VuKSB7XG5cdFx0Y2FsbGJhY2sobmV3IEVycm9yKCdObyBtb2JpbGUgYWNjZXNzIHRva2VuIGF2YWlsYWJsZS4gUHJvdmlkZSBvbmUgYnkgY2FsbGluZyBzZXRNb2JpbGVBcHBBY2Nlc3NUb2tlbigpJykpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGxldCBhdHRlbXB0c0xlZnQgPSAzMDtcblx0bGV0IGRpZmYgPSAwO1xuXG5cdGxldCBmaW5hbGl6ZSA9ICgpID0+IHtcblx0XHRsZXQgY29kZSA9IFN0ZWFtVG90cC5nZW5lcmF0ZUF1dGhDb2RlKHNlY3JldCwgZGlmZik7XG5cblx0XHR0aGlzLmh0dHBSZXF1ZXN0UG9zdCh7XG5cdFx0XHR1cmk6ICdodHRwczovL2FwaS5zdGVhbXBvd2VyZWQuY29tL0lUd29GYWN0b3JTZXJ2aWNlL0ZpbmFsaXplQWRkQXV0aGVudGljYXRvci92MS8/YWNjZXNzX3Rva2VuPScgKyB0aGlzLm1vYmlsZUFjY2Vzc1Rva2VuLFxuXHRcdFx0Zm9ybToge1xuXHRcdFx0XHRzdGVhbWlkOiB0aGlzLnN0ZWFtSUQuZ2V0U3RlYW1JRDY0KCksXG5cdFx0XHRcdGF1dGhlbnRpY2F0b3JfY29kZTogY29kZSxcblx0XHRcdFx0YXV0aGVudGljYXRvcl90aW1lOiBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKSxcblx0XHRcdFx0YWN0aXZhdGlvbl9jb2RlOiBhY3RpdmF0aW9uQ29kZVxuXHRcdFx0fSxcblx0XHRcdGpzb246IHRydWVcblx0XHR9LCBmdW5jdGlvbihlcnIsIHJlc3BvbnNlLCBib2R5KSB7XG5cdFx0XHRpZiAoZXJyKSB7XG5cdFx0XHRcdGNhbGxiYWNrKGVycik7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFib2R5LnJlc3BvbnNlKSB7XG5cdFx0XHRcdGNhbGxiYWNrKG5ldyBFcnJvcignTWFsZm9ybWVkIHJlc3BvbnNlJykpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGJvZHkgPSBib2R5LnJlc3BvbnNlO1xuXG5cdFx0XHRpZiAoYm9keS5zZXJ2ZXJfdGltZSkge1xuXHRcdFx0XHRkaWZmID0gYm9keS5zZXJ2ZXJfdGltZSAtIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYm9keS5zdGF0dXMgPT0gODkpIHtcblx0XHRcdFx0Y2FsbGJhY2sobmV3IEVycm9yKCdJbnZhbGlkIGFjdGl2YXRpb24gY29kZScpKTtcblx0XHRcdH0gZWxzZSBpZihib2R5LndhbnRfbW9yZSkge1xuXHRcdFx0XHRhdHRlbXB0c0xlZnQtLTtcblx0XHRcdFx0ZGlmZiArPSAzMDtcblxuXHRcdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdFx0fSBlbHNlIGlmKCFib2R5LnN1Y2Nlc3MpIHtcblx0XHRcdFx0Y2FsbGJhY2sobmV3IEVycm9yKCdFcnJvciAnICsgYm9keS5zdGF0dXMpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhbGxiYWNrKG51bGwpO1xuXHRcdFx0fVxuXHRcdH0sICdzdGVhbWNvbW11bml0eScpO1xuXHR9XG5cblx0U3RlYW1Ub3RwLmdldFRpbWVPZmZzZXQoZnVuY3Rpb24oZXJyLCBvZmZzZXQsIGxhdGVuY3kpIHtcblx0XHRpZiAoZXJyKSB7XG5cdFx0XHRjYWxsYmFjayhlcnIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRpZmYgPSBvZmZzZXQ7XG5cdFx0ZmluYWxpemUoKTtcblx0fSk7XG59O1xuXG5TdGVhbUNvbW11bml0eS5wcm90b3R5cGUuZGlzYWJsZVR3b0ZhY3RvciA9IGZ1bmN0aW9uKHJldm9jYXRpb25Db2RlLCBjYWxsYmFjaykge1xuXHR0aGlzLl92ZXJpZnlNb2JpbGVBY2Nlc3NUb2tlbigpO1xuXG5cdGlmICghdGhpcy5tb2JpbGVBY2Nlc3NUb2tlbikge1xuXHRcdGNhbGxiYWNrKG5ldyBFcnJvcignTm8gbW9iaWxlIGFjY2VzcyB0b2tlbiBhdmFpbGFibGUuIFByb3ZpZGUgb25lIGJ5IGNhbGxpbmcgc2V0TW9iaWxlQXBwQWNjZXNzVG9rZW4oKScpKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR0aGlzLmh0dHBSZXF1ZXN0UG9zdCh7XG5cdFx0dXJpOiAnaHR0cHM6Ly9hcGkuc3RlYW1wb3dlcmVkLmNvbS9JVHdvRmFjdG9yU2VydmljZS9SZW1vdmVBdXRoZW50aWNhdG9yL3YxLz9hY2Nlc3NfdG9rZW49JyArIHRoaXMubW9iaWxlQWNjZXNzVG9rZW4sXG5cdFx0Zm9ybToge1xuXHRcdFx0c3RlYW1pZDogdGhpcy5zdGVhbUlELmdldFN0ZWFtSUQ2NCgpLFxuXHRcdFx0cmV2b2NhdGlvbl9jb2RlOiByZXZvY2F0aW9uQ29kZSxcblx0XHRcdHN0ZWFtZ3VhcmRfc2NoZW1lOiAxXG5cdFx0fSxcblx0XHRqc29uOiB0cnVlXG5cdH0sIGZ1bmN0aW9uKGVyciwgcmVzcG9uc2UsIGJvZHkpIHtcblx0XHRpZiAoZXJyKSB7XG5cdFx0XHRjYWxsYmFjayhlcnIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICghYm9keS5yZXNwb25zZSkge1xuXHRcdFx0Y2FsbGJhY2sobmV3IEVycm9yKCdNYWxmb3JtZWQgcmVzcG9uc2UnKSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCFib2R5LnJlc3BvbnNlLnN1Y2Nlc3MpIHtcblx0XHRcdGNhbGxiYWNrKG5ldyBFcnJvcignUmVxdWVzdCBmYWlsZWQnKSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gc3VjY2VzcyA9IHRydWUgbWVhbnMgaXQgd29ya2VkXG5cdFx0Y2FsbGJhY2sobnVsbCk7XG5cdH0sICdzdGVhbWNvbW11bml0eScpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/twofactor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/users.js":
/*!*********************************************************!*\
  !*** ./node_modules/steamcommunity/components/users.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const Cheerio = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/index.js\");\r\nconst Crypto = __webpack_require__(/*! crypto */ \"crypto\");\r\nconst imageSize = __webpack_require__(/*! image-size */ \"(rsc)/./node_modules/image-size/dist/index.js\");\r\nconst SteamID = __webpack_require__(/*! steamid */ \"(rsc)/./node_modules/steamid/index.js\");\r\n\r\nconst SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\r\n\r\nconst CEconItem = __webpack_require__(/*! ../classes/CEconItem.js */ \"(rsc)/./node_modules/steamcommunity/classes/CEconItem.js\");\r\nconst Helpers = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/steamcommunity/components/helpers.js\");\r\n\r\nSteamCommunity.prototype.addFriend = function(userID, callback) {\r\n\tif(typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/actions/AddFriendAjax\",\r\n\t\t\"form\": {\r\n\t\t\t\"accept_invite\": 0,\r\n\t\t\t\"sessionID\": this.getSessionID(),\r\n\t\t\t\"steamid\": userID.toString()\r\n\t\t},\r\n\t\t\"json\": true\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(body.success) {\r\n\t\t\tcallback(null);\r\n\t\t} else {\r\n\t\t\tcallback(new Error(\"Unknown error\"));\r\n\t\t}\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.acceptFriendRequest = function(userID, callback) {\r\n\tif(typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/actions/AddFriendAjax\",\r\n\t\t\"form\": {\r\n\t\t\t\"accept_invite\": 1,\r\n\t\t\t\"sessionID\": this.getSessionID(),\r\n\t\t\t\"steamid\": userID.toString()\r\n\t\t}\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.removeFriend = function(userID, callback) {\r\n\tif(typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/actions/RemoveFriendAjax\",\r\n\t\t\"form\": {\r\n\t\t\t\"sessionID\": this.getSessionID(),\r\n\t\t\t\"steamid\": userID.toString()\r\n\t\t}\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.blockCommunication = function(userID, callback) {\r\n\tif(typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/actions/BlockUserAjax\",\r\n\t\t\"form\": {\r\n\t\t\t\"sessionID\": this.getSessionID(),\r\n\t\t\t\"steamid\": userID.toString()\r\n\t\t}\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.unblockCommunication = function(userID, callback) {\r\n\tif(typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tvar form = {\"action\": \"unignore\"};\r\n\tform['friends[' + userID.toString() + ']'] = 1;\r\n\r\n\tthis._myProfile('friends/blocked/', form, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(err || response.statusCode >= 400) {\r\n\t\t\tcallback(err || new Error(\"HTTP error \" + response.statusCode));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(null);\r\n\t});\r\n};\r\n\r\nSteamCommunity.prototype.postUserComment = function(userID, message, callback) {\r\n\tif(typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/comment/Profile/post/\" + userID.toString() + \"/-1\",\r\n\t\t\"form\": {\r\n\t\t\t\"comment\": message,\r\n\t\t\t\"count\": 1,\r\n\t\t\t\"sessionid\": this.getSessionID()\r\n\t\t},\r\n\t\t\"json\": true\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(body.success) {\r\n\t\t\tconst $ = Cheerio.load(body.comments_html);\r\n\t\t\tconst commentID = $('.commentthread_comment').attr('id').split('_')[1];\r\n\r\n\t\t\tcallback(null, commentID);\r\n\t\t} else if(body.error) {\r\n\t\t\tcallback(new Error(body.error));\r\n\t\t} else {\r\n\t\t\tcallback(new Error(\"Unknown error\"));\r\n\t\t}\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.deleteUserComment = function(userID, commentID, callback) {\r\n\tif(typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/comment/Profile/delete/\" + userID.toString() + \"/-1\",\r\n\t\t\"form\": {\r\n\t\t\t\"gidcomment\": commentID,\r\n\t\t\t\"start\": 0,\r\n\t\t\t\"count\": 1,\r\n\t\t\t\"sessionid\": this.getSessionID(),\r\n\t\t\t\"feature2\": -1\r\n\t\t},\r\n\t\t\"json\": true\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(body.success && !body.comments_html.includes(commentID)) {\r\n\t\t\tcallback(null);\r\n\t\t} else if(body.error) {\r\n\t\t\tcallback(new Error(body.error));\r\n\t\t} else if(body.comments_html.includes(commentID)) {\r\n\t\t\tcallback(new Error(\"Failed to delete comment\"));\r\n\t\t} else {\r\n\t\t\tcallback(new Error(\"Unknown error\"));\r\n\t\t}\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.getUserComments = function(userID, options, callback) {\r\n\tif(typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tif (typeof options === 'function') {\r\n\t\tcallback = options;\r\n\t\toptions = {};\r\n\t}\r\n\r\n\tvar form = Object.assign({\r\n\t\t\"start\": 0,\r\n\t\t\"count\": 0,\r\n\t\t\"feature2\": -1,\r\n\t\t\"sessionid\": this.getSessionID()\r\n\t}, options);\r\n\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/comment/Profile/render/\" + userID.toString() + \"/-1\",\r\n\t\t\"form\": form,\r\n\t\t\"json\": true\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(body.success) {\r\n\t\t\tconst $ = Cheerio.load(body.comments_html);\r\n\t\t\tconst comments = $(\".commentthread_comment.responsive_body_text[id]\").map((i, elem) => {\r\n\t\t\t\tvar $elem = $(elem),\r\n\t\t\t\t\t$commentContent = $elem.find(\".commentthread_comment_text\");\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: $elem.attr(\"id\").split(\"_\")[1],\r\n\t\t\t\t\tauthor: {\r\n\t\t\t\t\t\tsteamID: new SteamID(\"[U:1:\" + $elem.find(\"[data-miniprofile]\").data(\"miniprofile\") + \"]\"),\r\n\t\t\t\t\t\tname: $elem.find(\"bdi\").text(),\r\n\t\t\t\t\t\tavatar: $elem.find(\".playerAvatar img[src]\").attr(\"src\"),\r\n\t\t\t\t\t\tstate: $elem.find(\".playerAvatar\").attr(\"class\").split(\" \").pop()\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdate: new Date($elem.find(\".commentthread_comment_timestamp\").data(\"timestamp\") * 1000),\r\n\t\t\t\t\ttext: $commentContent.text().trim(),\r\n\t\t\t\t\thtml: $commentContent.html().trim()\r\n\t\t\t\t}\r\n\t\t\t}).get();\r\n\r\n\t\t\tcallback(null, comments, body.total_count);\r\n\t\t} else if(body.error) {\r\n\t\t\tcallback(new Error(body.error));\r\n\t\t} else {\r\n\t\t\tcallback(new Error(\"Unknown error\"));\r\n\t\t}\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.inviteUserToGroup = function(userID, groupID, callback) {\r\n\tif(typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://steamcommunity.com/actions/GroupInvite\",\r\n\t\t\"form\": {\r\n\t\t\t\"group\": groupID.toString(),\r\n\t\t\t\"invitee\": userID.toString(),\r\n\t\t\t\"json\": 1,\r\n\t\t\t\"sessionID\": this.getSessionID(),\r\n\t\t\t\"type\": \"groupInvite\"\r\n\t\t},\r\n\t\t\"json\": true\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(body.results == 'OK') {\r\n\t\t\tcallback(null);\r\n\t\t} else if(body.results) {\r\n\t\t\tcallback(new Error(body.results));\r\n\t\t} else {\r\n\t\t\tcallback(new Error(\"Unknown error\"));\r\n\t\t}\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.followUser = function(userID, callback) {\r\n\tif(typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": `https://steamcommunity.com/profiles/${userID.toString()}/followuser/`,\r\n\t\t\"form\": {\r\n\t\t\t\"sessionid\": this.getSessionID(),\r\n\t\t},\r\n\t\t\"json\": true\r\n\t}, function(err, response, body) {\r\n\t\tif (!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (body.success && body.success != SteamCommunity.EResult.OK) {\r\n\t\t\tcallback(Helpers.eresultError(body.success));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.unfollowUser = function(userID, callback) {\r\n\tif(typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": `https://steamcommunity.com/profiles/${userID.toString()}/unfollowuser/`,\r\n\t\t\"form\": {\r\n\t\t\t\"sessionid\": this.getSessionID(),\r\n\t\t},\r\n\t\t\"json\": true\r\n\t}, function(err, response, body) {\r\n\t\tif (!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (body.success && body.success != SteamCommunity.EResult.OK) {\r\n\t\t\tcallback(Helpers.eresultError(body.success));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.getUserAliases = function(userID, callback) {\r\n\tif (typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tthis.httpRequestGet({\r\n\t\t\"uri\": \"https://steamcommunity.com/profiles/\" + userID.getSteamID64() + \"/ajaxaliases\",\r\n\t\t\"json\": true\r\n\t}, function(err, response, body) {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (typeof body !== 'object') {\r\n\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(null, body.map(function(entry) {\r\n\t\t\tentry.timechanged = Helpers.decodeSteamTime(entry.timechanged);\r\n\t\t\treturn entry;\r\n\t\t}));\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\n/**\r\n * Get the background URL of user's profile.\r\n * @param {SteamID|string} userID - The user's SteamID as a SteamID object or a string which can parse into one\r\n * @param {function} callback\r\n */\r\nSteamCommunity.prototype.getUserProfileBackground = function(userID, callback) {\r\n\tif (typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tthis.httpRequest(\"https://steamcommunity.com/profiles/\" + userID.getSteamID64(), (err, response, body) => {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar $ = Cheerio.load(body);\r\n\r\n\t\tvar $privateProfileInfo = $('.profile_private_info');\r\n\t\tif ($privateProfileInfo.length > 0) {\r\n\t\t\tcallback(new Error($privateProfileInfo.text().trim()));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ($('body').hasClass('has_profile_background')) {\r\n\t\t\tvar backgroundUrl = $('div.profile_background_image_content').css('background-image');\r\n\t\t\tvar matcher = backgroundUrl.match(/\\(([^)]+)\\)/);\r\n\r\n\t\t\tif (matcher.length != 2 || !matcher[1].length) {\r\n\t\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\t} else {\r\n\t\t\t\tcallback(null, matcher[1]);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tcallback(null, null);\r\n\t\t}\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.getUserInventoryContexts = function(userID, callback) {\r\n\tif (typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tif (typeof userID === 'function') {\r\n\t\tcallback = userID;\r\n\t\tuserID = this.steamID;\r\n\t}\r\n\r\n\tif (!userID) {\r\n\t\tcallback(new Error(\"No SteamID specified and not logged in\"));\r\n\t\treturn;\r\n\t}\r\n\r\n\tvar self = this;\r\n\tthis.httpRequest(\"https://steamcommunity.com/profiles/\" + userID.getSteamID64() + \"/inventory/\", function(err, response, body) {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar match = body.match(/var g_rgAppContextData = ([^\\n]+);\\r?\\n/);\r\n\t\tif (!match) {\r\n\t\t\tcallback(new Error('Malformed response'));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar data;\r\n\t\ttry {\r\n\t\t\tdata = JSON.parse(match[1]);\r\n\t\t} catch(e) {\r\n\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (Object.keys(data).length == 0) {\r\n\t\t\tif (body.match(/inventory is currently private\\./)) {\r\n\t\t\t\tcallback(new Error('Private inventory'));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (body.match(/profile_private_info/)) {\r\n\t\t\t\tcallback(new Error('Private profile'));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If they truly have no items in their inventory, Steam will send g_rgAppContextData as [] instead of {}.\r\n\t\t\tdata = {};\r\n\t\t}\r\n\r\n\t\tcallback(null, data);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\n/**\r\n * Get the contents of a user's inventory context.\r\n * @deprecated Use getUserInventoryContents instead\r\n * @param {SteamID|string} userID - The user's SteamID as a SteamID object or a string which can parse into one\r\n * @param {int} appID - The Steam application ID of the game for which you want an inventory\r\n * @param {int} contextID - The ID of the \"context\" within the game you want to retrieve\r\n * @param {boolean} tradableOnly - true to get only tradable items and currencies\r\n * @param {function} callback\r\n */\r\nSteamCommunity.prototype.getUserInventory = function(userID, appID, contextID, tradableOnly, callback) {\r\n\tvar self = this;\r\n\r\n\tif (typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tvar endpoint = \"/profiles/\" + userID.getSteamID64();\r\n\tget([], []);\r\n\r\n\tfunction get(inventory, currency, start) {\r\n\t\tself.httpRequest({\r\n\t\t\t\"uri\": \"https://steamcommunity.com\" + endpoint + \"/inventory/json/\" + appID + \"/\" + contextID,\r\n\t\t\t\"headers\": {\r\n\t\t\t\t\"Referer\": \"https://steamcommunity.com\" + endpoint + \"/inventory\"\r\n\t\t\t},\r\n\t\t\t\"qs\": {\r\n\t\t\t\t\"start\": start,\r\n\t\t\t\t\"trading\": tradableOnly ? 1 : undefined\r\n\t\t\t},\r\n\t\t\t\"json\": true\r\n\t\t}, function(err, response, body) {\r\n\t\t\tif (err) {\r\n\t\t\t\tcallback(err);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!body || !body.success || !body.rgInventory || !body.rgDescriptions || !body.rgCurrency) {\r\n\t\t\t\tif (body) {\r\n\t\t\t\t\tcallback(new Error(body.Error || \"Malformed response\"));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar i;\r\n\t\t\tfor (i in body.rgInventory) {\r\n\t\t\t\tif (!body.rgInventory.hasOwnProperty(i)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinventory.push(new CEconItem(body.rgInventory[i], body.rgDescriptions, contextID));\r\n\t\t\t}\r\n\r\n\t\t\tfor (i in body.rgCurrency) {\r\n\t\t\t\tif (!body.rgCurrency.hasOwnProperty(i)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrency.push(new CEconItem(body.rgCurrency[i], body.rgDescriptions, contextID));\r\n\t\t\t}\r\n\r\n\t\t\tif (body.more) {\r\n\t\t\t\tvar match = response.request.uri.href.match(/\\/(profiles|id)\\/([^\\/]+)\\//);\r\n\t\t\t\tif(match) {\r\n\t\t\t\t\tendpoint = \"/\" + match[1] + \"/\" + match[2];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tget(inventory, currency, body.more_start);\r\n\t\t\t} else {\r\n\t\t\t\tcallback(null, inventory, currency);\r\n\t\t\t}\r\n\t\t}, \"steamcommunity\");\r\n\t}\r\n};\r\n\r\n/**\r\n * Get the contents of a user's inventory context.\r\n * @param {SteamID|string} userID - The user's SteamID as a SteamID object or a string which can parse into one\r\n * @param {int} appID - The Steam application ID of the game for which you want an inventory\r\n * @param {int} contextID - The ID of the \"context\" within the game you want to retrieve\r\n * @param {boolean} tradableOnly - true to get only tradable items and currencies\r\n * @param {string} [language] - The language of item descriptions to return. Omit for default (which may either be English or your account's chosen language)\r\n * @param {function} callback\r\n */\r\nSteamCommunity.prototype.getUserInventoryContents = function(userID, appID, contextID, tradableOnly, language, callback) {\r\n\tif (typeof language === 'function') {\r\n\t\tcallback = language;\r\n\t\tlanguage = \"english\";\r\n\t}\r\n\r\n\tif (!userID) {\r\n\t\tcallback(new Error(\"The user's SteamID is invalid or missing.\"));\r\n\t\treturn;\r\n\t}\r\n\r\n\tvar self = this;\r\n\r\n\tif (typeof userID === 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tvar pos = 1;\r\n\tget([], []);\r\n\r\n\tfunction get(inventory, currency, start) {\r\n\t\tself.httpRequest({\r\n\t\t\t\"uri\": \"https://steamcommunity.com/inventory/\" + userID.getSteamID64() + \"/\" + appID + \"/\" + contextID,\r\n\t\t\t\"headers\": {\r\n\t\t\t\t\"Referer\": \"https://steamcommunity.com/profiles/\" + userID.getSteamID64() + \"/inventory\"\r\n\t\t\t},\r\n\t\t\t\"qs\": {\r\n\t\t\t\t\"l\": language, // Default language\r\n\t\t\t\t\"count\": 1000, // Max items per 'page'\r\n\t\t\t\t\"start_assetid\": start\r\n\t\t\t},\r\n\t\t\t\"json\": true\r\n\t\t}, function(err, response, body) {\r\n\t\t\tif (err) {\r\n\t\t\t\tif (err.message == \"HTTP error 403\" && body === null) {\r\n\t\t\t\t\t// 403 with a body of \"null\" means the inventory/profile is private.\r\n\t\t\t\t\tif (self.steamID && userID.getSteamID64() == self.steamID.getSteamID64()) {\r\n\t\t\t\t\t\t// We can never get private profile error for our own inventory!\r\n\t\t\t\t\t\tself._notifySessionExpired(err);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcallback(new Error(\"This profile is private.\"));\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (err.message == \"HTTP error 500\" && body && body.error) {\r\n\t\t\t\t\terr = new Error(body.error);\r\n\r\n\t\t\t\t\tvar match = body.error.match(/^(.+) \\((\\d+)\\)$/);\r\n\t\t\t\t\tif (match) {\r\n\t\t\t\t\t\terr.message = match[1];\r\n\t\t\t\t\t\terr.eresult = match[2];\r\n\t\t\t\t\t\tcallback(err);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallback(err);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (body && body.success && body.total_inventory_count === 0) {\r\n\t\t\t\t// Empty inventory\r\n\t\t\t\tcallback(null, [], [], 0);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (appID == 730 && body && body.success && !body.assets) {\r\n\t\t\t\t// CS inventory has no visible items. We need a special case for this because Valve is incapable of\r\n\t\t\t\t// doing anything not dumb.\r\n\t\t\t\tcallback(null, [], [], body.total_inventory_count);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!body || !body.success || !body.assets || !body.descriptions) {\r\n\t\t\t\tif (body) {\r\n\t\t\t\t\t// Dunno if the error/Error property even exists on this new endpoint\r\n\t\t\t\t\tcallback(new Error(body.error || body.Error || \"Malformed response\"));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i = 0; i < body.assets.length; i++) {\r\n\t\t\t\tvar description = getDescription(body.descriptions, body.assets[i].classid, body.assets[i].instanceid);\r\n\r\n\t\t\t\tif (!tradableOnly || (description && description.tradable)) {\r\n\t\t\t\t\tbody.assets[i].pos = pos++;\r\n\t\t\t\t\t(body.assets[i].currencyid ? currency : inventory).push(new CEconItem(body.assets[i], description, contextID));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (body.more_items) {\r\n\t\t\t\tget(inventory, currency, body.last_assetid);\r\n\t\t\t} else {\r\n\t\t\t\tcallback(null, inventory, currency, body.total_inventory_count);\r\n\t\t\t}\r\n\t\t}, \"steamcommunity\");\r\n\t}\r\n\r\n\t// A bit of optimization; objects are hash tables so it's more efficient to look up by key than to iterate an array\r\n\tvar quickDescriptionLookup = {};\r\n\r\n\tfunction getDescription(descriptions, classID, instanceID) {\r\n\t\tvar key = classID + '_' + (instanceID || '0'); // instanceID can be undefined, in which case it's 0.\r\n\r\n\t\tif (quickDescriptionLookup[key]) {\r\n\t\t\treturn quickDescriptionLookup[key];\r\n\t\t}\r\n\r\n\t\tfor (var i = 0; i < descriptions.length; i++) {\r\n\t\t\tquickDescriptionLookup[descriptions[i].classid + '_' + (descriptions[i].instanceid || '0')] = descriptions[i];\r\n\t\t}\r\n\r\n\t\treturn quickDescriptionLookup[key];\r\n\t}\r\n};\r\n\r\n/**\r\n * Upload an image to Steam and send it to another user over Steam chat.\r\n * @param {SteamID|string} userID - Either a SteamID object or a string that can parse into one\r\n * @param {Buffer} imageContentsBuffer - The image contents, as a Buffer\r\n * @param {{spoiler?: boolean}} [options]\r\n * @param {function} callback\r\n */\r\nSteamCommunity.prototype.sendImageToUser = function(userID, imageContentsBuffer, options, callback) {\r\n\tif (typeof options == 'function') {\r\n\t\tcallback = options;\r\n\t\toptions = {};\r\n\t}\r\n\r\n\toptions = options || {};\r\n\r\n\tif (!userID) {\r\n\t\tcallback(new Error('The user\\'s SteamID is invalid or missing'));\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (typeof userID == 'string') {\r\n\t\tuserID = new SteamID(userID);\r\n\t}\r\n\r\n\tif (!Buffer.isBuffer(imageContentsBuffer)) {\r\n\t\tcallback(new Error('The image contents must be a Buffer containing an image'));\r\n\t\treturn;\r\n\t}\r\n\r\n\tvar imageDetails = null;\r\n\ttry {\r\n\t\timageDetails = imageSize(imageContentsBuffer);\r\n\t} catch (ex) {\r\n\t\tcallback(ex);\r\n\t\treturn;\r\n\t}\r\n\r\n\tvar imageHash = Crypto.createHash('sha1');\r\n\timageHash.update(imageContentsBuffer);\r\n\timageHash = imageHash.digest('hex');\r\n\r\n\tvar filename = Date.now() + '_image.' + imageDetails.type;\r\n\r\n\tthis.httpRequestPost({\r\n\t\turi: 'https://steamcommunity.com/chat/beginfileupload/?l=english',\r\n\t\theaders: {\r\n\t\t\treferer: 'https://steamcommunity.com/chat/'\r\n\t\t},\r\n\t\tformData: { // it's multipart\r\n\t\t\tsessionid: this.getSessionID(),\r\n\t\t\tl: 'english',\r\n\t\t\tfile_size: imageContentsBuffer.length,\r\n\t\t\tfile_name: filename,\r\n\t\t\tfile_sha: imageHash,\r\n\t\t\tfile_image_width: imageDetails.width,\r\n\t\t\tfile_image_height: imageDetails.height,\r\n\t\t\tfile_type: 'image/' + (imageDetails.type == 'jpg' ? 'jpeg' : imageDetails.type)\r\n\t\t},\r\n\t\tjson: true\r\n\t}, (err, res, body) => {\r\n\t\tif (err) {\r\n\t\t\tif (body && body.success) {\r\n\t\t\t\tvar err2 = Helpers.eresultError(body.success);\r\n\t\t\t\tif (body.message) {\r\n\t\t\t\t\terr2.message = body.message;\r\n\t\t\t\t}\r\n\t\t\t\tcallback(err2);\r\n\t\t\t} else {\r\n\t\t\t\tcallback(err);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (body.success != 1) {\r\n\t\t\tcallback(Helpers.eresultError(body.success));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar hmac = body.hmac;\r\n\t\tvar timestamp = body.timestamp;\r\n\t\tvar startResult = body.result;\r\n\r\n\t\tif (!startResult || !startResult.ugcid || !startResult.url_host || !startResult.request_headers) {\r\n\t\t\tcallback(new Error('Malformed response'));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Okay, now we need to PUT the file to the provided URL\r\n\t\tvar uploadUrl = (startResult.use_https ? 'https' : 'http') + '://' + startResult.url_host + startResult.url_path;\r\n\t\tvar headers = {};\r\n\t\tstartResult.request_headers.forEach((header) => {\r\n\t\t\theaders[header.name.toLowerCase()] = header.value;\r\n\t\t});\r\n\r\n\t\tthis.httpRequest({\r\n\t\t\turi: uploadUrl,\r\n\t\t\tmethod: 'PUT',\r\n\t\t\theaders,\r\n\t\t\tbody: imageContentsBuffer\r\n\t\t}, (err, res, body) => {\r\n\t\t\tif (err) {\r\n\t\t\t\tcallback(err);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Now we need to commit the upload\r\n\t\t\tthis.httpRequestPost({\r\n\t\t\t\turi: 'https://steamcommunity.com/chat/commitfileupload/',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\treferer: 'https://steamcommunity.com/chat/'\r\n\t\t\t\t},\r\n\t\t\t\tformData: { // it's multipart again\r\n\t\t\t\t\tsessionid: this.getSessionID(),\r\n\t\t\t\t\tl: 'english',\r\n\t\t\t\t\tfile_name: filename,\r\n\t\t\t\t\tfile_sha: imageHash,\r\n\t\t\t\t\tsuccess: '1',\r\n\t\t\t\t\tugcid: startResult.ugcid,\r\n\t\t\t\t\tfile_type: 'image/' + (imageDetails.type == 'jpg' ? 'jpeg' : imageDetails.type),\r\n\t\t\t\t\tfile_image_width: imageDetails.width,\r\n\t\t\t\t\tfile_image_height: imageDetails.height,\r\n\t\t\t\t\ttimestamp,\r\n\t\t\t\t\thmac,\r\n\t\t\t\t\tfriend_steamid: userID.getSteamID64(),\r\n\t\t\t\t\tspoiler: options.spoiler ? '1' : '0'\r\n\t\t\t\t},\r\n\t\t\t\tjson: true\r\n\t\t\t}, (err, res, body) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tcallback(err);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (body.success != 1) {\r\n\t\t\t\t\tcallback(Helpers.eresultError(body.success));\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (body.result.success != 1) {\r\n\t\t\t\t\t// lol valve\r\n\t\t\t\t\tcallback(Helpers.eresultError(body.result.success));\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!body.result.details || !body.result.details.url) {\r\n\t\t\t\t\tcallback(new Error('Malformed response'));\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallback(null, body.result.details.url);\r\n\t\t\t}, 'steamcommunity');\r\n\t\t}, 'steamcommunity');\r\n\t}, 'steamcommunity');\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/users.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/components/webapi.js":
/*!**********************************************************!*\
  !*** ./node_modules/steamcommunity/components/webapi.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const SteamCommunity = __webpack_require__(/*! ../index.js */ \"(rsc)/./node_modules/steamcommunity/index.js\");\r\n\r\nconst Helpers = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/steamcommunity/components/helpers.js\");\r\n\r\n/**\r\n * Retrieves your account's Steam Web API key, if you already have one. If you don't yet have one, this will fail.\r\n * To create a Web API key, use `createWebApiKey()`.\r\n *\r\n * @param {null|function} unused - No longer used, kept for backward compatibility. You can omit this parameter and pass\r\n *    your callback directly as the first parameter if you want.\r\n * @param {function} callback\r\n */\r\nSteamCommunity.prototype.getWebApiKey = function(unused, callback) {\r\n\tif (typeof unused == 'function') {\r\n\t\tcallback = unused;\r\n\t}\r\n\r\n\tthis.httpRequest({\r\n\t\turi: 'https://steamcommunity.com/dev/apikey?l=english',\r\n\t\tfollowRedirect: false\r\n\t}, (err, response, body) => {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (body.match(/You must have a validated email address to create a Steam Web API key./)) {\r\n\t\t\treturn callback(new Error('You must have a validated email address to create a Steam Web API key.'));\r\n\t\t}\r\n\r\n\t\tif (body.match(/Your account requires (<a [^>]+>)?Steam Guard Mobile Authenticator/)) {\r\n\t\t\treturn callback(new Error('Steam Guard Mobile Authenticator required to create a Steam Web API key'));\r\n\t\t}\r\n\r\n\t\tif (body.match(/<h2>Access Denied<\\/h2>/)) {\r\n\t\t\treturn callback(new Error('Access Denied'));\r\n\t\t}\r\n\r\n\t\tlet match = body.match(/<p>Key: ([0-9A-F]+)<\\/p>/);\r\n\t\tif (match) {\r\n\t\t\t// We already have an API key registered\r\n\t\t\tcallback(null, match[1]);\r\n\t\t} else {\r\n\t\t\tcallback(new Error('No API key created for this account'));\r\n\t\t}\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\n/**\r\n * @typedef CreateApiKeyOptions\r\n * @property {string} domain - The domain to associate with your API key\r\n * @property {string} [requestID] - If finalizing an existing create request, include the request ID\r\n * @property {string|Buffer} [identitySecret] - If you pass your identity_secret here, then steamcommunity will\r\n *   internally handle accepting any confirmations.\r\n */\r\n\r\n/**\r\n * @typedef CreateApiKeyResponse\r\n * @property {boolean} confirmationRequired\r\n * @property {string} [apiKey] - If creating your API key succeeded, this is the new key\r\n * @property {CreateApiKeyOptions} [finalizeOptions] - If confirmation is required to create a key, then accept the\r\n *   confirmation, then call createWebApiKey again and pass this whole object for the `options` parameter.\r\n */\r\n\r\n/**\r\n * @callback createWebApiKeyCallback\r\n * @param {Error|null} err\r\n * @param {CreateApiKeyResponse} [result]\r\n */\r\n\r\n/**\r\n * Starts the process to create a Steam Web API key. When the callback is fired, you will need to approve a mobile\r\n * confirmation in your app or using getConfirmations().\r\n *\r\n * @param {CreateApiKeyOptions} options\r\n * @param {createWebApiKeyCallback} callback\r\n */\r\nSteamCommunity.prototype.createWebApiKey = function(options, callback) {\r\n\tif (!options.domain) {\r\n\t\tcallback(new Error('Passing a domain is required to register an API key'));\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.httpRequestPost({\r\n\t\turi: 'https://steamcommunity.com/dev/requestkey',\r\n\t\tform: {\r\n\t\t\tdomain: options.domain,\r\n\t\t\trequest_id: options.requestID || '0',\r\n\t\t\tsessionid: this.getSessionID(),\r\n\t\t\tagreeToTerms: 'true'\r\n\t\t},\r\n\t\tjson: true\r\n\t}, (err, res, body) => {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// body.requires_confirmation is 1/0, but the Steam website doesn't check this value and instead only checks the\r\n\t\t// value of `success`. So let's just do that.\r\n\r\n\t\t// This is a mess. I'm glad we have promises and await now.\r\n\r\n\t\tswitch (body.success) {\r\n\t\t\tcase SteamCommunity.EResult.OK:\r\n\t\t\t\tif (body.api_key) {\r\n\t\t\t\t\tcallback(null, {confirmationRequired: false, apiKey: body.api_key});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// It's not been observed that we get result OK without api_key included, but the Steam website doesn't\r\n\t\t\t\t// use this value so let's be safe just in case it disappears in the future.\r\n\t\t\t\tthis.getWebApiKey((err, key) => {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tcallback(err);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcallback(null, {confirmationRequired: false, apiKey: key});\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\r\n\t\t\tcase SteamCommunity.EResult.Pending:\r\n\t\t\t\tlet finalizeOptions = {\r\n\t\t\t\t\tdomain: options.domain,\r\n\t\t\t\t\trequestID: body.request_id || options.requestID\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (options.identitySecret) {\r\n\t\t\t\t\tthis.acceptConfirmationForObject(options.identitySecret, finalizeOptions.requestID, (err) => {\r\n\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\tcallback(err);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.createWebApiKey(finalizeOptions, callback);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallback(null, {\r\n\t\t\t\t\tconfirmationRequired: true,\r\n\t\t\t\t\tfinalizeOptions: finalizeOptions\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tcallback(Helpers.eresultError(body.success));\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/**\r\n * @deprecated No longer works. Will be removed in a future release.\r\n * @param {function} callback\r\n */\r\nSteamCommunity.prototype.getWebApiOauthToken = function(callback) {\r\n\tif (this.oAuthToken) {\r\n\t\treturn callback(null, this.oAuthToken);\r\n\t}\r\n\r\n\tcallback(new Error('This operation requires an OAuth token, which is no longer issued by Steam.'));\r\n};\r\n\r\n/**\r\n * Sets an access_token generated by steam-session using EAuthTokenPlatformType.MobileApp.\r\n * Required for some operations such as 2FA enabling and disabling.\r\n * This will throw an Error if the provided token is not valid, was not generated for the MobileApp platform, is expired,\r\n * or does not belong to the logged-in user account.\r\n *\r\n * @param {string} token\r\n */\r\nSteamCommunity.prototype.setMobileAppAccessToken = function(token) {\r\n\tif (!this.steamID) {\r\n\t\tthrow new Error('Log on to steamcommunity before setting a mobile app access token');\r\n\t}\r\n\r\n\tlet decodedToken = Helpers.decodeJwt(token);\r\n\r\n\tif (!decodedToken.iss || !decodedToken.sub || !decodedToken.aud || !decodedToken.exp) {\r\n\t\tthrow new Error('Provided value is not a valid Steam access token');\r\n\t}\r\n\r\n\tif (decodedToken.iss == 'steam') {\r\n\t\tthrow new Error('Provided token is a refresh token, not an access token');\r\n\t}\r\n\r\n\tif (decodedToken.sub != this.steamID.getSteamID64()) {\r\n\t\tthrow new Error(`Provided token belongs to account ${decodedToken.sub}, but we are logged into ${this.steamID.getSteamID64()}`);\r\n\t}\r\n\r\n\tif (decodedToken.exp < Math.floor(Date.now() / 1000)) {\r\n\t\tthrow new Error('Provided token is expired');\r\n\t}\r\n\r\n\tif ((decodedToken.aud || []).indexOf('mobile') == -1) {\r\n\t\tthrow new Error('Provided token is not valid for MobileApp platform type');\r\n\t}\r\n\r\n\tthis.mobileAccessToken = token;\r\n};\r\n\r\n/**\r\n * Verifies that the mobile access token we already have set is still valid for current login.\r\n *\r\n * @private\r\n */\r\nSteamCommunity.prototype._verifyMobileAccessToken = function() {\r\n\tif (!this.mobileAccessToken) {\r\n\t\t// No access token, so nothing to do here.\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet decodedToken = Helpers.decodeJwt(this.mobileAccessToken);\r\n\r\n\tlet isTokenInvalid = decodedToken.sub != this.steamID.getSteamID64()    // SteamID doesn't match\r\n\t\t|| decodedToken.exp < Math.floor(Date.now() / 1000);                      // Token is expired\r\n\r\n\tif (isTokenInvalid) {\r\n\t\tdelete this.mobileAccessToken;\r\n\t}\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/components/webapi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/index.js":
/*!**********************************************!*\
  !*** ./node_modules/steamcommunity/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {chrome} = __webpack_require__(/*! @doctormckay/user-agents */ \"(rsc)/./node_modules/@doctormckay/user-agents/index.js\");\r\nconst Request = __webpack_require__(/*! request */ \"(rsc)/./node_modules/request/index.js\");\r\nconst SteamID = __webpack_require__(/*! steamid */ \"(rsc)/./node_modules/steamid/index.js\");\r\n\r\nconst Helpers = __webpack_require__(/*! ./components/helpers.js */ \"(rsc)/./node_modules/steamcommunity/components/helpers.js\");\r\n\r\n(__webpack_require__(/*! util */ \"util\").inherits)(SteamCommunity, (__webpack_require__(/*! events */ \"events\").EventEmitter));\r\n\r\nmodule.exports = SteamCommunity;\r\n\r\nSteamCommunity.SteamID = SteamID;\r\nSteamCommunity.ConfirmationType = __webpack_require__(/*! ./resources/EConfirmationType.js */ \"(rsc)/./node_modules/steamcommunity/resources/EConfirmationType.js\");\r\nSteamCommunity.EResult = __webpack_require__(/*! ./resources/EResult.js */ \"(rsc)/./node_modules/steamcommunity/resources/EResult.js\");\r\nSteamCommunity.ESharedFileType = __webpack_require__(/*! ./resources/ESharedFileType.js */ \"(rsc)/./node_modules/steamcommunity/resources/ESharedFileType.js\");\r\nSteamCommunity.EFriendRelationship = __webpack_require__(/*! ./resources/EFriendRelationship.js */ \"(rsc)/./node_modules/steamcommunity/resources/EFriendRelationship.js\");\r\n\r\n\r\nfunction SteamCommunity(options) {\r\n\toptions = options || {};\r\n\r\n\tthis._jar = Request.jar();\r\n\tthis._captchaGid = -1;\r\n\tthis._httpRequestID = 0;\r\n\tthis.chatState = SteamCommunity.ChatState.Offline;\r\n\r\n\tvar defaults = {\r\n\t\t\"jar\": this._jar,\r\n\t\t\"timeout\": options.timeout || 50000,\r\n\t\t\"gzip\": true,\r\n\t\t\"headers\": {\r\n\t\t\t\"User-Agent\": options.userAgent || chrome()\r\n\t\t}\r\n\t};\r\n\r\n\tif (typeof options == \"string\") {\r\n\t\toptions = {\r\n\t\t\tlocalAddress: options\r\n\t\t};\r\n\t}\r\n\tthis._options = options;\r\n\r\n\tif (options.localAddress) {\r\n\t\tdefaults.localAddress = options.localAddress;\r\n\t}\r\n\r\n\tthis.request = options.request || Request.defaults({\"forever\": true}); // \"forever\" indicates that we want a keep-alive agent\r\n\tthis.request = this.request.defaults(defaults);\r\n\r\n\t// English\r\n\tthis._setCookie(Request.cookie('Steam_Language=english'));\r\n\r\n\t// UTC\r\n\tthis._setCookie(Request.cookie('timezoneOffset=0,0'));\r\n}\r\n\r\nSteamCommunity.prototype.login = function(details, callback) {\r\n\tif (!details.accountName || !details.password) {\r\n\t\tthrow new Error(\"Missing either accountName or password to login; both are needed\");\r\n\t}\r\n\r\n\t// Delete the cache\r\n\tdelete this._profileURL;\r\n\r\n\t// default disableMobile to true\r\n\tlet logOnOptions = Object.assign({}, details);\r\n\tlogOnOptions.disableMobile = details.disableMobile !== false;\r\n\r\n\tthis._modernLogin(logOnOptions).then(({sessionID, cookies, steamguard, mobileAccessToken}) => {\r\n\t\tthis.setCookies(cookies);\r\n\r\n\t\tif (mobileAccessToken) {\r\n\t\t\tthis.setMobileAppAccessToken(mobileAccessToken);\r\n\t\t}\r\n\r\n\t\tcallback(null, sessionID, cookies, steamguard, null);\r\n\t}).catch(err => callback(err));\r\n};\r\n\r\n/**\r\n * @deprecated\r\n * @param {string} steamguard\r\n * @param {string} token\r\n * @param {function} callback\r\n */\r\nSteamCommunity.prototype.oAuthLogin = function(steamguard, token, callback) {\r\n\tsteamguard = steamguard.split('||');\r\n\tvar steamID = new SteamID(steamguard[0]);\r\n\r\n\tvar self = this;\r\n\tthis.httpRequestPost({\r\n\t\t\"uri\": \"https://api.steampowered.com/IMobileAuthService/GetWGToken/v1/\",\r\n\t\t\"form\": {\r\n\t\t\t\"access_token\": token\r\n\t\t},\r\n\t\t\"json\": true\r\n\t}, function(err, response, body) {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(!body.response || !body.response.token || !body.response.token_secure) {\r\n\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar cookies = [\r\n\t\t\t'steamLogin=' + encodeURIComponent(steamID.getSteamID64() + '||' + body.response.token),\r\n\t\t\t'steamLoginSecure=' + encodeURIComponent(steamID.getSteamID64() + '||' + body.response.token_secure),\r\n\t\t\t'steamMachineAuth' + steamID.getSteamID64() + '=' + steamguard[1],\r\n\t\t\t'sessionid=' + self.getSessionID()\r\n\t\t];\r\n\r\n\t\tself.setCookies(cookies);\r\n\t\tcallback(null, self.getSessionID(), cookies);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\n/**\r\n * Get a token that can be used to log onto Steam using steam-user.\r\n * @param {function} callback\r\n */\r\nSteamCommunity.prototype.getClientLogonToken = function(callback) {\r\n\tthis.httpRequestGet({\r\n\t\t\"uri\": \"https://steamcommunity.com/chat/clientjstoken\",\r\n\t\t\"json\": true\r\n\t}, (err, res, body) => {\r\n\t\tif (err || res.statusCode != 200) {\r\n\t\t\tcallback(err ? err : new Error('HTTP error ' + res.statusCode));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!body.logged_in) {\r\n\t\t\tlet e = new Error('Not Logged In');\r\n\t\t\tcallback(e);\r\n\t\t\tthis._notifySessionExpired(e);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!body.steamid || !body.account_name || !body.token) {\r\n\t\t\tcallback(new Error('Malformed response'));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(null, {\r\n\t\t\t\"steamID\": new SteamID(body.steamid),\r\n\t\t\t\"accountName\": body.account_name,\r\n\t\t\t\"webLogonToken\": body.token\r\n\t\t});\r\n\t});\r\n};\r\n\r\nSteamCommunity.prototype._setCookie = function(cookie, secure) {\r\n\tvar protocol = secure ? \"https\" : \"http\";\r\n\tcookie.secure = !!secure;\r\n\r\n\tif (cookie.domain) {\r\n\t\tthis._jar.setCookie(cookie.clone(), protocol + '://' + cookie.domain);\r\n\t} else {\r\n\t\tthis._jar.setCookie(cookie.clone(), protocol + \"://steamcommunity.com\");\r\n\t\tthis._jar.setCookie(cookie.clone(), protocol + \"://store.steampowered.com\");\r\n\t\tthis._jar.setCookie(cookie.clone(), protocol + \"://help.steampowered.com\");\r\n\t}\r\n};\r\n\r\nSteamCommunity.prototype.setCookies = function(cookies) {\r\n\tcookies.forEach((cookie) => {\r\n\t\tvar cookieName = cookie.trim().split('=')[0];\r\n\t\tif (cookieName == 'steamLogin' || cookieName == 'steamLoginSecure') {\r\n\t\t\tthis.steamID = new SteamID(cookie.match(/steamLogin(Secure)?=(\\d+)/)[2]);\r\n\t\t}\r\n\r\n\t\tthis._setCookie(Request.cookie(cookie), !!(cookieName.match(/^steamMachineAuth/) || cookieName.match(/Secure$/)));\r\n\t});\r\n\r\n\t// The account we're logged in as might have changed, so verify that our mobile access token (if any) is still valid\r\n\t// for this account.\r\n\tthis._verifyMobileAccessToken();\r\n};\r\n\r\nSteamCommunity.prototype.getSessionID = function(host = \"http://steamcommunity.com\") {\r\n\tvar cookies = this._jar.getCookieString(host).split(';');\r\n\tfor(var i = 0; i < cookies.length; i++) {\r\n\t\tvar match = cookies[i].trim().match(/([^=]+)=(.+)/);\r\n\t\tif(match[1] == 'sessionid') {\r\n\t\t\treturn decodeURIComponent(match[2]);\r\n\t\t}\r\n\t}\r\n\r\n\tvar sessionID = generateSessionID();\r\n\tthis._setCookie(Request.cookie('sessionid=' + sessionID));\r\n\treturn sessionID;\r\n};\r\n\r\nfunction generateSessionID() {\r\n\treturn (__webpack_require__(/*! crypto */ \"crypto\").randomBytes)(12).toString('hex');\r\n}\r\n\r\nSteamCommunity.prototype.parentalUnlock = function(pin, callback) {\r\n\tvar self = this;\r\n\tvar sessionID = self.getSessionID();\r\n\r\n\tthis.httpRequestPost(\"https://steamcommunity.com/parental/ajaxunlock\", {\r\n\t\t\"json\": true,\r\n\t\t\"form\": {\r\n\t\t\t\"pin\": pin,\r\n\t\t\t\"sessionid\": sessionID\r\n\t\t}\r\n\t}, function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!body || typeof body.success !== 'boolean') {\r\n\t\t\tcallback(\"Invalid response\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!body.success) {\r\n\t\t\tswitch (body.eresult) {\r\n\t\t\t\tcase 15:\r\n\t\t\t\t\tcallback(\"Incorrect PIN\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 25:\r\n\t\t\t\t\tcallback(\"Too many invalid PIN attempts\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tcallback(\"Error \" + body.eresult);\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback();\r\n\t}.bind(this), \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.getNotifications = function(callback) {\r\n\tvar self = this;\r\n\tthis.httpRequestGet({\r\n\t\t\"uri\": \"https://steamcommunity.com/actions/GetNotificationCounts\",\r\n\t\t\"json\": true\r\n\t}, function(err, response, body) {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!body || !body.notifications) {\r\n\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar notifications = {\r\n\t\t\t\"trades\": body.notifications[1] || 0,\r\n\t\t\t\"gameTurns\": body.notifications[2] || 0,\r\n\t\t\t\"moderatorMessages\": body.notifications[3] || 0,\r\n\t\t\t\"comments\": body.notifications[4] || 0,\r\n\t\t\t\"items\": body.notifications[5] || 0,\r\n\t\t\t\"invites\": body.notifications[6] || 0,\r\n\t\t\t// dunno about 7\r\n\t\t\t\"gifts\": body.notifications[8] || 0,\r\n\t\t\t\"chat\": body.notifications[9] || 0,\r\n\t\t\t\"helpRequestReplies\": body.notifications[10] || 0,\r\n\t\t\t\"accountAlerts\": body.notifications[11] || 0\r\n\t\t};\r\n\r\n\t\tcallback(null, notifications);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.resetItemNotifications = function(callback) {\r\n\tvar self = this;\r\n\tthis.httpRequestGet(\"https://steamcommunity.com/my/inventory\", function(err, response, body) {\r\n\t\tif(!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(err || null);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.loggedIn = function(callback) {\r\n\tthis.httpRequestGet({\r\n\t\t\"uri\": \"https://steamcommunity.com/my\",\r\n\t\t\"followRedirect\": false,\r\n\t\t\"checkHttpError\": false\r\n\t}, function(err, response, body) {\r\n\t\tif(err || (response.statusCode != 302 && response.statusCode != 403)) {\r\n\t\t\tcallback(err || new Error(\"HTTP error \" + response.statusCode));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(response.statusCode == 403) {\r\n\t\t\tcallback(null, true, true);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(null, !!response.headers.location.match(/steamcommunity\\.com(\\/(id|profiles)\\/[^\\/]+)\\/?/), false);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.getTradeURL = function(callback) {\r\n\tthis._myProfile(\"tradeoffers/privacy\", null, (err, response, body) => {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar match = body.match(/https?:\\/\\/(www.)?steamcommunity.com\\/tradeoffer\\/new\\/?\\?partner=\\d+(&|&amp;)token=([a-zA-Z0-9-_]+)/);\r\n\t\tif (match) {\r\n\t\t\tvar token = match[3];\r\n\t\t\tcallback(null, match[0], token);\r\n\t\t} else {\r\n\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t}\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\nSteamCommunity.prototype.changeTradeURL = function(callback) {\r\n\tthis._myProfile(\"tradeoffers/newtradeurl\", {\"sessionid\": this.getSessionID()}, (err, response, body) => {\r\n\t\tif (!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!body || typeof body !== \"string\" || body.length < 3 || body.indexOf('\"') !== 0) {\r\n\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar newToken = body.replace(/\"/g, ''); //\"t1o2k3e4n\" => t1o2k3e4n\r\n\t\tcallback(null, \"https://steamcommunity.com/tradeoffer/new/?partner=\" + this.steamID.accountid + \"&token=\" + newToken, newToken);\r\n\t}, \"steamcommunity\");\r\n};\r\n\r\n/**\r\n * Clear your profile name (alias) history.\r\n * @param {function} callback\r\n */\r\nSteamCommunity.prototype.clearPersonaNameHistory = function(callback) {\r\n\tthis._myProfile(\"ajaxclearaliashistory/\", {\"sessionid\": this.getSessionID()}, (err, res, body) => {\r\n\t\tif (!callback) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (err) {\r\n\t\t\treturn callback(err);\r\n\t\t}\r\n\r\n\t\tif (res.statusCode != 200) {\r\n\t\t\treturn callback(new Error(\"HTTP error \" + res.statusCode));\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tbody = JSON.parse(body);\r\n\t\t\tcallback(Helpers.eresultError(body.success));\r\n\t\t} catch (ex) {\r\n\t\t\treturn callback(new Error(\"Malformed response\"));\r\n\t\t}\r\n\t});\r\n};\r\n\r\nSteamCommunity.prototype._myProfile = function(endpoint, form, callback) {\r\n\tvar self = this;\r\n\r\n\tif (this._profileURL) {\r\n\t\tcompleteRequest(this._profileURL);\r\n\t} else {\r\n\t\tthis.httpRequest(\"https://steamcommunity.com/my\", {\"followRedirect\": false}, function(err, response, body) {\r\n\t\t\tif(err || response.statusCode != 302) {\r\n\t\t\t\tcallback(err || \"HTTP error \" + response.statusCode);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar match = response.headers.location.match(/steamcommunity\\.com(\\/(id|profiles)\\/[^\\/]+)\\/?/);\r\n\t\t\tif(!match) {\r\n\t\t\t\tcallback(new Error(\"Can't get profile URL\"));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tself._profileURL = match[1];\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tdelete self._profileURL; // delete the cache\r\n\t\t\t}, 60000).unref();\r\n\r\n\t\t\tcompleteRequest(match[1]);\r\n\t\t}, \"steamcommunity\");\r\n\t}\r\n\r\n\tfunction completeRequest(url) {\r\n\t\tvar options = endpoint.endpoint ? endpoint : {};\r\n\t\toptions.uri = \"https://steamcommunity.com\" + url + \"/\" + (endpoint.endpoint || endpoint);\r\n\r\n\t\tif (form) {\r\n\t\t\toptions.method = \"POST\";\r\n\t\t\toptions.form = form;\r\n\t\t\toptions.followAllRedirects = true;\r\n\t\t} else if (!options.method) {\r\n\t\t\toptions.method = \"GET\";\r\n\t\t}\r\n\r\n\t\tself.httpRequest(options, callback, \"steamcommunity\");\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns an object whose keys are 64-bit SteamIDs, and whose values are values from the EFriendRelationship enum.\r\n * Therefore, you can deduce your friends or blocked list from this object.\r\n * @param {function} callback\r\n */\r\nSteamCommunity.prototype.getFriendsList = function(callback) {\r\n\tthis.httpRequestGet({\r\n\t\t\"uri\": \"https://steamcommunity.com/textfilter/ajaxgetfriendslist\",\r\n\t\t\"json\": true\r\n\t}, (err, res, body) => {\r\n\t\tif (err) {\r\n\t\t\tcallback(err ? err : new Error('HTTP error ' + res.statusCode));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (body.success != 1) {\r\n\t\t\tcallback(Helpers.eresultError(body.success));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!body.friendslist || !body.friendslist.friends) {\r\n\t\t\tcallback(new Error('Malformed response'));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst friends = {};\r\n\t\tbody.friendslist.friends.forEach(friend => (friends[friend.ulfriendid] = friend.efriendrelationship));\r\n\t\tcallback(null, friends);\r\n\t});\r\n};\r\n\r\n__webpack_require__(/*! ./components/login.js */ \"(rsc)/./node_modules/steamcommunity/components/login.js\");\r\n__webpack_require__(/*! ./components/http.js */ \"(rsc)/./node_modules/steamcommunity/components/http.js\");\r\n__webpack_require__(/*! ./components/chat.js */ \"(rsc)/./node_modules/steamcommunity/components/chat.js\");\r\n__webpack_require__(/*! ./components/profile.js */ \"(rsc)/./node_modules/steamcommunity/components/profile.js\");\r\n__webpack_require__(/*! ./components/market.js */ \"(rsc)/./node_modules/steamcommunity/components/market.js\");\r\n__webpack_require__(/*! ./components/groups.js */ \"(rsc)/./node_modules/steamcommunity/components/groups.js\");\r\n__webpack_require__(/*! ./components/users.js */ \"(rsc)/./node_modules/steamcommunity/components/users.js\");\r\n__webpack_require__(/*! ./components/sharedfiles.js */ \"(rsc)/./node_modules/steamcommunity/components/sharedfiles.js\");\r\n__webpack_require__(/*! ./components/inventoryhistory.js */ \"(rsc)/./node_modules/steamcommunity/components/inventoryhistory.js\");\r\n__webpack_require__(/*! ./components/webapi.js */ \"(rsc)/./node_modules/steamcommunity/components/webapi.js\");\r\n__webpack_require__(/*! ./components/twofactor.js */ \"(rsc)/./node_modules/steamcommunity/components/twofactor.js\");\r\n__webpack_require__(/*! ./components/confirmations.js */ \"(rsc)/./node_modules/steamcommunity/components/confirmations.js\");\r\n__webpack_require__(/*! ./components/help.js */ \"(rsc)/./node_modules/steamcommunity/components/help.js\");\r\n__webpack_require__(/*! ./classes/CMarketItem.js */ \"(rsc)/./node_modules/steamcommunity/classes/CMarketItem.js\");\r\n__webpack_require__(/*! ./classes/CMarketSearchResult.js */ \"(rsc)/./node_modules/steamcommunity/classes/CMarketSearchResult.js\");\r\n__webpack_require__(/*! ./classes/CSteamGroup.js */ \"(rsc)/./node_modules/steamcommunity/classes/CSteamGroup.js\");\r\n__webpack_require__(/*! ./classes/CSteamSharedFile.js */ \"(rsc)/./node_modules/steamcommunity/classes/CSteamSharedFile.js\");\r\n__webpack_require__(/*! ./classes/CSteamUser.js */ \"(rsc)/./node_modules/steamcommunity/classes/CSteamUser.js\");\r\n\r\n/**\r\n @callback SteamCommunity~genericErrorCallback\r\n @param {Error|null} err - An Error object on failure, or null on success\r\n */\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/node_modules/steam-totp/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/steamcommunity/node_modules/steam-totp/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n(__webpack_require__(/*! @doctormckay/stats-reporter */ \"(rsc)/./node_modules/@doctormckay/stats-reporter/index.js\").setup)(__webpack_require__(/*! ./package.json */ \"(rsc)/./node_modules/steamcommunity/node_modules/steam-totp/package.json\"));\r\n\r\nvar Crypto = __webpack_require__(/*! crypto */ \"crypto\");\r\n\r\n/**\r\n * Returns the current local Unix time\r\n * @param {number} [timeOffset=0] - This many seconds will be added to the returned time\r\n * @returns {number}\r\n */\r\nexports.time = function(timeOffset) {\r\n\treturn Math.floor(Date.now() / 1000) + (timeOffset || 0);\r\n};\r\n\r\n/**\r\n * Generate a Steam-style TOTP authentication code.\r\n * @param {Buffer|string} secret - Your TOTP shared_secret as a Buffer, hex, or base64\r\n * @param {number} [timeOffset=0] - If you know how far off your clock is from the Steam servers, put the offset here in seconds\r\n * @returns {string}\r\n */\r\nexports.generateAuthCode = exports.getAuthCode = function(secret, timeOffset) {\r\n\tif (typeof timeOffset === 'function') {\r\n\t\texports.getTimeOffset(function(err, offset, latency) {\r\n\t\t\tif (err) {\r\n\t\t\t\ttimeOffset(err);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar code = exports.generateAuthCode(secret, offset);\r\n\t\t\ttimeOffset(null, code, offset, latency);\r\n\t\t});\r\n\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tsecret = bufferizeSecret(secret);\r\n\r\n\tvar time = exports.time(timeOffset);\r\n\r\n\tvar buffer = new Buffer(8);\r\n\tbuffer.writeUInt32BE(0, 0); // This will stop working in 2038!\r\n\tbuffer.writeUInt32BE(Math.floor(time / 30), 4);\r\n\r\n\tvar hmac = Crypto.createHmac('sha1', secret);\r\n\thmac = hmac.update(buffer).digest();\r\n\r\n\tvar start = hmac[19] & 0x0F;\r\n\thmac = hmac.slice(start, start + 4);\r\n\r\n\tvar fullcode = hmac.readUInt32BE(0) & 0x7FFFFFFF;\r\n\r\n\tvar chars = '23456789BCDFGHJKMNPQRTVWXY';\r\n\r\n\tvar code = '';\r\n\tfor(var i = 0; i < 5; i++) {\r\n\t\tcode += chars.charAt(fullcode % chars.length);\r\n\t\tfullcode /= chars.length;\r\n\t}\r\n\r\n\treturn code;\r\n};\r\n\r\n/**\r\n * Generate a base64 confirmation key for use with mobile trade confirmations. The key can only be used once.\r\n * @param {Buffer|string} identitySecret - The identity_secret that you received when enabling two-factor authentication\r\n * @param {number} time - The Unix time for which you are generating this secret. Generally should be the current time.\r\n * @param {string} tag - The tag which identifies what this request (and therefore key) will be for. \"conf\" to load the confirmations page, \"details\" to load details about a trade, \"allow\" to confirm a trade, \"cancel\" to cancel it.\r\n * @returns {string}\r\n */\r\nexports.generateConfirmationKey = exports.getConfirmationKey = function(identitySecret, time, tag) {\r\n\tidentitySecret = bufferizeSecret(identitySecret);\r\n\r\n\tvar dataLen = 8;\r\n\r\n\tif(tag) {\r\n\t\tif(tag.length > 32) {\r\n\t\t\tdataLen += 32;\r\n\t\t} else {\r\n\t\t\tdataLen += tag.length;\r\n\t\t}\r\n\t}\r\n\r\n\tvar buffer = new Buffer(dataLen);\r\n\tbuffer.writeUInt32BE(0, 0); // This will stop working in 2038!\r\n\tbuffer.writeUInt32BE(time, 4);\r\n\r\n\tif(tag) {\r\n\t\tbuffer.write(tag, 8);\r\n\t}\r\n\r\n\tvar hmac = Crypto.createHmac('sha1', identitySecret);\r\n\treturn hmac.update(buffer).digest('base64');\r\n};\r\n\r\nexports.getTimeOffset = function(callback) {\r\n\tvar start = Date.now();\r\n\tvar req = (__webpack_require__(/*! https */ \"https\").request)({\r\n\t\t\"hostname\": \"api.steampowered.com\",\r\n\t\t\"path\": \"/ITwoFactorService/QueryTime/v1/\",\r\n\t\t\"method\": \"POST\",\r\n\t\t\"headers\": {\r\n\t\t\t\"Content-Length\": 0\r\n\t\t}\r\n\t}, function(res) {\r\n\t\tif(res.statusCode != 200) {\r\n\t\t\tcallback(new Error(\"HTTP error \" + res.statusCode));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar response = '';\r\n\t\tres.on('data', function(chunk) {\r\n\t\t\tresponse += chunk;\r\n\t\t});\r\n\r\n\t\tres.on('end', function() {\r\n\t\t\ttry {\r\n\t\t\t\tresponse = JSON.parse(response).response;\r\n\t\t\t} catch(e) {\r\n\t\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\t}\r\n\r\n\t\t\tif(!response || !response.server_time) {\r\n\t\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\t}\r\n\r\n\t\t\tvar end = Date.now();\r\n\t\t\tvar offset = response.server_time - exports.time();\r\n\r\n\t\t\tcallback(null, offset, end - start);\r\n\t\t});\r\n\t});\r\n\r\n\treq.on('error', function(err) {\r\n\t\tcallback(err);\r\n\t});\r\n\r\n\treq.end();\r\n};\r\n\r\n/**\r\n * Get a standardized device ID based on your SteamID.\r\n * @param {string|object} steamID - Your SteamID, either as a string or as an object which has a toString() method that returns the SteamID\r\n * @returns {string}\r\n */\r\nexports.getDeviceID = function(steamID) {\r\n\tlet salt = process.env.STEAM_TOTP_SALT || '';\r\n\treturn \"android:\" + Crypto.createHash('sha1').update(steamID.toString() + salt).digest('hex')\r\n\t\t\t.replace(/^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12}).*$/, '$1-$2-$3-$4-$5');\r\n};\r\n\r\nfunction bufferizeSecret(secret) {\r\n\tif(typeof secret === 'string') {\r\n\t\t// Check if it's hex\r\n\t\tif(secret.match(/[0-9a-f]{40}/i)) {\r\n\t\t\treturn new Buffer(secret, 'hex');\r\n\t\t} else {\r\n\t\t\t// Looks like it's base64\r\n\t\t\treturn new Buffer(secret, 'base64');\r\n\t\t}\r\n\t}\r\n\r\n\treturn secret;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/node_modules/steam-totp/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/resources/EChatState.js":
/*!*************************************************************!*\
  !*** ./node_modules/steamcommunity/resources/EChatState.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("/**\n * @enum EChatState\n */\nmodule.exports = {\n\t\"Offline\": 0,\n\t\"LoggingOn\": 1,\n\t\"LogOnFailed\": 2,\n\t\"LoggedOn\": 3,\n\n\t\"0\": \"Offline\",\n\t\"1\": \"LoggingOn\",\n\t\"2\": \"LogOnFailed\",\n\t\"3\": \"LoggedOn\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvcmVzb3VyY2VzL0VDaGF0U3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3MyLXNraW4tdHJhY2tlci8uL25vZGVfbW9kdWxlcy9zdGVhbWNvbW11bml0eS9yZXNvdXJjZXMvRUNoYXRTdGF0ZS5qcz80NDZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGVudW0gRUNoYXRTdGF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0XCJPZmZsaW5lXCI6IDAsXG5cdFwiTG9nZ2luZ09uXCI6IDEsXG5cdFwiTG9nT25GYWlsZWRcIjogMixcblx0XCJMb2dnZWRPblwiOiAzLFxuXG5cdFwiMFwiOiBcIk9mZmxpbmVcIixcblx0XCIxXCI6IFwiTG9nZ2luZ09uXCIsXG5cdFwiMlwiOiBcIkxvZ09uRmFpbGVkXCIsXG5cdFwiM1wiOiBcIkxvZ2dlZE9uXCJcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/resources/EChatState.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/resources/EConfirmationType.js":
/*!********************************************************************!*\
  !*** ./node_modules/steamcommunity/resources/EConfirmationType.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("/**\n * @enum EConfirmationType\n */\nmodule.exports = {\n\t// 1 is unknown, possibly \"Invalid\"\n\t\"Trade\": 2,\n\t\"MarketListing\": 3,\n\t// 4 is opt-out or other like account confirmation?\n\n\t\"2\": \"Trade\",\n\t\"3\": \"MarketListing\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvcmVzb3VyY2VzL0VDb25maXJtYXRpb25UeXBlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3MyLXNraW4tdHJhY2tlci8uL25vZGVfbW9kdWxlcy9zdGVhbWNvbW11bml0eS9yZXNvdXJjZXMvRUNvbmZpcm1hdGlvblR5cGUuanM/NzMxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBlbnVtIEVDb25maXJtYXRpb25UeXBlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuXHQvLyAxIGlzIHVua25vd24sIHBvc3NpYmx5IFwiSW52YWxpZFwiXG5cdFwiVHJhZGVcIjogMixcblx0XCJNYXJrZXRMaXN0aW5nXCI6IDMsXG5cdC8vIDQgaXMgb3B0LW91dCBvciBvdGhlciBsaWtlIGFjY291bnQgY29uZmlybWF0aW9uP1xuXG5cdFwiMlwiOiBcIlRyYWRlXCIsXG5cdFwiM1wiOiBcIk1hcmtldExpc3RpbmdcIlxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/resources/EConfirmationType.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/resources/EFriendRelationship.js":
/*!**********************************************************************!*\
  !*** ./node_modules/steamcommunity/resources/EFriendRelationship.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("/**\n * @enum EFriendRelationship\n */\n module.exports = {\n\t\"None\": 0,\n\t\"Blocked\": 1,\n\t\"RequestRecipient\": 2,\n\t\"Friend\": 3,\n\t\"RequestInitiator\": 4,\n\t\"Ignored\": 5,\n\t\"IgnoredFriend\": 6,\n\t\"SuggestedFriend\": 7, // removed \"was used by the original implementation of the facebook linking feature; but now unused.\"\n\n\t// Value-to-name mapping for convenience\n\t\"0\": \"None\",\n\t\"1\": \"Blocked\",\n\t\"2\": \"RequestRecipient\",\n\t\"3\": \"Friend\",\n\t\"4\": \"RequestInitiator\",\n\t\"5\": \"Ignored\",\n\t\"6\": \"IgnoredFriend\",\n\t\"7\": \"SuggestedFriend\",\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvcmVzb3VyY2VzL0VGcmllbmRSZWxhdGlvbnNoaXAuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRHQUE0Rzs7QUFFNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jczItc2tpbi10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3N0ZWFtY29tbXVuaXR5L3Jlc291cmNlcy9FRnJpZW5kUmVsYXRpb25zaGlwLmpzP2RmN2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZW51bSBFRnJpZW5kUmVsYXRpb25zaGlwXG4gKi9cbiBtb2R1bGUuZXhwb3J0cyA9IHtcblx0XCJOb25lXCI6IDAsXG5cdFwiQmxvY2tlZFwiOiAxLFxuXHRcIlJlcXVlc3RSZWNpcGllbnRcIjogMixcblx0XCJGcmllbmRcIjogMyxcblx0XCJSZXF1ZXN0SW5pdGlhdG9yXCI6IDQsXG5cdFwiSWdub3JlZFwiOiA1LFxuXHRcIklnbm9yZWRGcmllbmRcIjogNixcblx0XCJTdWdnZXN0ZWRGcmllbmRcIjogNywgLy8gcmVtb3ZlZCBcIndhcyB1c2VkIGJ5IHRoZSBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgZmFjZWJvb2sgbGlua2luZyBmZWF0dXJlOyBidXQgbm93IHVudXNlZC5cIlxuXG5cdC8vIFZhbHVlLXRvLW5hbWUgbWFwcGluZyBmb3IgY29udmVuaWVuY2Vcblx0XCIwXCI6IFwiTm9uZVwiLFxuXHRcIjFcIjogXCJCbG9ja2VkXCIsXG5cdFwiMlwiOiBcIlJlcXVlc3RSZWNpcGllbnRcIixcblx0XCIzXCI6IFwiRnJpZW5kXCIsXG5cdFwiNFwiOiBcIlJlcXVlc3RJbml0aWF0b3JcIixcblx0XCI1XCI6IFwiSWdub3JlZFwiLFxuXHRcIjZcIjogXCJJZ25vcmVkRnJpZW5kXCIsXG5cdFwiN1wiOiBcIlN1Z2dlc3RlZEZyaWVuZFwiLFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/resources/EFriendRelationship.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/resources/EPersonaState.js":
/*!****************************************************************!*\
  !*** ./node_modules/steamcommunity/resources/EPersonaState.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("/**\n * @enum EPersonaState\n */\nmodule.exports = {\n\t\"Offline\": 0,\n\t\"Online\": 1,\n\t\"Busy\": 2,\n\t\"Away\": 3,\n\t\"Snooze\": 4,\n\t\"LookingToTrade\": 5,\n\t\"LookingToPlay\": 6,\n\t\"Invisible\": 7,\n\n\t// Value-to-name mapping for convenience\n\t\"0\": \"Offline\",\n\t\"1\": \"Online\",\n\t\"2\": \"Busy\",\n\t\"3\": \"Away\",\n\t\"4\": \"Snooze\",\n\t\"5\": \"LookingToTrade\",\n\t\"6\": \"LookingToPlay\",\n\t\"7\": \"Invisible\",\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvcmVzb3VyY2VzL0VQZXJzb25hU3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3MyLXNraW4tdHJhY2tlci8uL25vZGVfbW9kdWxlcy9zdGVhbWNvbW11bml0eS9yZXNvdXJjZXMvRVBlcnNvbmFTdGF0ZS5qcz85ODJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGVudW0gRVBlcnNvbmFTdGF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0XCJPZmZsaW5lXCI6IDAsXG5cdFwiT25saW5lXCI6IDEsXG5cdFwiQnVzeVwiOiAyLFxuXHRcIkF3YXlcIjogMyxcblx0XCJTbm9vemVcIjogNCxcblx0XCJMb29raW5nVG9UcmFkZVwiOiA1LFxuXHRcIkxvb2tpbmdUb1BsYXlcIjogNixcblx0XCJJbnZpc2libGVcIjogNyxcblxuXHQvLyBWYWx1ZS10by1uYW1lIG1hcHBpbmcgZm9yIGNvbnZlbmllbmNlXG5cdFwiMFwiOiBcIk9mZmxpbmVcIixcblx0XCIxXCI6IFwiT25saW5lXCIsXG5cdFwiMlwiOiBcIkJ1c3lcIixcblx0XCIzXCI6IFwiQXdheVwiLFxuXHRcIjRcIjogXCJTbm9vemVcIixcblx0XCI1XCI6IFwiTG9va2luZ1RvVHJhZGVcIixcblx0XCI2XCI6IFwiTG9va2luZ1RvUGxheVwiLFxuXHRcIjdcIjogXCJJbnZpc2libGVcIixcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/resources/EPersonaState.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/resources/EPersonaStateFlag.js":
/*!********************************************************************!*\
  !*** ./node_modules/steamcommunity/resources/EPersonaStateFlag.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("/**\n * @enum EPersonaStateFlag\n */\nmodule.exports = {\n\t\"HasRichPresence\": 1,\n\t\"InJoinableGame\": 2,\n\t\"Golden\": 4,\n\t\"RemotePlayTogether\": 8,\n\t\"OnlineUsingWeb\": 256, // removed \"renamed to ClientTypeWeb\"\n\t\"ClientTypeWeb\": 256,\n\t\"OnlineUsingMobile\": 512, // removed \"renamed to ClientTypeMobile\"\n\t\"ClientTypeMobile\": 512,\n\t\"OnlineUsingBigPicture\": 1024, // removed \"renamed to ClientTypeTenfoot\"\n\t\"ClientTypeTenfoot\": 1024,\n\t\"OnlineUsingVR\": 2048, // removed \"renamed to ClientTypeVR\"\n\t\"ClientTypeVR\": 2048,\n\t\"LaunchTypeGamepad\": 4096,\n\t\"LaunchTypeCompatTool\": 8192,\n\n\t// Value-to-name mapping for convenience\n\t\"1\": \"HasRichPresence\",\n\t\"2\": \"InJoinableGame\",\n\t\"4\": \"Golden\",\n\t\"8\": \"RemotePlayTogether\",\n\t\"256\": \"ClientTypeWeb\",\n\t\"512\": \"ClientTypeMobile\",\n\t\"1024\": \"ClientTypeTenfoot\",\n\t\"2048\": \"ClientTypeVR\",\n\t\"4096\": \"LaunchTypeGamepad\",\n\t\"8192\": \"LaunchTypeCompatTool\",\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvcmVzb3VyY2VzL0VQZXJzb25hU3RhdGVGbGFnLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jczItc2tpbi10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3N0ZWFtY29tbXVuaXR5L3Jlc291cmNlcy9FUGVyc29uYVN0YXRlRmxhZy5qcz80YTY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGVudW0gRVBlcnNvbmFTdGF0ZUZsYWdcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cdFwiSGFzUmljaFByZXNlbmNlXCI6IDEsXG5cdFwiSW5Kb2luYWJsZUdhbWVcIjogMixcblx0XCJHb2xkZW5cIjogNCxcblx0XCJSZW1vdGVQbGF5VG9nZXRoZXJcIjogOCxcblx0XCJPbmxpbmVVc2luZ1dlYlwiOiAyNTYsIC8vIHJlbW92ZWQgXCJyZW5hbWVkIHRvIENsaWVudFR5cGVXZWJcIlxuXHRcIkNsaWVudFR5cGVXZWJcIjogMjU2LFxuXHRcIk9ubGluZVVzaW5nTW9iaWxlXCI6IDUxMiwgLy8gcmVtb3ZlZCBcInJlbmFtZWQgdG8gQ2xpZW50VHlwZU1vYmlsZVwiXG5cdFwiQ2xpZW50VHlwZU1vYmlsZVwiOiA1MTIsXG5cdFwiT25saW5lVXNpbmdCaWdQaWN0dXJlXCI6IDEwMjQsIC8vIHJlbW92ZWQgXCJyZW5hbWVkIHRvIENsaWVudFR5cGVUZW5mb290XCJcblx0XCJDbGllbnRUeXBlVGVuZm9vdFwiOiAxMDI0LFxuXHRcIk9ubGluZVVzaW5nVlJcIjogMjA0OCwgLy8gcmVtb3ZlZCBcInJlbmFtZWQgdG8gQ2xpZW50VHlwZVZSXCJcblx0XCJDbGllbnRUeXBlVlJcIjogMjA0OCxcblx0XCJMYXVuY2hUeXBlR2FtZXBhZFwiOiA0MDk2LFxuXHRcIkxhdW5jaFR5cGVDb21wYXRUb29sXCI6IDgxOTIsXG5cblx0Ly8gVmFsdWUtdG8tbmFtZSBtYXBwaW5nIGZvciBjb252ZW5pZW5jZVxuXHRcIjFcIjogXCJIYXNSaWNoUHJlc2VuY2VcIixcblx0XCIyXCI6IFwiSW5Kb2luYWJsZUdhbWVcIixcblx0XCI0XCI6IFwiR29sZGVuXCIsXG5cdFwiOFwiOiBcIlJlbW90ZVBsYXlUb2dldGhlclwiLFxuXHRcIjI1NlwiOiBcIkNsaWVudFR5cGVXZWJcIixcblx0XCI1MTJcIjogXCJDbGllbnRUeXBlTW9iaWxlXCIsXG5cdFwiMTAyNFwiOiBcIkNsaWVudFR5cGVUZW5mb290XCIsXG5cdFwiMjA0OFwiOiBcIkNsaWVudFR5cGVWUlwiLFxuXHRcIjQwOTZcIjogXCJMYXVuY2hUeXBlR2FtZXBhZFwiLFxuXHRcIjgxOTJcIjogXCJMYXVuY2hUeXBlQ29tcGF0VG9vbFwiLFxufTtcblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/resources/EPersonaStateFlag.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/resources/EResult.js":
/*!**********************************************************!*\
  !*** ./node_modules/steamcommunity/resources/EResult.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("/**\n * @enum EResult\n */\nmodule.exports = {\n\t\"Invalid\": 0,\n\t\"OK\": 1,\n\t\"Fail\": 2,\n\t\"NoConnection\": 3,\n\t\"InvalidPassword\": 5,\n\t\"LoggedInElsewhere\": 6,\n\t\"InvalidProtocolVer\": 7,\n\t\"InvalidParam\": 8,\n\t\"FileNotFound\": 9,\n\t\"Busy\": 10,\n\t\"InvalidState\": 11,\n\t\"InvalidName\": 12,\n\t\"InvalidEmail\": 13,\n\t\"DuplicateName\": 14,\n\t\"AccessDenied\": 15,\n\t\"Timeout\": 16,\n\t\"Banned\": 17,\n\t\"AccountNotFound\": 18,\n\t\"InvalidSteamID\": 19,\n\t\"ServiceUnavailable\": 20,\n\t\"NotLoggedOn\": 21,\n\t\"Pending\": 22,\n\t\"EncryptionFailure\": 23,\n\t\"InsufficientPrivilege\": 24,\n\t\"LimitExceeded\": 25,\n\t\"Revoked\": 26,\n\t\"Expired\": 27,\n\t\"AlreadyRedeemed\": 28,\n\t\"DuplicateRequest\": 29,\n\t\"AlreadyOwned\": 30,\n\t\"IPNotFound\": 31,\n\t\"PersistFailed\": 32,\n\t\"LockingFailed\": 33,\n\t\"LogonSessionReplaced\": 34,\n\t\"ConnectFailed\": 35,\n\t\"HandshakeFailed\": 36,\n\t\"IOFailure\": 37,\n\t\"RemoteDisconnect\": 38,\n\t\"ShoppingCartNotFound\": 39,\n\t\"Blocked\": 40,\n\t\"Ignored\": 41,\n\t\"NoMatch\": 42,\n\t\"AccountDisabled\": 43,\n\t\"ServiceReadOnly\": 44,\n\t\"AccountNotFeatured\": 45,\n\t\"AdministratorOK\": 46,\n\t\"ContentVersion\": 47,\n\t\"TryAnotherCM\": 48,\n\t\"PasswordRequiredToKickSession\": 49,\n\t\"AlreadyLoggedInElsewhere\": 50,\n\t\"Suspended\": 51,\n\t\"Cancelled\": 52,\n\t\"DataCorruption\": 53,\n\t\"DiskFull\": 54,\n\t\"RemoteCallFailed\": 55,\n\t\"PasswordNotSet\": 56, // removed \"renamed to PasswordUnset\"\n\t\"PasswordUnset\": 56,\n\t\"ExternalAccountUnlinked\": 57,\n\t\"PSNTicketInvalid\": 58,\n\t\"ExternalAccountAlreadyLinked\": 59,\n\t\"RemoteFileConflict\": 60,\n\t\"IllegalPassword\": 61,\n\t\"SameAsPreviousValue\": 62,\n\t\"AccountLogonDenied\": 63,\n\t\"CannotUseOldPassword\": 64,\n\t\"InvalidLoginAuthCode\": 65,\n\t\"AccountLogonDeniedNoMailSent\": 66, // removed \"renamed to AccountLogonDeniedNoMail\"\n\t\"AccountLogonDeniedNoMail\": 66,\n\t\"HardwareNotCapableOfIPT\": 67,\n\t\"IPTInitError\": 68,\n\t\"ParentalControlRestricted\": 69,\n\t\"FacebookQueryError\": 70,\n\t\"ExpiredLoginAuthCode\": 71,\n\t\"IPLoginRestrictionFailed\": 72,\n\t\"AccountLocked\": 73, // removed \"renamed to AccountLockedDown\"\n\t\"AccountLockedDown\": 73,\n\t\"AccountLogonDeniedVerifiedEmailRequired\": 74,\n\t\"NoMatchingURL\": 75,\n\t\"BadResponse\": 76,\n\t\"RequirePasswordReEntry\": 77,\n\t\"ValueOutOfRange\": 78,\n\t\"UnexpectedError\": 79,\n\t\"Disabled\": 80,\n\t\"InvalidCEGSubmission\": 81,\n\t\"RestrictedDevice\": 82,\n\t\"RegionLocked\": 83,\n\t\"RateLimitExceeded\": 84,\n\t\"AccountLogonDeniedNeedTwoFactorCode\": 85, // removed \"renamed to AccountLoginDeniedNeedTwoFactor\"\n\t\"AccountLoginDeniedNeedTwoFactor\": 85,\n\t\"ItemOrEntryHasBeenDeleted\": 86, // removed \"renamed to ItemDeleted\"\n\t\"ItemDeleted\": 86,\n\t\"AccountLoginDeniedThrottle\": 87,\n\t\"TwoFactorCodeMismatch\": 88,\n\t\"TwoFactorActivationCodeMismatch\": 89,\n\t\"AccountAssociatedToMultiplePlayers\": 90, // removed \"renamed to AccountAssociatedToMultiplePartners\"\n\t\"AccountAssociatedToMultiplePartners\": 90,\n\t\"NotModified\": 91,\n\t\"NoMobileDeviceAvailable\": 92, // removed \"renamed to NoMobileDevice\"\n\t\"NoMobileDevice\": 92,\n\t\"TimeIsOutOfSync\": 93, // removed \"renamed to TimeNotSynced\"\n\t\"TimeNotSynced\": 93,\n\t\"SMSCodeFailed\": 94,\n\t\"TooManyAccountsAccessThisResource\": 95, // removed \"renamed to AccountLimitExceeded\"\n\t\"AccountLimitExceeded\": 95,\n\t\"AccountActivityLimitExceeded\": 96,\n\t\"PhoneActivityLimitExceeded\": 97,\n\t\"RefundToWallet\": 98,\n\t\"EmailSendFailure\": 99,\n\t\"NotSettled\": 100,\n\t\"NeedCaptcha\": 101,\n\t\"GSLTDenied\": 102,\n\t\"GSOwnerDenied\": 103,\n\t\"InvalidItemType\": 104,\n\t\"IPBanned\": 105,\n\t\"GSLTExpired\": 106,\n\t\"InsufficientFunds\": 107,\n\t\"TooManyPending\": 108,\n\t\"NoSiteLicensesFound\": 109,\n\t\"WGNetworkSendExceeded\": 110,\n\t\"AccountNotFriends\": 111,\n\t\"LimitedUserAccount\": 112,\n\t\"CantRemoveItem\": 113,\n\t\"AccountHasBeenDeleted\": 114,\n\t\"AccountHasAnExistingUserCancelledLicense\": 115,\n\t\"DeniedDueToCommunityCooldown\": 116,\n\t\"NoLauncherSpecified\": 117,\n\t\"MustAgreeToSSA\": 118,\n\t\"ClientNoLongerSupported\": 119,\n\n\t// Value-to-name mapping for convenience\n\t\"0\": \"Invalid\",\n\t\"1\": \"OK\",\n\t\"2\": \"Fail\",\n\t\"3\": \"NoConnection\",\n\t\"5\": \"InvalidPassword\",\n\t\"6\": \"LoggedInElsewhere\",\n\t\"7\": \"InvalidProtocolVer\",\n\t\"8\": \"InvalidParam\",\n\t\"9\": \"FileNotFound\",\n\t\"10\": \"Busy\",\n\t\"11\": \"InvalidState\",\n\t\"12\": \"InvalidName\",\n\t\"13\": \"InvalidEmail\",\n\t\"14\": \"DuplicateName\",\n\t\"15\": \"AccessDenied\",\n\t\"16\": \"Timeout\",\n\t\"17\": \"Banned\",\n\t\"18\": \"AccountNotFound\",\n\t\"19\": \"InvalidSteamID\",\n\t\"20\": \"ServiceUnavailable\",\n\t\"21\": \"NotLoggedOn\",\n\t\"22\": \"Pending\",\n\t\"23\": \"EncryptionFailure\",\n\t\"24\": \"InsufficientPrivilege\",\n\t\"25\": \"LimitExceeded\",\n\t\"26\": \"Revoked\",\n\t\"27\": \"Expired\",\n\t\"28\": \"AlreadyRedeemed\",\n\t\"29\": \"DuplicateRequest\",\n\t\"30\": \"AlreadyOwned\",\n\t\"31\": \"IPNotFound\",\n\t\"32\": \"PersistFailed\",\n\t\"33\": \"LockingFailed\",\n\t\"34\": \"LogonSessionReplaced\",\n\t\"35\": \"ConnectFailed\",\n\t\"36\": \"HandshakeFailed\",\n\t\"37\": \"IOFailure\",\n\t\"38\": \"RemoteDisconnect\",\n\t\"39\": \"ShoppingCartNotFound\",\n\t\"40\": \"Blocked\",\n\t\"41\": \"Ignored\",\n\t\"42\": \"NoMatch\",\n\t\"43\": \"AccountDisabled\",\n\t\"44\": \"ServiceReadOnly\",\n\t\"45\": \"AccountNotFeatured\",\n\t\"46\": \"AdministratorOK\",\n\t\"47\": \"ContentVersion\",\n\t\"48\": \"TryAnotherCM\",\n\t\"49\": \"PasswordRequiredToKickSession\",\n\t\"50\": \"AlreadyLoggedInElsewhere\",\n\t\"51\": \"Suspended\",\n\t\"52\": \"Cancelled\",\n\t\"53\": \"DataCorruption\",\n\t\"54\": \"DiskFull\",\n\t\"55\": \"RemoteCallFailed\",\n\t\"56\": \"PasswordUnset\",\n\t\"57\": \"ExternalAccountUnlinked\",\n\t\"58\": \"PSNTicketInvalid\",\n\t\"59\": \"ExternalAccountAlreadyLinked\",\n\t\"60\": \"RemoteFileConflict\",\n\t\"61\": \"IllegalPassword\",\n\t\"62\": \"SameAsPreviousValue\",\n\t\"63\": \"AccountLogonDenied\",\n\t\"64\": \"CannotUseOldPassword\",\n\t\"65\": \"InvalidLoginAuthCode\",\n\t\"66\": \"AccountLogonDeniedNoMail\",\n\t\"67\": \"HardwareNotCapableOfIPT\",\n\t\"68\": \"IPTInitError\",\n\t\"69\": \"ParentalControlRestricted\",\n\t\"70\": \"FacebookQueryError\",\n\t\"71\": \"ExpiredLoginAuthCode\",\n\t\"72\": \"IPLoginRestrictionFailed\",\n\t\"73\": \"AccountLockedDown\",\n\t\"74\": \"AccountLogonDeniedVerifiedEmailRequired\",\n\t\"75\": \"NoMatchingURL\",\n\t\"76\": \"BadResponse\",\n\t\"77\": \"RequirePasswordReEntry\",\n\t\"78\": \"ValueOutOfRange\",\n\t\"79\": \"UnexpectedError\",\n\t\"80\": \"Disabled\",\n\t\"81\": \"InvalidCEGSubmission\",\n\t\"82\": \"RestrictedDevice\",\n\t\"83\": \"RegionLocked\",\n\t\"84\": \"RateLimitExceeded\",\n\t\"85\": \"AccountLoginDeniedNeedTwoFactor\",\n\t\"86\": \"ItemDeleted\",\n\t\"87\": \"AccountLoginDeniedThrottle\",\n\t\"88\": \"TwoFactorCodeMismatch\",\n\t\"89\": \"TwoFactorActivationCodeMismatch\",\n\t\"90\": \"AccountAssociatedToMultiplePartners\",\n\t\"91\": \"NotModified\",\n\t\"92\": \"NoMobileDevice\",\n\t\"93\": \"TimeNotSynced\",\n\t\"94\": \"SMSCodeFailed\",\n\t\"95\": \"AccountLimitExceeded\",\n\t\"96\": \"AccountActivityLimitExceeded\",\n\t\"97\": \"PhoneActivityLimitExceeded\",\n\t\"98\": \"RefundToWallet\",\n\t\"99\": \"EmailSendFailure\",\n\t\"100\": \"NotSettled\",\n\t\"101\": \"NeedCaptcha\",\n\t\"102\": \"GSLTDenied\",\n\t\"103\": \"GSOwnerDenied\",\n\t\"104\": \"InvalidItemType\",\n\t\"105\": \"IPBanned\",\n\t\"106\": \"GSLTExpired\",\n\t\"107\": \"InsufficientFunds\",\n\t\"108\": \"TooManyPending\",\n\t\"109\": \"NoSiteLicensesFound\",\n\t\"110\": \"WGNetworkSendExceeded\",\n\t\"111\": \"AccountNotFriends\",\n\t\"112\": \"LimitedUserAccount\",\n\t\"113\": \"CantRemoveItem\",\n\t\"114\": \"AccountHasBeenDeleted\",\n\t\"115\": \"AccountHasAnExistingUserCancelledLicense\",\n\t\"116\": \"DeniedDueToCommunityCooldown\",\n\t\"117\": \"NoLauncherSpecified\",\n\t\"118\": \"MustAgreeToSSA\",\n\t\"119\": \"ClientNoLongerSupported\",\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/resources/EResult.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/resources/ESharedFileType.js":
/*!******************************************************************!*\
  !*** ./node_modules/steamcommunity/resources/ESharedFileType.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("/**\n * @enum ESharedFileType\n */\nmodule.exports = {\n\t\"Screenshot\": 0,\n\t\"Artwork\": 1,\n\t\"Guide\": 2,\n\n\t// Value-to-name mapping for convenience\n\t\"0\": \"Screenshot\",\n\t\"1\": \"Artwork\",\n\t\"2\": \"Guide\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3RlYW1jb21tdW5pdHkvcmVzb3VyY2VzL0VTaGFyZWRGaWxlVHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3MyLXNraW4tdHJhY2tlci8uL25vZGVfbW9kdWxlcy9zdGVhbWNvbW11bml0eS9yZXNvdXJjZXMvRVNoYXJlZEZpbGVUeXBlLmpzP2JjOGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZW51bSBFU2hhcmVkRmlsZVR5cGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cdFwiU2NyZWVuc2hvdFwiOiAwLFxuXHRcIkFydHdvcmtcIjogMSxcblx0XCJHdWlkZVwiOiAyLFxuXG5cdC8vIFZhbHVlLXRvLW5hbWUgbWFwcGluZyBmb3IgY29udmVuaWVuY2Vcblx0XCIwXCI6IFwiU2NyZWVuc2hvdFwiLFxuXHRcIjFcIjogXCJBcnR3b3JrXCIsXG5cdFwiMlwiOiBcIkd1aWRlXCJcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamcommunity/resources/ESharedFileType.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/steamcommunity/node_modules/steam-totp/package.json":
/*!**************************************************************************!*\
  !*** ./node_modules/steamcommunity/node_modules/steam-totp/package.json ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"steam-totp","version":"1.5.0","description":"Generate Steam-style TOTP codes given a secret","keywords":["steam","steam client","steam guard"],"homepage":"https://github.com/DoctorMcKay/node-steam-totp","bugs":{"url":"https://github.com/DoctorMcKay/node-steam-totp/issues"},"license":"MIT","author":{"name":"Alexander Corn","email":"mckay@doctormckay.com","url":"https://www.doctormckay.com"},"dependencies":{"@doctormckay/stats-reporter":"^1.0.0"},"repository":{"type":"git","url":"https://github.com/DoctorMcKay/node-steam-totp.git"}}');

/***/ })

};
;