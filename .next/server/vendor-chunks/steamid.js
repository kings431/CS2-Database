/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/steamid";
exports.ids = ["vendor-chunks/steamid"];
exports.modules = {

/***/ "(rsc)/./node_modules/steamid/index.js":
/*!***************************************!*\
  !*** ./node_modules/steamid/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = SteamID;\r\n\r\nvar UInt64 = (__webpack_require__(/*! cuint */ \"(rsc)/./node_modules/cuint/index.js\").UINT64);\r\n\r\n// Universe constants\r\nSteamID.Universe = {\r\n\t\"INVALID\": 0,\r\n\t\"PUBLIC\": 1,\r\n\t\"BETA\": 2,\r\n\t\"INTERNAL\": 3,\r\n\t\"DEV\": 4\r\n};\r\n\r\n// Type constants\r\nSteamID.Type = {\r\n\t\"INVALID\": 0,\r\n\t\"INDIVIDUAL\": 1,\r\n\t\"MULTISEAT\": 2,\r\n\t\"GAMESERVER\": 3,\r\n\t\"ANON_GAMESERVER\": 4,\r\n\t\"PENDING\": 5,\r\n\t\"CONTENT_SERVER\": 6,\r\n\t\"CLAN\": 7,\r\n\t\"CHAT\": 8,\r\n\t\"P2P_SUPER_SEEDER\": 9,\r\n\t\"ANON_USER\": 10\r\n};\r\n\r\n// Instance constants\r\nSteamID.Instance = {\r\n\t\"ALL\": 0,\r\n\t\"DESKTOP\": 1,\r\n\t\"CONSOLE\": 2,\r\n\t\"WEB\": 4\r\n};\r\n\r\n// Type chars\r\nSteamID.TypeChars = {};\r\nSteamID.TypeChars[SteamID.Type.INVALID] = 'I';\r\nSteamID.TypeChars[SteamID.Type.INDIVIDUAL] = 'U';\r\nSteamID.TypeChars[SteamID.Type.MULTISEAT] = 'M';\r\nSteamID.TypeChars[SteamID.Type.GAMESERVER] = 'G';\r\nSteamID.TypeChars[SteamID.Type.ANON_GAMESERVER] = 'A';\r\nSteamID.TypeChars[SteamID.Type.PENDING] = 'P';\r\nSteamID.TypeChars[SteamID.Type.CONTENT_SERVER] = 'C';\r\nSteamID.TypeChars[SteamID.Type.CLAN] = 'g';\r\nSteamID.TypeChars[SteamID.Type.CHAT] = 'T';\r\nSteamID.TypeChars[SteamID.Type.ANON_USER] = 'a';\r\n\r\nSteamID.AccountIDMask = 0xFFFFFFFF;\r\nSteamID.AccountInstanceMask = 0x000FFFFF;\r\n\r\nSteamID.ChatInstanceFlags = {\r\n\t\"Clan\": (SteamID.AccountInstanceMask + 1) >> 1,\r\n\t\"Lobby\": (SteamID.AccountInstanceMask + 1) >> 2,\r\n\t\"MMSLobby\": (SteamID.AccountInstanceMask + 1) >> 3\r\n};\r\n\r\nfunction SteamID(input) {\r\n\t// Instance variables\r\n\tthis.universe = SteamID.Universe.INVALID;\r\n\tthis.type = SteamID.Type.INVALID;\r\n\tthis.instance = SteamID.Instance.ALL;\r\n\tthis.accountid = 0;\r\n\r\n\tif (!input) {\r\n\t\t// Use the default invalid values\r\n\t\treturn;\r\n\t}\r\n\r\n\tvar matches;\r\n\tif ((matches = input.match(/^STEAM_([0-5]):([0-1]):([0-9]+)$/))) {\r\n\t\t// Steam2 ID\r\n\t\tthis.universe = parseInt(matches[1], 10) || SteamID.Universe.PUBLIC; // If it's 0, turn it into 1 for public\r\n\t\tthis.type = SteamID.Type.INDIVIDUAL;\r\n\t\tthis.instance = SteamID.Instance.DESKTOP;\r\n\t\tthis.accountid = (parseInt(matches[3], 10) * 2) + parseInt(matches[2], 10);\r\n\t} else if ((matches = input.match(/^\\[([a-zA-Z]):([0-5]):([0-9]+)(:[0-9]+)?\\]$/))) {\r\n\t\t// Steam3 ID\r\n\t\tthis.universe = parseInt(matches[2], 10);\r\n\t\tthis.accountid = parseInt(matches[3], 10);\r\n\r\n\t\tvar typeChar = matches[1];\r\n\r\n\t\tif (matches[4]) {\r\n\t\t\tthis.instance = parseInt(matches[4].substring(1), 10);\r\n\t\t} else if (typeChar == 'U') {\r\n\t\t\tthis.instance = SteamID.Instance.DESKTOP;\r\n\t\t}\r\n\r\n\t\tif (typeChar == 'c') {\r\n\t\t\tthis.instance |= SteamID.ChatInstanceFlags.Clan;\r\n\t\t\tthis.type = SteamID.Type.CHAT;\r\n\t\t} else if (typeChar == 'L') {\r\n\t\t\tthis.instance |= SteamID.ChatInstanceFlags.Lobby;\r\n\t\t\tthis.type = SteamID.Type.CHAT;\r\n\t\t} else {\r\n\t\t\tthis.type = getTypeFromChar(typeChar);\r\n\t\t}\r\n\t} else if (isNaN(input)) {\r\n\t\tthrow new Error(\"Unknown SteamID input format \\\"\" + input + \"\\\"\");\r\n\t} else {\r\n\t\tvar num = new UInt64(input, 10);\r\n\t\tthis.accountid = (num.toNumber() & 0xFFFFFFFF) >>> 0;\r\n\t\tthis.instance = num.shiftRight(32).toNumber() & 0xFFFFF;\r\n\t\tthis.type = num.shiftRight(20).toNumber() & 0xF;\r\n\t\tthis.universe = num.shiftRight(4).toNumber();\r\n\t}\r\n}\r\n\r\n/**\r\n * Create an individual SteamID in the public universe given an accountid\r\n * @param {number} accountid - The user's account ID\r\n * @return {SteamID}\r\n */\r\nSteamID.fromIndividualAccountID = function(accountid) {\r\n\tvar parsed = parseInt(accountid, 10);\r\n\tif (isNaN(parsed)) {\r\n\t\t// writes to stderr in node\r\n\t\tconsole.error(\"[steamid] Warning: SteamID.fromIndividualAccountID() called with NaN argument \\\"\" + accountid + \"\\\" (type \" + typeof accountid + \")\");\r\n\t\tparsed = 0;\r\n\t}\r\n\r\n\tvar sid = new SteamID();\r\n\tsid.universe = SteamID.Universe.PUBLIC;\r\n\tsid.type = SteamID.Type.INDIVIDUAL;\r\n\tsid.instance = SteamID.Instance.DESKTOP;\r\n\tsid.accountid = parsed;\r\n\treturn sid;\r\n};\r\n\r\n/**\r\n * Check whether this SteamID is valid (according to Steam's rules)\r\n * @return {boolean}\r\n */\r\nSteamID.prototype.isValid = function() {\r\n\tfixTypes(this);\r\n\r\n\tif (this.type <= SteamID.Type.INVALID || this.type > SteamID.Type.ANON_USER) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (this.universe <= SteamID.Universe.INVALID || this.universe > SteamID.Universe.DEV) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (this.type == SteamID.Type.INDIVIDUAL && (this.accountid === 0 || this.instance > SteamID.Instance.WEB)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (this.type == SteamID.Type.CLAN && (this.accountid === 0 || this.instance != SteamID.Instance.ALL)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (this.type == SteamID.Type.GAMESERVER && this.accountid === 0) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n};\r\n\r\n/**\r\n * Check whether this chat SteamID is tied to a Steam group.\r\n * @return {boolean}\r\n */\r\nSteamID.prototype.isGroupChat = function() {\r\n\tfixTypes(this);\r\n\treturn !!(this.type == SteamID.Type.CHAT && this.instance & SteamID.ChatInstanceFlags.Clan);\r\n};\r\n\r\n/**\r\n * Check whether this chat SteamID is a Steam lobby.\r\n * @return {boolean}\r\n */\r\nSteamID.prototype.isLobby = function() {\r\n\tfixTypes(this);\r\n\treturn !!(this.type == SteamID.Type.CHAT && (this.instance & SteamID.ChatInstanceFlags.Lobby || this.instance & SteamID.ChatInstanceFlags.MMSLobby));\r\n};\r\n\r\n/**\r\n * Render this SteamID into Steam2 textual format\r\n * @param {boolean} [newerFormat=false] - true if you want to use 1 in place of the leading 0 for the public universe\r\n * @return {string}\r\n */\r\nSteamID.prototype.steam2 = SteamID.prototype.getSteam2RenderedID = function(newerFormat) {\r\n\tfixTypes(this);\r\n\tif (this.type != SteamID.Type.INDIVIDUAL) {\r\n\t\tthrow new Error(\"Can't get Steam2 rendered ID for non-individual ID\");\r\n\t} else {\r\n\t\tvar universe = this.universe;\r\n\t\tif (!newerFormat && universe === 1) {\r\n\t\t\tuniverse = 0;\r\n\t\t}\r\n\r\n\t\treturn \"STEAM_\" + universe + ':' + (this.accountid & 1) + ':' + Math.floor(this.accountid / 2);\r\n\t}\r\n};\r\n\r\n/**\r\n * Render this SteamID into Steam3 textual format\r\n * @return {string}\r\n */\r\nSteamID.prototype.steam3 = SteamID.prototype.getSteam3RenderedID = function() {\r\n\tfixTypes(this);\r\n\tvar typeChar = SteamID.TypeChars[this.type] || 'i';\r\n\r\n\tif (this.instance & SteamID.ChatInstanceFlags.Clan) {\r\n\t\ttypeChar = 'c';\r\n\t} else if (this.instance & SteamID.ChatInstanceFlags.Lobby) {\r\n\t\ttypeChar = 'L';\r\n\t}\r\n\r\n\tvar renderInstance = (this.type == SteamID.Type.ANON_GAMESERVER || this.type == SteamID.Type.MULTISEAT || (this.type == SteamID.Type.INDIVIDUAL && this.instance != SteamID.Instance.DESKTOP));\r\n\treturn '[' + typeChar + ':' + this.universe + ':' + this.accountid + (renderInstance ? ':' + this.instance : '') + ']';\r\n};\r\n\r\n/**\r\n * Render this SteamID into 64-bit numeric format\r\n * @return {string}\r\n */\r\nSteamID.prototype.toString = SteamID.prototype.getSteamID64 = function() {\r\n\tfixTypes(this);\r\n\treturn new UInt64(this.accountid, (this.universe << 24) | (this.type << 20) | (this.instance)).toString();\r\n};\r\n\r\n// Private methods/functions\r\nfunction getTypeFromChar(typeChar) {\r\n\tfor (var type in SteamID.TypeChars) {\r\n\t\tif (SteamID.TypeChars[type] == typeChar) {\r\n\t\t\treturn parseInt(type, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn SteamID.Type.INVALID;\r\n}\r\n\r\nfunction fixTypes(sid) {\r\n\t['universe', 'type', 'instance', 'accountid'].forEach(function(prop) {\r\n\t\tvar val = parseInt(sid[prop], 10);\r\n\t\tif (!isNaN(val)) {\r\n\t\t\tsid[prop] = val;\r\n\t\t}\r\n\t});\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steamid/index.js\n");

/***/ })

};
;