/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/binarykvparser";
exports.ids = ["vendor-chunks/binarykvparser"];
exports.modules = {

/***/ "(rsc)/./node_modules/binarykvparser/index.js":
/*!**********************************************!*\
  !*** ./node_modules/binarykvparser/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var Long = __webpack_require__(/*! long */ \"(rsc)/./node_modules/long/dist/long.js\");\r\n\r\nvar Type = {\r\n\t\"None\": 0,\r\n\t\"String\": 1,\r\n\t\"Int32\": 2,\r\n\t\"Float32\": 3,\r\n\t\"Pointer\": 4,\r\n\t\"WideString\": 5,\r\n\t\"Color\": 6,\r\n\t\"UInt64\": 7,\r\n\t\"End\": 8,\r\n\t\"Int64\": 10, // signed\r\n\t\"AlternateEnd\": 11\r\n};\r\n\r\n/**\r\n * Parse a BinaryKeyValues buffer to an object\r\n * @param {Buffer|ByteBuffer} buffer\r\n * @param {int} [offset=0] - Offset where you want to start, defaults to 0 (the beginning of the buffer)\r\n * @returns {object}\r\n */\r\nexports.parse = function(buffer, offset) {\r\n\tif (buffer.toBuffer) {\r\n\t\t// Convert it to a standard Buffer if it's a ByteBuffer\r\n\t\tbuffer = buffer.toBuffer();\r\n\t}\r\n\t\r\n\tvar obj = {};\r\n\tvar type, name, value;\r\n\tvar isRootAndWantsLength = false;\r\n\t\r\n\tif (typeof offset === 'undefined') {\r\n\t\toffset = [0];\r\n\t}\r\n\r\n\tif (arguments[2] == 'I want the length please') {\r\n\t\tisRootAndWantsLength = true;\r\n\t}\r\n\t\r\n\tif (!(offset instanceof Array)) {\r\n\t\toffset = [offset]; // turn this into an array because it needs to be passed by reference later :/\r\n\t}\r\n\t\r\n\twhile (true) {\r\n\t\ttype = buffer.readUInt8(offset[0]);\r\n\t\toffset[0] += 1;\r\n\r\n\t\tif (type == Type.End || type == Type.AlternateEnd) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t\tname = readCString();\r\n\t\t\r\n\t\tif (type === Type.None && !name && !Object.keys(obj).length) {\r\n\t\t\t// Root node\r\n\t\t\tname = readCString();\r\n\t\t}\r\n\t\t\r\n\t\tswitch (type) {\r\n\t\t\tcase Type.None:\r\n\t\t\t\tvalue = exports.parse(buffer, offset);\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase Type.String:\r\n\t\t\t\tvalue = readCString();\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase Type.Int32:\r\n\t\t\tcase Type.Color:\r\n\t\t\tcase Type.Pointer:\r\n\t\t\t\tvalue = buffer.readInt32LE(offset[0]);\r\n\t\t\t\toffset[0] += 4;\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase Type.UInt64:\r\n\t\t\t\tvalue = new Long(buffer.readUInt32LE(offset[0]), buffer.readUInt32LE(offset[0] + 4), true);\r\n\t\t\t\toffset[0] += 8;\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase Type.Int64:\r\n\t\t\t\tvalue = new Long(buffer.readInt32LE(offset[0]), buffer.readInt32LE(offset[0] + 4), false);\r\n\t\t\t\toffset[0] += 8;\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase Type.Float32:\r\n\t\t\t\tvalue = buffer.readFloatLE(offset[0]);\r\n\t\t\t\toffset[0] += 4;\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Unknown KV type \" + type + \" encountered at offset \" + offset[0]);\r\n\t\t}\r\n\t\t\r\n\t\tif (name) {\r\n\t\t\tobj[name] = convertObject(value);\r\n\t\t}\r\n\t}\r\n\r\n\tif (isRootAndWantsLength) {\r\n\t\treturn offset[0];\r\n\t}\r\n\t\r\n\treturn obj;\r\n\t\r\n\tfunction readCString() {\r\n\t\tvar end = buffer.indexOf(0, offset[0]);\r\n\t\tvar str = buffer.toString('utf8', offset[0], end);\r\n\t\toffset[0] = end + 1;\r\n\t\treturn str;\r\n\t}\r\n};\r\n\r\n/**\r\n * Get the length in bytes of the BinaryKV object that starts at the beginning of the provided buffer\r\n * @param {Buffer|ByteBuffer} buffer\r\n * @param {int} [offset=0] - Offset where you want to start, defaults to 0 (the beginning of the buffer)\r\n * @returns {int} - Length of the object in bytes\r\n */\r\nexports.getByteLength = function(buffer, offset) {\r\n\toffset = offset || 0;\r\n\treturn exports.parse(buffer, offset, 'I want the length please') - offset;\r\n};\r\n\r\n/**\r\n * Converts an object to an array if it's an array-like object\r\n * @param {object} obj\r\n * @returns object|array\r\n */\r\nfunction convertObject(obj) {\r\n\tif (typeof obj !== 'object') {\r\n\t\treturn obj;\r\n\t}\r\n\r\n\tvar keys = Object.keys(obj);\r\n\r\n\tvar i;\r\n\tfor (i = 0; i < keys.length; i++) {\r\n\t\tkeys[i] = parseInt(keys[i], 10);\r\n\t\tif (isNaN(keys[i])) {\r\n\t\t\treturn obj;\r\n\t\t}\r\n\t}\r\n\r\n\tkeys.sort(function(a, b) {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t} else {\r\n\t\t\treturn a < b ? -1 : 1;\r\n\t\t}\r\n\t});\r\n\r\n\tfor (i = 0; i < keys.length; i++) {\r\n\t\tif(keys[i] != i) {\r\n\t\t\treturn obj;\r\n\t\t}\r\n\t}\r\n\r\n\tobj.length = keys.length;\r\n\treturn Array.prototype.slice.call(obj);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmluYXJ5a3ZwYXJzZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxtQkFBTyxDQUFDLG9EQUFNO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1CQUFtQjtBQUM5QixXQUFXLEtBQUs7QUFDaEIsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUJBQW1CO0FBQzlCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3MyLXNraW4tdHJhY2tlci8uL25vZGVfbW9kdWxlcy9iaW5hcnlrdnBhcnNlci9pbmRleC5qcz9iODhhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBMb25nID0gcmVxdWlyZSgnbG9uZycpO1xyXG5cclxudmFyIFR5cGUgPSB7XHJcblx0XCJOb25lXCI6IDAsXHJcblx0XCJTdHJpbmdcIjogMSxcclxuXHRcIkludDMyXCI6IDIsXHJcblx0XCJGbG9hdDMyXCI6IDMsXHJcblx0XCJQb2ludGVyXCI6IDQsXHJcblx0XCJXaWRlU3RyaW5nXCI6IDUsXHJcblx0XCJDb2xvclwiOiA2LFxyXG5cdFwiVUludDY0XCI6IDcsXHJcblx0XCJFbmRcIjogOCxcclxuXHRcIkludDY0XCI6IDEwLCAvLyBzaWduZWRcclxuXHRcIkFsdGVybmF0ZUVuZFwiOiAxMVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlIGEgQmluYXJ5S2V5VmFsdWVzIGJ1ZmZlciB0byBhbiBvYmplY3RcclxuICogQHBhcmFtIHtCdWZmZXJ8Qnl0ZUJ1ZmZlcn0gYnVmZmVyXHJcbiAqIEBwYXJhbSB7aW50fSBbb2Zmc2V0PTBdIC0gT2Zmc2V0IHdoZXJlIHlvdSB3YW50IHRvIHN0YXJ0LCBkZWZhdWx0cyB0byAwICh0aGUgYmVnaW5uaW5nIG9mIHRoZSBidWZmZXIpXHJcbiAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAqL1xyXG5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24oYnVmZmVyLCBvZmZzZXQpIHtcclxuXHRpZiAoYnVmZmVyLnRvQnVmZmVyKSB7XHJcblx0XHQvLyBDb252ZXJ0IGl0IHRvIGEgc3RhbmRhcmQgQnVmZmVyIGlmIGl0J3MgYSBCeXRlQnVmZmVyXHJcblx0XHRidWZmZXIgPSBidWZmZXIudG9CdWZmZXIoKTtcclxuXHR9XHJcblx0XHJcblx0dmFyIG9iaiA9IHt9O1xyXG5cdHZhciB0eXBlLCBuYW1lLCB2YWx1ZTtcclxuXHR2YXIgaXNSb290QW5kV2FudHNMZW5ndGggPSBmYWxzZTtcclxuXHRcclxuXHRpZiAodHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdG9mZnNldCA9IFswXTtcclxuXHR9XHJcblxyXG5cdGlmIChhcmd1bWVudHNbMl0gPT0gJ0kgd2FudCB0aGUgbGVuZ3RoIHBsZWFzZScpIHtcclxuXHRcdGlzUm9vdEFuZFdhbnRzTGVuZ3RoID0gdHJ1ZTtcclxuXHR9XHJcblx0XHJcblx0aWYgKCEob2Zmc2V0IGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcblx0XHRvZmZzZXQgPSBbb2Zmc2V0XTsgLy8gdHVybiB0aGlzIGludG8gYW4gYXJyYXkgYmVjYXVzZSBpdCBuZWVkcyB0byBiZSBwYXNzZWQgYnkgcmVmZXJlbmNlIGxhdGVyIDovXHJcblx0fVxyXG5cdFxyXG5cdHdoaWxlICh0cnVlKSB7XHJcblx0XHR0eXBlID0gYnVmZmVyLnJlYWRVSW50OChvZmZzZXRbMF0pO1xyXG5cdFx0b2Zmc2V0WzBdICs9IDE7XHJcblxyXG5cdFx0aWYgKHR5cGUgPT0gVHlwZS5FbmQgfHwgdHlwZSA9PSBUeXBlLkFsdGVybmF0ZUVuZCkge1xyXG5cdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0bmFtZSA9IHJlYWRDU3RyaW5nKCk7XHJcblx0XHRcclxuXHRcdGlmICh0eXBlID09PSBUeXBlLk5vbmUgJiYgIW5hbWUgJiYgIU9iamVjdC5rZXlzKG9iaikubGVuZ3RoKSB7XHJcblx0XHRcdC8vIFJvb3Qgbm9kZVxyXG5cdFx0XHRuYW1lID0gcmVhZENTdHJpbmcoKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0c3dpdGNoICh0eXBlKSB7XHJcblx0XHRcdGNhc2UgVHlwZS5Ob25lOlxyXG5cdFx0XHRcdHZhbHVlID0gZXhwb3J0cy5wYXJzZShidWZmZXIsIG9mZnNldCk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFxyXG5cdFx0XHRjYXNlIFR5cGUuU3RyaW5nOlxyXG5cdFx0XHRcdHZhbHVlID0gcmVhZENTdHJpbmcoKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHJcblx0XHRcdGNhc2UgVHlwZS5JbnQzMjpcclxuXHRcdFx0Y2FzZSBUeXBlLkNvbG9yOlxyXG5cdFx0XHRjYXNlIFR5cGUuUG9pbnRlcjpcclxuXHRcdFx0XHR2YWx1ZSA9IGJ1ZmZlci5yZWFkSW50MzJMRShvZmZzZXRbMF0pO1xyXG5cdFx0XHRcdG9mZnNldFswXSArPSA0O1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcclxuXHRcdFx0Y2FzZSBUeXBlLlVJbnQ2NDpcclxuXHRcdFx0XHR2YWx1ZSA9IG5ldyBMb25nKGJ1ZmZlci5yZWFkVUludDMyTEUob2Zmc2V0WzBdKSwgYnVmZmVyLnJlYWRVSW50MzJMRShvZmZzZXRbMF0gKyA0KSwgdHJ1ZSk7XHJcblx0XHRcdFx0b2Zmc2V0WzBdICs9IDg7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFxyXG5cdFx0XHRjYXNlIFR5cGUuSW50NjQ6XHJcblx0XHRcdFx0dmFsdWUgPSBuZXcgTG9uZyhidWZmZXIucmVhZEludDMyTEUob2Zmc2V0WzBdKSwgYnVmZmVyLnJlYWRJbnQzMkxFKG9mZnNldFswXSArIDQpLCBmYWxzZSk7XHJcblx0XHRcdFx0b2Zmc2V0WzBdICs9IDg7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFxyXG5cdFx0XHRjYXNlIFR5cGUuRmxvYXQzMjpcclxuXHRcdFx0XHR2YWx1ZSA9IGJ1ZmZlci5yZWFkRmxvYXRMRShvZmZzZXRbMF0pO1xyXG5cdFx0XHRcdG9mZnNldFswXSArPSA0O1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIEtWIHR5cGUgXCIgKyB0eXBlICsgXCIgZW5jb3VudGVyZWQgYXQgb2Zmc2V0IFwiICsgb2Zmc2V0WzBdKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0aWYgKG5hbWUpIHtcclxuXHRcdFx0b2JqW25hbWVdID0gY29udmVydE9iamVjdCh2YWx1ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoaXNSb290QW5kV2FudHNMZW5ndGgpIHtcclxuXHRcdHJldHVybiBvZmZzZXRbMF07XHJcblx0fVxyXG5cdFxyXG5cdHJldHVybiBvYmo7XHJcblx0XHJcblx0ZnVuY3Rpb24gcmVhZENTdHJpbmcoKSB7XHJcblx0XHR2YXIgZW5kID0gYnVmZmVyLmluZGV4T2YoMCwgb2Zmc2V0WzBdKTtcclxuXHRcdHZhciBzdHIgPSBidWZmZXIudG9TdHJpbmcoJ3V0ZjgnLCBvZmZzZXRbMF0sIGVuZCk7XHJcblx0XHRvZmZzZXRbMF0gPSBlbmQgKyAxO1xyXG5cdFx0cmV0dXJuIHN0cjtcclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBsZW5ndGggaW4gYnl0ZXMgb2YgdGhlIEJpbmFyeUtWIG9iamVjdCB0aGF0IHN0YXJ0cyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBwcm92aWRlZCBidWZmZXJcclxuICogQHBhcmFtIHtCdWZmZXJ8Qnl0ZUJ1ZmZlcn0gYnVmZmVyXHJcbiAqIEBwYXJhbSB7aW50fSBbb2Zmc2V0PTBdIC0gT2Zmc2V0IHdoZXJlIHlvdSB3YW50IHRvIHN0YXJ0LCBkZWZhdWx0cyB0byAwICh0aGUgYmVnaW5uaW5nIG9mIHRoZSBidWZmZXIpXHJcbiAqIEByZXR1cm5zIHtpbnR9IC0gTGVuZ3RoIG9mIHRoZSBvYmplY3QgaW4gYnl0ZXNcclxuICovXHJcbmV4cG9ydHMuZ2V0Qnl0ZUxlbmd0aCA9IGZ1bmN0aW9uKGJ1ZmZlciwgb2Zmc2V0KSB7XHJcblx0b2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XHJcblx0cmV0dXJuIGV4cG9ydHMucGFyc2UoYnVmZmVyLCBvZmZzZXQsICdJIHdhbnQgdGhlIGxlbmd0aCBwbGVhc2UnKSAtIG9mZnNldDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhbiBvYmplY3QgdG8gYW4gYXJyYXkgaWYgaXQncyBhbiBhcnJheS1saWtlIG9iamVjdFxyXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqXHJcbiAqIEByZXR1cm5zIG9iamVjdHxhcnJheVxyXG4gKi9cclxuZnVuY3Rpb24gY29udmVydE9iamVjdChvYmopIHtcclxuXHRpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcclxuXHRcdHJldHVybiBvYmo7XHJcblx0fVxyXG5cclxuXHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XHJcblxyXG5cdHZhciBpO1xyXG5cdGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRrZXlzW2ldID0gcGFyc2VJbnQoa2V5c1tpXSwgMTApO1xyXG5cdFx0aWYgKGlzTmFOKGtleXNbaV0pKSB7XHJcblx0XHRcdHJldHVybiBvYmo7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRrZXlzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG5cdFx0aWYgKGEgPT0gYikge1xyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiBhIDwgYiA/IC0xIDogMTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0Zm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdGlmKGtleXNbaV0gIT0gaSkge1xyXG5cdFx0XHRyZXR1cm4gb2JqO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0b2JqLmxlbmd0aCA9IGtleXMubGVuZ3RoO1xyXG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmopO1xyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/binarykvparser/index.js\n");

/***/ })

};
;