"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/kvparser";
exports.ids = ["vendor-chunks/kvparser"];
exports.modules = {

/***/ "(rsc)/./node_modules/kvparser/index.js":
/*!****************************************!*\
  !*** ./node_modules/kvparser/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst KvParser = __webpack_require__(/*! ./lib/KvParser.js */ \"(rsc)/./node_modules/kvparser/lib/KvParser.js\");\n\n/**\n * @param {string|Buffer} input\n * @return {object}\n */\nexports.parse = function(input) {\n\t// Support for environments where Buffer isn't defined\n\tif (typeof Buffer == 'function' && Buffer.isBuffer(input)) {\n\t\tinput = input.toString('utf8');\n\t}\n\n\tif (typeof input != 'string') {\n\t\tthrow new Error(`Unexpected type \"${typeof input}\" for parameter 'input'`);\n\t}\n\n\tlet parser = new KvParser(input);\n\treturn parser.parse();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMva3ZwYXJzZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsaUJBQWlCLG1CQUFPLENBQUMsd0VBQW1COztBQUU1QztBQUNBLFdBQVcsZUFBZTtBQUMxQixZQUFZO0FBQ1o7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0MsYUFBYTtBQUNuRDs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jczItc2tpbi10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2t2cGFyc2VyL2luZGV4LmpzP2I0ZjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IEt2UGFyc2VyID0gcmVxdWlyZSgnLi9saWIvS3ZQYXJzZXIuanMnKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ9IGlucHV0XG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbihpbnB1dCkge1xuXHQvLyBTdXBwb3J0IGZvciBlbnZpcm9ubWVudHMgd2hlcmUgQnVmZmVyIGlzbid0IGRlZmluZWRcblx0aWYgKHR5cGVvZiBCdWZmZXIgPT0gJ2Z1bmN0aW9uJyAmJiBCdWZmZXIuaXNCdWZmZXIoaW5wdXQpKSB7XG5cdFx0aW5wdXQgPSBpbnB1dC50b1N0cmluZygndXRmOCcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBpbnB1dCAhPSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCB0eXBlIFwiJHt0eXBlb2YgaW5wdXR9XCIgZm9yIHBhcmFtZXRlciAnaW5wdXQnYCk7XG5cdH1cblxuXHRsZXQgcGFyc2VyID0gbmV3IEt2UGFyc2VyKGlucHV0KTtcblx0cmV0dXJuIHBhcnNlci5wYXJzZSgpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/kvparser/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/kvparser/lib/KvParser.js":
/*!***********************************************!*\
  !*** ./node_modules/kvparser/lib/KvParser.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nconst OPEN_BLOCK = Symbol('OpenBlock');\nconst CLOSE_BLOCK = Symbol('CloseBlock');\n\nconst ParseState = {\n\tExpectRootKey: 1,       // The next thing we read is expected to be a string containing the name of the root key.\n\tExpectRootValue: 2,     // The next thing we read is expected to be OpenBlock for the root.\n\tExpectKey: 3,           // The next thing we read is expected to be a string containing a key name, or CloseBlock\n\tExpectValue: 4          // The next thing we read is expected to be a string containing a value, or OpenBlock\n};\n\nclass KvParser {\n\t/**\n\t * @param {string} inputString\n\t */\n\tconstructor(inputString) {\n\t\tthis._input = inputString;\n\t\tthis._offset = 0;\n\t}\n\n\tparse() {\n\t\tlet state = ParseState.ExpectRootKey;\n\t\tlet parsedObject = {};\n\t\tlet parsePath = [];\n\n\t\t// The name of the key for which we're reading the value\n\t\tlet pendingKey = null;\n\n\t\tparseLoop:\n\t\twhile (true) {\n\t\t\tlet token = this.readToken();\n\n\t\t\tswitch (state) {\n\t\t\t\tcase ParseState.ExpectRootKey:\n\t\t\t\t\tif (typeof token != 'string') {\n\t\t\t\t\t\tthis.unexpectedToken(token, 'string');\n\t\t\t\t\t}\n\n\t\t\t\t\tpendingKey = token;\n\t\t\t\t\tstate = ParseState.ExpectRootValue;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ParseState.ExpectRootValue:\n\t\t\t\t\tif (token != OPEN_BLOCK) {\n\t\t\t\t\t\tthis.unexpectedToken(token, OPEN_BLOCK);\n\t\t\t\t\t}\n\n\t\t\t\t\tparsedObject[pendingKey] = {};\n\t\t\t\t\tparsePath.push(pendingKey);\n\t\t\t\t\tpendingKey = null;\n\t\t\t\t\tstate = ParseState.ExpectKey;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ParseState.ExpectKey:\n\t\t\t\t\tif (typeof token != 'string' && token != CLOSE_BLOCK) {\n\t\t\t\t\t\tthis.unexpectedToken(token, ['string', CLOSE_BLOCK]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof token == 'string') {\n\t\t\t\t\t\tpendingKey = token;\n\t\t\t\t\t\tstate = ParseState.ExpectValue;\n\t\t\t\t\t} else if (token == CLOSE_BLOCK) {\n\t\t\t\t\t\tparsePath.splice(parsePath.length - 1, 1);\n\t\t\t\t\t\tif (parsePath.length == 0) {\n\t\t\t\t\t\t\t// End of file\n\t\t\t\t\t\t\tbreak parseLoop;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate = ParseState.ExpectKey;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ParseState.ExpectValue:\n\t\t\t\t\tif (typeof token != 'string' && token != OPEN_BLOCK) {\n\t\t\t\t\t\tthis.unexpectedToken(token, ['string', OPEN_BLOCK]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof token == 'string') {\n\t\t\t\t\t\tsetObjectPath(parsedObject, parsePath.concat([pendingKey]), token);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparsePath.push(pendingKey);\n\t\t\t\t\t\tsetObjectPath(parsedObject, parsePath, {});\n\t\t\t\t\t}\n\n\t\t\t\t\tpendingKey = null;\n\t\t\t\t\tstate = ParseState.ExpectKey;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Parser is in unexpected state: ${state}`);\n\t\t\t}\n\t\t}\n\n\t\treturn parsedObject;\n\t}\n\n\treadToken() {\n\t\t// A token is one of the following:\n\t\t//   - An unquoted string with no whitespace\n\t\t//   - A quoted string\n\t\t//   - {\n\t\t//   - }\n\n\t\t// Skip any starting whitespace\n\t\tlet char;\n\t\twhile (isWhitespace(char = this.readChar())) {}\n\t\t\n\t\tthis.markTokenStart(-1);\n\t\t\n\t\t// Check if this is a { or }\n\t\tswitch (char) {\n\t\t\tcase '{':\n\t\t\t\treturn OPEN_BLOCK;\n\n\t\t\tcase '}':\n\t\t\t\treturn CLOSE_BLOCK;\n\t\t}\n\n\t\t// This token must be either a string or a comment. Is it a comment?\n\t\tif (char == '/' && this.previewNextChar() == '/') {\n\t\t\t// The rest of the line is a comment\n\t\t\twhile ((char = this.readChar()) != '\\n') {}\n\t\t\t// Got a newline. We can start token processing again.\n\t\t\treturn this.readToken();\n\t\t}\n\t\t\n\t\tthis.markTokenStart(-1);\n\n\t\t// This token is a string. Is it quoted?\n\t\tlet stringIsQuoted = char == '\"';\n\t\tlet nextCharIsEscaped = false;\n\t\tlet token = stringIsQuoted ? '' : char;\n\n\t\twhile (true) {\n\t\t\tchar = this.readChar();\n\n\t\t\t// Inside of a string token, we only care about 4 special cases:\n\t\t\t//   1. The character we read is part of the token as-is if the next char is escaped\n\t\t\t//   2. If the current char is a backslash, flag the next char as escaped\n\t\t\t//   3. If the string is quoted, a quote ends the token\n\t\t\t//   4. If the string is not quoted, whitespace ends the token\n\n\t\t\tif (nextCharIsEscaped) {\n\t\t\t\ttoken += char;\n\t\t\t\tnextCharIsEscaped = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (stringIsQuoted && char == '\\\\') {\n\t\t\t\tnextCharIsEscaped = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (stringIsQuoted && char == '\"') {\n\t\t\t\t// We done\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!stringIsQuoted && isWhitespace(char)) {\n\t\t\t\t// We done also\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Nothing special about this character.\n\t\t\ttoken += char;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Throws an Error because we received a token we didn't expect.\n\t *\n\t * @param {string|Symbol} token\n\t * @param {string|Symbol|array<string|Symbol>} [expected]\n\t */\n\tunexpectedToken(token, expected) {\n\t\tlet msg = `Unexpected token \"${tokenToString(token)}\"`;\n\t\tif (expected) {\n\t\t\texpected = Array.isArray(expected) ? expected : [expected];\n\t\t\tlet expectedStr = expected.map(tokenToString).join(' or ');\n\t\t\tmsg += `; expected ${expectedStr}`;\n\t\t}\n\n\t\tthis.throwTokenError(msg);\n\t}\n\t\n\tthrowTokenError(errorMessage) {\n\t\tlet lineNum = 1;\n\t\tlet colNum = 1;\n\t\t\n\t\tfor (let i = 0; i < this._lastTokenStart; i++) {\n\t\t\tcolNum++;\n\t\t\t\n\t\t\tlet char = this._input[i];\n\t\t\t\n\t\t\tif (char == '\\n') {\n\t\t\t\tlineNum++;\n\t\t\t\tcolNum = 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlet err = new Error(`VDF Syntax Error: ${errorMessage} at line ${lineNum}, column ${colNum}`);\n\t\terr.line = lineNum;\n\t\terr.column = colNum;\n\t\t\n\t\tthrow err;\n\t}\n\t\n\tmarkTokenStart(offset) {\n\t\toffset = offset || 0;\n\t\tthis._lastTokenStart = this._offset + offset;\n\t}\n\n\t/**\n\t * Reads the next character from the input and advances the offset pointer.\n\t *\n\t * @return {string}\n\t */\n\treadChar() {\n\t\tif (this._offset >= this._input.length) {\n\t\t\tthrow new Error('Unexpected end of input');\n\t\t}\n\n\t\treturn this._input[this._offset++];\n\t}\n\n\t/**\n\t * Returns the next character from the input buffer without advancing the offset pointer.\n\t *\n\t * @return {string}\n\t */\n\tpreviewNextChar() {\n\t\tif (this._offset >= this._input.length) {\n\t\t\tthrow new Error('Unexpected end of input');\n\t\t}\n\n\t\treturn this._input[this._offset];\n\t}\n}\n\nfunction isWhitespace(char) {\n\treturn [' ', '\\t', '\\r', '\\n'].indexOf(char) != -1;\n}\n\nfunction setObjectPath(obj, path, value) {\n\tfor (let i = 0; i < path.length - 1; i++) {\n\t\tobj = obj[path[i]];\n\n\t\t// this should never happen\n\t\tif (typeof obj != 'object') {\n\t\t\tthrow new Error('Assertion failed: typeof obj == \\'object\\'');\n\t\t}\n\t}\n\n\tlet prop = path[path.length - 1];\n\tobj[prop] = value;\n}\n\nfunction tokenToString(token) {\n\tif (token == OPEN_BLOCK) {\n\t\treturn '{';\n\t}\n\n\tif (token == CLOSE_BLOCK) {\n\t\treturn '}';\n\t}\n\n\treturn token.toString();\n}\n\nmodule.exports = KvParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/kvparser/lib/KvParser.js\n");

/***/ })

};
;