"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/socks-proxy-agent";
exports.ids = ["vendor-chunks/socks-proxy-agent"];
exports.modules = {

/***/ "(rsc)/./node_modules/socks-proxy-agent/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/socks-proxy-agent/dist/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SocksProxyAgent = void 0;\nconst socks_1 = __webpack_require__(/*! socks */ \"(rsc)/./node_modules/socks/build/index.js\");\nconst agent_base_1 = __webpack_require__(/*! agent-base */ \"(rsc)/./node_modules/agent-base/dist/src/index.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst dns_1 = __importDefault(__webpack_require__(/*! dns */ \"dns\"));\nconst tls_1 = __importDefault(__webpack_require__(/*! tls */ \"tls\"));\nconst debug = (0, debug_1.default)('socks-proxy-agent');\nfunction parseSocksProxy(opts) {\n    var _a;\n    let port = 0;\n    let lookup = false;\n    let type = 5;\n    const host = opts.hostname;\n    if (host == null) {\n        throw new TypeError('No \"host\"');\n    }\n    if (typeof opts.port === 'number') {\n        port = opts.port;\n    }\n    else if (typeof opts.port === 'string') {\n        port = parseInt(opts.port, 10);\n    }\n    // From RFC 1928, Section 3: https://tools.ietf.org/html/rfc1928#section-3\n    // \"The SOCKS service is conventionally located on TCP port 1080\"\n    if (port == null) {\n        port = 1080;\n    }\n    // figure out if we want socks v4 or v5, based on the \"protocol\" used.\n    // Defaults to 5.\n    if (opts.protocol != null) {\n        switch (opts.protocol.replace(':', '')) {\n            case 'socks4':\n                lookup = true;\n            // pass through\n            case 'socks4a':\n                type = 4;\n                break;\n            case 'socks5':\n                lookup = true;\n            // pass through\n            case 'socks': // no version specified, default to 5h\n            case 'socks5h':\n                type = 5;\n                break;\n            default:\n                throw new TypeError(`A \"socks\" protocol must be specified! Got: ${String(opts.protocol)}`);\n        }\n    }\n    if (typeof opts.type !== 'undefined') {\n        if (opts.type === 4 || opts.type === 5) {\n            type = opts.type;\n        }\n        else {\n            throw new TypeError(`\"type\" must be 4 or 5, got: ${String(opts.type)}`);\n        }\n    }\n    const proxy = {\n        host,\n        port,\n        type\n    };\n    let userId = (_a = opts.userId) !== null && _a !== void 0 ? _a : opts.username;\n    let password = opts.password;\n    if (opts.auth != null) {\n        const auth = opts.auth.split(':');\n        userId = auth[0];\n        password = auth[1];\n    }\n    if (userId != null) {\n        Object.defineProperty(proxy, 'userId', {\n            value: userId,\n            enumerable: false\n        });\n    }\n    if (password != null) {\n        Object.defineProperty(proxy, 'password', {\n            value: password,\n            enumerable: false\n        });\n    }\n    return { lookup, proxy };\n}\nconst normalizeProxyOptions = (input) => {\n    let proxyOptions;\n    if (typeof input === 'string') {\n        proxyOptions = new URL(input);\n    }\n    else {\n        proxyOptions = input;\n    }\n    if (proxyOptions == null) {\n        throw new TypeError('a SOCKS proxy server `host` and `port` must be specified!');\n    }\n    return proxyOptions;\n};\nclass SocksProxyAgent extends agent_base_1.Agent {\n    constructor(input, options) {\n        var _a;\n        const proxyOptions = normalizeProxyOptions(input);\n        super(proxyOptions);\n        const parsedProxy = parseSocksProxy(proxyOptions);\n        this.shouldLookup = parsedProxy.lookup;\n        this.proxy = parsedProxy.proxy;\n        this.tlsConnectionOptions = proxyOptions.tls != null ? proxyOptions.tls : {};\n        this.timeout = (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Initiates a SOCKS connection to the specified SOCKS proxy server,\n     * which in turn connects to the specified remote host and port.\n     *\n     * @api protected\n     */\n    callback(req, opts) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { shouldLookup, proxy, timeout } = this;\n            let { host, port, lookup: lookupCallback } = opts;\n            if (host == null) {\n                throw new Error('No `host` defined!');\n            }\n            if (shouldLookup) {\n                // Client-side DNS resolution for \"4\" and \"5\" socks proxy versions.\n                host = yield new Promise((resolve, reject) => {\n                    // Use the request's custom lookup, if one was configured:\n                    const lookupFn = lookupCallback !== null && lookupCallback !== void 0 ? lookupCallback : dns_1.default.lookup;\n                    lookupFn(host, {}, (err, res) => {\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            resolve(res);\n                        }\n                    });\n                });\n            }\n            const socksOpts = {\n                proxy,\n                destination: { host, port },\n                command: 'connect',\n                timeout: timeout !== null && timeout !== void 0 ? timeout : undefined\n            };\n            const cleanup = (tlsSocket) => {\n                req.destroy();\n                socket.destroy();\n                if (tlsSocket)\n                    tlsSocket.destroy();\n            };\n            debug('Creating socks proxy connection: %o', socksOpts);\n            const { socket } = yield socks_1.SocksClient.createConnection(socksOpts);\n            debug('Successfully created socks proxy connection');\n            if (timeout !== null) {\n                socket.setTimeout(timeout);\n                socket.on('timeout', () => cleanup());\n            }\n            if (opts.secureEndpoint) {\n                // The proxy is connecting to a TLS server, so upgrade\n                // this socket connection to a TLS connection.\n                debug('Upgrading socket connection to TLS');\n                const servername = (_a = opts.servername) !== null && _a !== void 0 ? _a : opts.host;\n                const tlsSocket = tls_1.default.connect(Object.assign(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), { socket,\n                    servername }), this.tlsConnectionOptions));\n                tlsSocket.once('error', (error) => {\n                    debug('socket TLS error', error.message);\n                    cleanup(tlsSocket);\n                });\n                return tlsSocket;\n            }\n            return socket;\n        });\n    }\n}\nexports.SocksProxyAgent = SocksProxyAgent;\nfunction omit(obj, ...keys) {\n    const ret = {};\n    let key;\n    for (key in obj) {\n        if (!keys.includes(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/socks-proxy-agent/dist/index.js\n");

/***/ })

};
;