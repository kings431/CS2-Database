"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/steam-totp";
exports.ids = ["vendor-chunks/steam-totp"];
exports.modules = {

/***/ "(rsc)/./node_modules/steam-totp/index.js":
/*!******************************************!*\
  !*** ./node_modules/steam-totp/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n\r\nconst Crypto = __webpack_require__(/*! crypto */ \"crypto\");\r\n\r\n/**\r\n * Returns the current local Unix time\r\n * @param {number} [timeOffset=0] - This many seconds will be added to the returned time\r\n * @returns {number}\r\n */\r\nexports.time = function(timeOffset) {\r\n\treturn Math.floor(Date.now() / 1000) + (timeOffset || 0);\r\n};\r\n\r\n/**\r\n * Generate a Steam-style TOTP authentication code.\r\n * @param {Buffer|string} secret - Your TOTP shared_secret as a Buffer, hex, or base64\r\n * @param {number} [timeOffset=0] - If you know how far off your clock is from the Steam servers, put the offset here in seconds\r\n * @returns {string}\r\n */\r\nexports.generateAuthCode = exports.getAuthCode = function(secret, timeOffset) {\r\n\tif (typeof timeOffset === 'function') {\r\n\t\texports.getTimeOffset((err, offset, latency) => {\r\n\t\t\tif (err) {\r\n\t\t\t\ttimeOffset(err);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet code = exports.generateAuthCode(secret, offset);\r\n\t\t\ttimeOffset(null, code, offset, latency);\r\n\t\t});\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tsecret = bufferizeSecret(secret);\r\n\r\n\tlet time = exports.time(timeOffset);\r\n\r\n\tlet buffer = Buffer.allocUnsafe(8);\r\n\t// The first 4 bytes are the high 4 bytes of a 64-bit integer. To make things easier on ourselves, let's just pretend\r\n\t// that it's a 32-bit int and write 0 for the high bytes. Since we're dividing by 30, this won't cause a problem\r\n\t// until the year 6053.\r\n\tbuffer.writeUInt32BE(0, 0);\r\n\tbuffer.writeUInt32BE(Math.floor(time / 30), 4);\r\n\r\n\tlet hmac = Crypto.createHmac('sha1', secret);\r\n\thmac = hmac.update(buffer).digest();\r\n\r\n\tlet start = hmac[19] & 0x0F;\r\n\thmac = hmac.slice(start, start + 4);\r\n\r\n\tlet fullcode = hmac.readUInt32BE(0) & 0x7FFFFFFF;\r\n\r\n\tconst chars = '23456789BCDFGHJKMNPQRTVWXY';\r\n\r\n\tlet code = '';\r\n\tfor (let i = 0; i < 5; i++) {\r\n\t\tcode += chars.charAt(fullcode % chars.length);\r\n\t\tfullcode /= chars.length;\r\n\t}\r\n\r\n\treturn code;\r\n};\r\n\r\n/**\r\n * Generate a base64 confirmation key for use with mobile trade confirmations. The key can only be used once.\r\n * @param {Buffer|string} identitySecret - The identity_secret that you received when enabling two-factor authentication\r\n * @param {number} time - The Unix time for which you are generating this secret. Generally should be the current time.\r\n * @param {string} tag - The tag which identifies what this request (and therefore key) will be for. \"conf\" to load the confirmations page, \"details\" to load details about a trade, \"allow\" to confirm a trade, \"cancel\" to cancel it.\r\n * @returns {string}\r\n */\r\nexports.generateConfirmationKey = exports.getConfirmationKey = function(identitySecret, time, tag) {\r\n\tidentitySecret = bufferizeSecret(identitySecret);\r\n\r\n\tlet dataLen = 8;\r\n\r\n\tif (tag) {\r\n\t\tif (tag.length > 32) {\r\n\t\t\tdataLen += 32;\r\n\t\t} else {\r\n\t\t\tdataLen += tag.length;\r\n\t\t}\r\n\t}\r\n\r\n\tlet buffer = Buffer.allocUnsafe(dataLen);\r\n\r\n\t// Auto-detect whether we have support for Buffer#writeUInt64BE and use it if we can. If we have writeUInt64BE\r\n\t// then we also definitely have BigInt.\r\n\tif (buffer.writeBigUInt64BE) {\r\n\t\tbuffer.writeBigUInt64BE(BigInt(time), 0);\r\n\t} else {\r\n\t\t// Fall back to old Y2K38-unsafe behavior.\r\n\t\t// If you're still using Node.js <10.20.0 in 2038, you only have yourself to blame.\r\n\t\tbuffer.writeUInt32BE(0, 0);\r\n\t\tbuffer.writeUInt32BE(time, 4);\r\n\t}\r\n\r\n\tif (tag) {\r\n\t\tbuffer.write(tag, 8);\r\n\t}\r\n\r\n\tlet hmac = Crypto.createHmac('sha1', identitySecret);\r\n\treturn hmac.update(buffer).digest('base64');\r\n};\r\n\r\nexports.getTimeOffset = function(callback) {\r\n\tlet start = Date.now();\r\n\tlet req = (__webpack_require__(/*! https */ \"https\").request)({\r\n\t\t\"hostname\": \"api.steampowered.com\",\r\n\t\t\"path\": \"/ITwoFactorService/QueryTime/v1/\",\r\n\t\t\"method\": \"POST\",\r\n\t\t\"headers\": {\r\n\t\t\t\"Content-Length\": 0\r\n\t\t}\r\n\t}, (res) => {\r\n\t\tif (res.statusCode != 200) {\r\n\t\t\tcallback(new Error(\"HTTP error \" + res.statusCode));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet response = '';\r\n\t\tres.on('data', (chunk) => {\r\n\t\t\tresponse += chunk;\r\n\t\t});\r\n\r\n\t\tres.on('end', () => {\r\n\t\t\ttry {\r\n\t\t\t\tresponse = JSON.parse(response).response;\r\n\t\t\t} catch(e) {\r\n\t\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\t}\r\n\r\n\t\t\tif (!response || !response.server_time) {\r\n\t\t\t\tcallback(new Error(\"Malformed response\"));\r\n\t\t\t}\r\n\r\n\t\t\tlet end = Date.now();\r\n\t\t\tlet offset = response.server_time - exports.time();\r\n\r\n\t\t\tcallback(null, offset, end - start);\r\n\t\t});\r\n\t});\r\n\r\n\treq.on('error', callback);\r\n\r\n\treq.end();\r\n};\r\n\r\n/**\r\n * Get a standardized device ID based on your SteamID.\r\n * @param {string|object} steamID - Your SteamID, either as a string or as an object which has a toString() method that returns the SteamID\r\n * @returns {string}\r\n */\r\nexports.getDeviceID = function(steamID) {\r\n\tlet salt = process.env.STEAM_TOTP_SALT || '';\r\n\treturn \"android:\" + Crypto.createHash('sha1').update(steamID.toString() + salt).digest('hex')\r\n\t\t\t.replace(/^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12}).*$/, '$1-$2-$3-$4-$5');\r\n};\r\n\r\nfunction bufferizeSecret(secret) {\r\n\tif (typeof secret === 'string') {\r\n\t\t// Check if it's hex\r\n\t\tif (secret.match(/[0-9a-f]{40}/i)) {\r\n\t\t\treturn Buffer.from(secret, 'hex');\r\n\t\t} else {\r\n\t\t\t// Looks like it's base64\r\n\t\t\treturn Buffer.from(secret, 'base64');\r\n\t\t}\r\n\t}\r\n\r\n\treturn secret;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/steam-totp/index.js\n");

/***/ })

};
;